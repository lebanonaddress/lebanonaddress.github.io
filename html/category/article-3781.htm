<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3781.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>python输出计算结果_Python学习&#8211;02输入和输出、运算符 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">python输出计算结果_Python学习&#8211;02输入和输出、运算符 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="htmledit_views"> <p>命令行输入</p> <p>x = input("Please input x:")</p> <p>y = raw_input("Please input x:")</p> <p>使用input和raw_input都可以读取控制台的输入，但是input和raw_input在处理数字时是有区别的。raw_input() 将所有输入作为字符串看待，返回字符串类型；而 input() 在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（int, float），input() 可接受合法的 python 表达式。</p> <p>看python input的文档，可以看到input() 本质上还是使用 raw_input() 来实现的，只是调用完 raw_input() 之后再调用 eval() 函数，所以，你甚至可以将表达式作为 input() 的参数，并且它会计算表达式的值并返回它。</p> <p>def input(prompt):</p> <p>return (eval(raw_input(prompt)))</p> <p>除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。</p> <p>输出</p> <p>Python两种输出值的方式: 表达式语句和 print() 函数。(第三种方式是使用文件对象的 write() 方法; 标准输出文件可以用 sys.stdout 引用。)</p> <p>print</p> <p>示例：</p> <p>print "Hello, Python!";</p> <p>print ("Hello, Python!"); #新版本的Python</p> <p>输出的 print 函数总结：</p> <p>字符串和数值类型</p> <p>可以直接输出：</p> <p>&gt;&gt;&gt; print(1)</p> <p>1</p> <p>&gt;&gt;&gt; print("Hello World")</p> <p>Hello World</p> <p>2.变量</p> <p>无论什么类型，数值，布尔，列表，字典...都可以直接输出</p> <p>&gt;&gt;&gt; x = 12</p> <p>&gt;&gt;&gt; print(x)</p> <p>12</p> <p>&gt;&gt;&gt; s = 'Hello'</p> <p>&gt;&gt;&gt; print(s)</p> <p>Hello</p> <p>&gt;&gt;&gt; L = [1,2,'a']</p> <p>&gt;&gt;&gt; print(L)</p> <p>[1, 2, 'a']</p> <p>&gt;&gt;&gt; t = (1,2,'a')</p> <p>&gt;&gt;&gt; print(t)</p> <p>(1, 2, 'a')</p> <p>&gt;&gt;&gt; d = {'a':1, 'b':2}</p> <p>&gt;&gt;&gt; print(d)</p> <p>{'a': 1, 'b': 2}</p> <p>3.格式化输出</p> <p>类似于C中的 printf</p> <p>&gt;&gt;&gt; s</p> <p>'Hello'</p> <p>&gt;&gt;&gt; x = len(s)</p> <p>&gt;&gt;&gt; print("The length of %s is %d" % (s,x))</p> <p>The length of Hello is 5</p> <p>Python中格式化输出的总结：</p> <p>(1) %字符：标记转换说明符的开始</p> <p>(2) 转换标志：-表示左对齐；+表示在转换值之前要加上正负号；""（空白字符）表示正数之前保留空格；0表示转换值若位数不够则用0填充。示例：</p> <p># 指定占位符宽度（左对齐）</p> <p>&gt;&gt;&gt; print ("Name:%-10s Age:%-8d Height:%-8.2f"%("Aviad",25,1.83))</p> <p>Name:Aviad Age:25 Height:1.83</p> <p># 指定占位符（若位数不够则用0填充）</p> <p>&gt;&gt;&gt; print ("Name:%-10s Age:%08d Height:%08.2f"%("Aviad",25,1.83))</p> <p>Name:Aviad Age:00000025 Height:00001.83</p> <p>(3) 最小字段宽度：转换后的字符串至少应该具有该值指定的宽度。如果是*，则宽度会从值元组中读出。</p> <p># 指定占位符宽度</p> <p>&gt;&gt;&gt; print ("Name:%10s Age:%8d Height:%8.2f"%("Aviad",25,1.83))</p> <p>Name: Aviad Age: 25 Height: 1.83</p> <p>(4) 点(.)后跟精度值：如果转换的是实数，精度值就表示出现在小数点后的位数。如果转换的是字符串，那么该数字就表示最大字段宽度。如果是*，则从后面的元组中读取字段宽度或精度。</p> <p>&gt;&gt;&gt; print ("His height is %f m"%(1.83))</p> <p>His height is 1.830000 m</p> <p>&gt;&gt;&gt; print ("His height is %.2f m"%(1.83))</p> <p>His height is 1.83 m</p> <p>&gt;&gt;&gt; print ("The String is %.2s"%("abcd"))</p> <p>The String is ab</p> <p># 用*从后面的元组中读取字段宽度或精度，第1个参数是精度</p> <p>&gt;&gt;&gt; print ("His height is %.*f m"%(2,1.83))</p> <p>His height is 1.83 m</p> <p>(5) 字符串格式化转换类型</p> <p>转换类型 含义</p> <p>d,i 带符号的十进制整数</p> <p>o 不带符号的八进制</p> <p>u 不带符号的十进制</p> <p>x 不带符号的十六进制（小写）</p> <p>X 不带符号的十六进制（大写）</p> <p>e 科学计数法表示的浮点数（小写）</p> <p>E 科学计数法表示的浮点数（大写）</p> <p>f,F 十进制浮点数</p> <p>g 如果指数大于-4或者小于精度值则和e相同，其他情况和f相同</p> <p>G 如果指数大于-4或者小于精度值则和E相同，其他情况和F相同</p> <p>C 单字符（接受整数或者单字符字符串）</p> <p>r 字符串（使用repr转换任意python对象)</p> <p>s 字符串（使用str转换任意python对象）</p> <p>拼接字符串</p> <p>a = 'hello '</p> <p>b = 'world'</p> <p>&gt;&gt;&gt; a+b</p> <p>'hello world'</p> <p>查看变量类型</p> <p>&gt;&gt;&gt; type(a)</p> <p>部分函数</p> <p>math开头需要import math。</p> <p>str(object) 把值转换为字符串</p> <p>repr(object) 返回值的字符串标示形式</p> <p>abs(number) 返回数字的绝对值</p> <p>cmath.sqrt(number) 返回平方根，也可以应用于负数</p> <p>float(object) 把字符串和数字转换为浮点数</p> <p>help() 提供交互式帮助</p> <p>input(prompt) 获取用户输入</p> <p>int(object) 把字符串和数字转换为整数</p> <p>math.ceil(number) 返回数的上入整数，返回值的类型为浮点数</p> <p>math.floor(number) 返回数的下舍整数，返回值的类型为浮点数</p> <p>math.sqrt(number) 返回平方根不适用于负数</p> <p>pow(x,y[.z]) 返回X的y次幂（有z则对z取模）</p> <p>round(number[.ndigits]) 根据给定的精度对数字进行四舍五入</p> <p>str.format() 的基本使用如下:</p> <p>&gt;&gt;&gt; print('We are the {} who say "{}!"'.format('knights', 'Ni'))</p> <p>We are the knights who say "Ni!"</p> <p>括号及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。</p> <p>自定义打印对象函数：</p> <p>def prn_obj(obj):</p> <p>print ', '.join(['%s:%s' % item for item in obj.__dict__.items()])</p> <p>JSON转换</p> <p>json类里提供</p> <p>json.dumps(param) #list转json</p> <p>json.loads(param) #json转list</p> <p>示例：</p> <p>&gt;&gt;&gt; import json</p> <p>&gt;&gt;&gt; json.dumps(['math','english'])</p> <p>'["math", "english"]'</p> <p>&gt;&gt;&gt; json.loads('["math", "english"]')</p> <p>[u'math', u'english']</p> <p>json主要用在PHP的array对象 和 python的list对象上。</p> <p>PHP和Python3能将同样的json还原成 各自的object 且 在各自的语言环境下代表的意义是同样的。</p> <p>但是 PHP和python将object生成json的时候，却不太一样了，PHP生成的json中多了反斜线。</p> <p>打开文件</p> <p>#!/usr/bin/python</p> <p># -*- coding: UTF-8 -*-</p> <p># 打开文件</p> <p>fo = open("runoob.txt", "r+")</p> <p>print "文件名为: ", fo.name</p> <p>line = fo.read(10)</p> <p>print "读取的字符串: %s" % (line)</p> <p># 关闭文件</p> <p>fo.close()</p> <p>运算符</p> <p>Python支持：</p> <p>算数运算符</p> <p>关系运算符</p> <p>赋值运算符</p> <p>逻辑运算符</p> <p>位运算符</p> <p>除了以上的一些运算符之外，Python还支持成员运算符，身份运算符：</p> <p>成员运算符</p> <p>身份运算符</p> <p>算术运算符</p> <p>以下假设变量a为10，变量b为20：</p> <p>运算符</p> <p>描述</p> <p>实例</p> <p>+</p> <p>加 - 两个对象相加</p> <p>a + b 输出结果 30</p> <p>-</p> <p>减 - 得到负数或是一个数减去另一个数</p> <p>a - b 输出结果 -10</p> <p>*</p> <p>乘 - 两个数相乘或是返回一个被重复若干次的字符串</p> <p>a * b 输出结果 200</p> <p>/</p> <p>除 - x除以y</p> <p>b / a 输出结果 2</p> <p>%</p> <p>取模 - 返回除法的余数</p> <p>b % a 输出结果 0</p> <p>**</p> <p>幂 - 返回x的y次幂</p> <p>a**b 为10的20次方， 输出结果 100000000000000000000</p> <p>//</p> <p>取整除 - 返回商的整数部分</p> <p>9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</p> <p>Python算术运算符没有C语言里的自增(++)自减(--)运算符。</p> <p>关系运算符</p> <p>以下假设变量a为10，变量b为20：</p> <p>运算符</p> <p>描述</p> <p>实例</p> <p>==</p> <p>等于 - 比较对象是否相等</p> <p>(a == b) 返回 False。</p> <p>!=</p> <p>不等于 - 比较两个对象是否不相等</p> <p>(a != b) 返回 true.</p> <p>&lt;&gt;</p> <p>不等于 - 比较两个对象是否不相等</p> <p>(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</p> <p>&gt;</p> <p>大于 - 返回x是否大于y</p> <p>(a &gt; b) 返回 False。</p> <p>&lt;</p> <p>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</p> <p>(a &lt; b) 返回 true。</p> <p>&gt;=</p> <p>大于等于 - 返回x是否大于等于y。</p> <p>(a &gt;= b) 返回 False。</p> <p>&lt;=</p> <p>小于等于 - 返回x是否小于等于y。</p> <p>(a &lt;= b) 返回 true。</p> <p>赋值运算符</p> <p>以下假设变量a为10，变量b为20：</p> <p>运算符</p> <p>描述</p> <p>实例</p> <p>=</p> <p>简单的赋值运算符</p> <p>c = a + b 将 a + b 的运算结果赋值为 c</p> <p>+=</p> <p>加法赋值运算符</p> <p>c += a 等效于 c = c + a</p> <p>-=</p> <p>减法赋值运算符</p> <p>c -= a 等效于 c = c - a</p> <p>*=</p> <p>乘法赋值运算符</p> <p>c *= a 等效于 c = c * a</p> <p>/=</p> <p>除法赋值运算符</p> <p>c /= a 等效于 c = c / a</p> <p>%=</p> <p>取模赋值运算符</p> <p>c %= a 等效于 c = c % a</p> <p>**=</p> <p>幂赋值运算符</p> <p>c **= a 等效于 c = c ** a</p> <p>//=</p> <p>取整除赋值运算符</p> <p>c //= a 等效于 c = c // a</p> <p>逻辑运算符</p> <p>Python语言支持逻辑运算符。</p> <p>在Python中是没有&amp;&amp;、||、!这三个运算符的，取而代之的是英文and、or、not。</p> <p>以下假设变量 a 为 10, b为 20:</p> <p>运算符</p> <p>逻辑表达式</p> <p>描述</p> <p>实例</p> <p>and</p> <p>x and y</p> <p>布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</p> <p>(a and b) 返回 20</p> <p>or</p> <p>x or y</p> <p>布尔"或"- 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。</p> <p>(a or b) 返回 10。</p> <p>not</p> <p>not x</p> <p>布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</p> <p>not(a and b) 返回 False</p> <p>位运算符</p> <p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p> <p>下表中变量 a 为 60，b 为 13，二进制格式如下：</p> <p>a = 0011 1100</p> <p>b = 0000 1101</p> <p>-----------------</p> <p>a&amp;b = 0000 1100</p> <p>a|b = 0011 1101</p> <p>a^b = 0011 0001</p> <p>~a = 1100 0011</p> <p>运算符</p> <p>描述</p> <p>实例</p> <p>&amp;</p> <p>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</p> <p>(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</p> <p>|</p> <p>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</p> <p>(a | b) 输出结果 61 ，二进制解释： 0011 1101</p> <p>^</p> <p>按位异或运算符：当两对应的二进位相异时，结果为1</p> <p>(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</p> <p>~</p> <p>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1</p> <p>(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</p> <p>&lt;&lt;</p> <p>左移动运算符：运算数的各二进位全部左移若干位，由"&lt;&lt;"右边的数指定移动的位数，高位丢弃，低位补0。</p> <p>a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</p> <p>&gt;&gt;</p> <p>右移动运算符：把"&gt;&gt;"左边的运算数的各二进位全部右移若干位，"&gt;&gt;"右边的数指定移动的位数</p> <p>a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</p> <p>成员运算符</p> <p>以下假设变量 a 为 1, b为 20，c为[1, 2, 3, 4, 5 ]:</p> <p>运算符</p> <p>描述</p> <p>实例</p> <p>in</p> <p>如果在指定的序列中找到值返回 True，否则返回 False。</p> <p>(a in c), 返回 True。</p> <p>not in</p> <p>如果在指定的序列中没有找到值返回 True，否则返回 False。</p> <p>(b not in c), 返回 True。</p> <p>身份运算符</p> <p>身份运算符用于比较两个对象的存储单元。</p> <p>运算符</p> <p>描述</p> <p>实例</p> <p>is</p> <p>is是判断两个标识符是不是引用自一个对象</p> <p>x is y, 如果 id(x) 等于 id(y) , is 返回结果 1</p> <p>is not</p> <p>is not是判断两个标识符是不是引用自不同对象</p> <p>x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1</p> <p>运算符优先级</p> <p>运算符</p> <p>描述</p> <p>**</p> <p>指数 (最高优先级)</p> <p>~ + -</p> <p>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</p> <p>* / % //</p> <p>乘，除，取模和取整除</p> <p>+ -</p> <p>加法减法</p> <p>&gt;&gt; &lt;&lt;</p> <p>右移，左移运算符</p> <p>&amp;</p> <p>位 'AND'</p> <p>^ |</p> <p>位运算符</p> <p>&lt;= &lt; &gt; &gt;=</p> <p>比较运算符</p> <p>&lt;&gt; == !=</p> <p>等于运算符</p> <p>= %= /= //= -= += *= **=</p> <p>赋值运算符</p> <p>is is not</p> <p>身份运算符</p> <p>in not in</p> <p>成员运算符</p> <p>not or and</p> <p>逻辑运算符</p> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>下一个：<a href="/html/category/article-3782.htm">python数据分析与挖掘实战————银行分控模型（几种算法模型的比较）</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-5955.htm" title="猫三联疫苗间隔多久打一次（猫三联疫苗间隔多少天）">猫三联疫苗间隔多久打一次（猫三联疫苗间隔多少天）</a></li>
                        <li class="py-2"><a href="/html/category/article-7239.htm" title="动物疫苗的定义和分类（动物疫苗的生产原料有哪些,如何取得）">动物疫苗的定义和分类（动物疫苗的生产原料有哪些,如何取得）</a></li>
                        <li class="py-2"><a href="/html/category/article-6175.htm" title="狗市吉娃娃多少钱（狗市吉娃娃视频）">狗市吉娃娃多少钱（狗市吉娃娃视频）</a></li>
                        <li class="py-2"><a href="/html/category/article-6174.htm" title="三国杀武将展示替换（三国杀装备替换）">三国杀武将展示替换（三国杀装备替换）</a></li>
                        <li class="py-2"><a href="/html/category/article-7468.htm" title="动物疫苗价格表图片及价格大全图（动物疫苗多少钱一支）">动物疫苗价格表图片及价格大全图（动物疫苗多少钱一支）</a></li>
                        <li class="py-2"><a href="/html/category/article-6733.htm" title="瓷砖旗下品牌大全">瓷砖旗下品牌大全</a></li>
                        <li class="py-2"><a href="/html/category/article-5595.htm" title="猫抓后多少天过危险期（猫抓后多久发病）">猫抓后多少天过危险期（猫抓后多久发病）</a></li>
                        <li class="py-2"><a href="/html/category/article-6043.htm" title="东北农村房间(东北农村室内)">东北农村房间(东北农村室内)</a></li>
                        <li class="py-2"><a href="/html/category/article-7514.htm" title="郑州宠物用品批发进货渠道在哪里（郑州宠物用品批发进货渠道在哪里啊）">郑州宠物用品批发进货渠道在哪里（郑州宠物用品批发进货渠道在哪里啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-6218.htm" title="外卖预制菜十大品牌">外卖预制菜十大品牌</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
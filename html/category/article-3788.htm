<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3788.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Metalama简介5.配合VisualStudio自定义重构或快速操作功能_在线工具 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Metalama简介5.配合VisualStudio自定义重构或快速操作功能_在线工具 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p>使用基于Roslyn的编译时AOP框架来解决.NET项目的代码复用问题<br />Metalama简介1. 不止是一个.NET跨平台的编译时AOP框架<br />Metalama简介2.利用Aspect在编译时进行消除重复代码<br />Metalama简介3.自定义.NET项目中的代码分析<br />Metalama简介4.使用Fabric操作项目或命名空间</p> <p>在<code>Visual Studio</code>中有提供<code>快速操作</code>(小灯泡)功能</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9a5181bba49e3e740647504c2e412ab5.jpg" alt="Metalama简介5.配合VisualStudio自定义重构或快速操作功能_在线工具"></p> <p>以及<code>重构</code>（小刷子）功能</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/328c3bf0195db2766ae7d0e15aca6804.jpg" alt="Metalama简介5.配合VisualStudio自定义重构或快速操作功能_在线工具"></p> <p>使用它们可以快速进行一些快捷的针对代码的操作，如提取接口、添加实现、自动属性、快速重构、删除引用等。<br /> 除官方提供的功能外我们还可以使用很多第三方插件来支持更多地功能。</p> <p><code>Metalama</code>可以通过编写代码的形式，让我们为指定的代码添加<code>重构</code>或<code>快速操作</code>的功能。</p> <h1 id="自定义一个tostring的实时模板">自定义一个ToString的实时模板</h1> <p>很多图形编程或游戏编程中，我们会用到各种自定义类如矩阵、复数、坐标系等，为了方便Debug，我们通常会为这些类增加一个<code>ToString</code>方法的重写。</p> <p>例如</p> <pre><code class="language-csharp">internal class Program {     private static void Main()     {         var point = new Point { X = 5, Y = 3};         Console.WriteLine($"point = {point}");     } } internal class Point {     public double X;     public double Y;     public override string ToString()     {         return $"({X}, {Y})";     } }</code></pre> <p>如果我们不想手写这个<code>ToString</code>方法,而想让VS直接为它生成。<br /> 则我们可以使用<code>Metalama</code>定义一个LiveTemplate，这样就可以在VS的工具中使用它了。</p> <pre><code class="language-csharp">[LiveTemplate] // 表示当前Aspect为VS添加LiveTempate internal class ToStringAttribute : TypeAspect {     [Introduce(WhenExists = OverrideStrategy.Override, Name = "ToString")]     public string IntroducedToString()     {         var stringBuilder = new InterpolatedStringBuilder();         stringBuilder.AddText("{ ");         stringBuilder.AddText(meta.Target.Type.Name);         stringBuilder.AddText(" ");          var fields = meta.Target.Type.FieldsAndProperties.Where(f => !f.IsStatic).ToList();          var i = meta.CompileTime(0);          foreach (var field in fields)         {             if (i > 0)             {                 stringBuilder.AddText(", ");             }              stringBuilder.AddText(field.Name);             stringBuilder.AddText("=");             stringBuilder.AddExpression(field.Invokers.Final.GetValue(meta.This));              i++;         }          stringBuilder.AddText(" }");          return stringBuilder.ToValue();     } }</code></pre> <p>这样在，下列代码中使用<code>重构</code>功能，即可看到<code>Metalama</code>给的实时代码提示。</p> <pre><code class="language-csharp">internal class Point {     public double X;     public double Y; }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b3c72f284102253c15ff4a1c7d34ac07.jpg" alt="Metalama简介5.配合VisualStudio自定义重构或快速操作功能_在线工具"></p> <h1 id="使用metalama添加一个visualstudio的快速操作">使用Metalama添加一个VisualStudio的快速操作</h1> <p>我们最终的目的如下，对于标注了<code>[Tostring]</code>的类，增加一个<code>将[ToString]切换至手动实现</code>的功能点击后可实现自动添加一个ToString：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/d7d3ec097d68144159625edf15e25c22.jpg" alt="Metalama简介5.配合VisualStudio自定义重构或快速操作功能_在线工具"></p> <p>这需要我们在<code>Aspect``ToStringAttribute</code>中添加一个提示：</p> <pre><code class="language-csharp">public class ToStringAttribute : TypeAspect {     public override void BuildAspect(IAspectBuilder<INamedType> builder)     {         base.BuildAspect(builder);         // 添加一个建议手动实现的重构提示         if (builder.AspectInstance.Predecessors[0].Instance is IAttribute attribute)         {             builder.Diagnostics.Suggest(                 new CodeFix("将 [ToString] 切换至手动实现", codeFixBuilder => this.ImplementManually(codeFixBuilder, builder.Target)),                 builder.Target);         }     }      /// <summary>     /// 当点击手动实现时的操作     /// </summary>     private async Task ImplementManually(ICodeActionBuilder builder, INamedType targetType)     {         await builder.ApplyAspectAsync(targetType, this);         await builder.RemoveAttributesAsync(targetType, typeof(ToStringAttribute));     }      [Introduce(WhenExists = OverrideStrategy.Override, Name = "ToString")]     public string IntroducedToString()     {         // 获取非静态字段         var fields = meta.Target.Type.FieldsAndProperties.Where(f => !f.IsStatic).ToList();          // 构建一个$""字符串         var stringBuilder = new InterpolatedStringBuilder();         stringBuilder.AddText("{ ");         stringBuilder.AddText(meta.Target.Type.Name);         stringBuilder.AddText(" ");          var i = meta.CompileTime(0);          foreach (var field in fields)         {             if (i > 0)             {                 stringBuilder.AddText(", ");             }              stringBuilder.AddText(field.Name);             stringBuilder.AddText("=");             stringBuilder.AddExpression(field.Invokers.Final.GetValue(meta.This));              i++;         }          stringBuilder.AddText(" }");         return stringBuilder.ToValue();     } }</code></pre> <p>这样就可以对于已经添加了<code>[ToString]</code>的类实现以上功能</p> <pre><code class="language-csharp">[ToString] internal class Point // 在此处触发 Ctrl+.或右键 {     public double X;     public double Y; }</code></pre> <h1 id="引用">引用</h1> <p>本章源代码：https://github.com/chsword/metalama-demo<br /> Metalama官方文档:https://doc.metalama.net/<br /> Metalama Nuget包:https://www.nuget.org/packages/Metalama.Framework/0.5.13-preview</p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3787.htm">微信小程序四（设置底部导航）</a></p>
                                                <p>下一个：<a href="/html/category/article-3789.htm">基本的vuex封装</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4150.htm" title="netty系列之:在netty中使用native传输协议">netty系列之:在netty中使用native传输协议</a></li>
                        <li class="py-2"><a href="/html/category/article-4050.htm" title="C ++程序实施Rabin-Miller素性测试以检查给定数字是否为素数">C ++程序实施Rabin-Miller素性测试以检查给定数字是否为素数</a></li>
                        <li class="py-2"><a href="/html/category/article-4062.htm" title="Python格式化输出的三种方法（format,f前缀，%s）">Python格式化输出的三种方法（format,f前缀，%s）</a></li>
                        <li class="py-2"><a href="/html/category/article-4063.htm" title="Python生成sql语句">Python生成sql语句</a></li>
                        <li class="py-2"><a href="/html/category/article-4058.htm" title="TS语言与JS语言的区别">TS语言与JS语言的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-4037.htm" title="C++中的匿名对象的概念和使用">C++中的匿名对象的概念和使用</a></li>
                        <li class="py-2"><a href="/html/category/article-4612.htm" title="猫咪打疫苗针要多少钱（猫咪打疫苗需要花多少钱）">猫咪打疫苗针要多少钱（猫咪打疫苗需要花多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-4576.htm" title="下一站是幸福贺繁星元宋分手（下一站幸福大结局）速看，">下一站是幸福贺繁星元宋分手（下一站幸福大结局）速看，</a></li>
                        <li class="py-2"><a href="/html/category/article-4064.htm" title="用python实现文件的词频统计">用python实现文件的词频统计</a></li>
                        <li class="py-2"><a href="/html/category/article-4504.htm" title="宠物领养平台有哪几个品牌名称（宠物领养平台有哪几个品牌名称好听）">宠物领养平台有哪几个品牌名称（宠物领养平台有哪几个品牌名称好听）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
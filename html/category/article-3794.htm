<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3794.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>减治思二分查找详细总结 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">减治思二分查找详细总结 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h1 id="减治思想二分查找详细总结">减治思想二分查找详细总结</h1> <p>二分查找应用于有序数组，可以在以<span class="math inline">\(O(\log(n))\)</span>时间复杂度进行查找。其思想在于利用数组的有序性直接排除掉一些元素，这也是进行“减治”的地方。二分查找思想看起来简单，但是其<strong>边界条件</strong>其实很容易弄混，下面就对<strong>各种情况的二分查找</strong>（基础情形、左边界二分查找、右边界二分查找、应插入位置二分查找）进行详细的说明，完整的代码附在附录里面。</p> <p>文章的的后半部分挑选了部分leetcode中典型应用二分思想的题目。</p> <h2 id="1-二分查找的总结">1. 二分查找的总结</h2> <p>这里贴上一份十分细节的讲解</p> <p>二分查找写法的核心在于<strong>缩小查找的边界</strong>，也就是不断地缩小查找范围，使得目标值在范围内。当查找范围为空集或找到了目标值时，就可以结束循环。如果懂得这个道理，二分查找写起来就简单多了。</p> <h3 id="11-普通的二分查找">1.1 普通的二分查找</h3> <p>最普通的二分查找，我们只要求它能找到目标元素或返回异常值（返回-1表示未查找到目标元素）就好。其基本思想非常好理解，就是利用数组的有序性来筛掉不必要进行查找的元素。</p> <p><strong>注意：</strong></p> <p>二分查找最重要一点就是边界条件的判断，在整个数组中进行查询时，可以使用<span class="math inline">\(lo<=hi\)</span>的写法，其中hi的起始值为nums.length - 1。也可以采用<span class="math inline">\(lo<hi\)</span>的的写法，其中hi的起始值为num.length：而且两种不同的边界条件lo和hi的变动也有所不同（详见如下代码）。</p> <p>二分查找非递归实现：</p> <pre><code class="language-java">public static int search(int[] nums, int target) {     return search(nums, target, 0, nums.length - 1); } // lo <= hi的写法，hi的初始值为nums.length - 1 public static int search(int[] nums, int target, int lo, int hi) {     while (lo <= hi) {         int mid = lo + (hi - lo) / 2; // 避免可能的溢出         if (nums[mid] < target)             lo = mid + 1; // 已经确定mid位置不可能是目标元素，将lo设置为mid的下一位         else if (nums[mid] > target)             hi = mid - 1; // 已经确定mid位置不可能是目标元素，将hi设置为mid的上一位         else             return mid; // 找到了就直接返回mid就好     }     return -1; // 没找到返回异常值 }  // lo < hi的写法，hi的初始值为nums.length - 1 public static int search2(int[] nums, int target, int lo, int hi) {     while (lo < hi) {         int mid = lo + (hi - lo) / 2;         if (nums[mid] < target)             lo = mid + 1; // lo这侧为闭区间，写法与上面示例相同         else if (nums[mid] > target)             hi = mid; // hi这侧为开区间，写法与上面示例有区别！开区间这侧端点是取不到的，所以将hi设置为mid就好         else             return mid;     }     return -1; }</code></pre> <p>二分查找递归实现：</p> <pre><code class="language-java">public static int binarySearchRecur(int[] nums, int target, int low, int high) {     int mid = low + (high - low) / 2;     if (target > nums[mid])         return binarySearchRecur(nums, target, mid + 1, high);     else if (target < nums[mid])         return binarySearchRecur(nums, target, low, mid - 1);     else if (target == nums[mid])         return mid;     return -1; }</code></pre> <p><strong>注意</strong>：</p> <ol> <li> <p>为什么mid的计算方式不是$mid = \frac{(lo + hi)}{2}<span class="math inline">\(而是\)</span>mid = lo + \frac{hi - lo}{2}$呢？</p> <p>解答：毫无疑问的是，从数学上看两者是完全等价的。但是从数值计算的角度来看，若lo和hi都很大，lo直接与hi做和有溢出的可能，而第二种方式通过让hi与lo先做差，一定程度上避免了溢出的可能。</p> <p>类似的有 mid * mid < target 可写为 mid < target < mid，也可以在一定程度上防止数字过大带来的溢出。</p> </li> <li> <p>二分查找可以通过循环或递归的方式实现，但是递归方法的效率往往较低，在这里更推荐非递归写法。</p> </li> </ol> <p><strong>一个困难</strong>：</p> <p>上面实现的二分查找仅仅是找到数组中的一元素，可是有时候我们希望能获取更多信息。例如，当数组中可能存在很多个相同元素时，我们希望二分查找返回相同元素的最左边元素或最右边元素，这样方便我们提取出所有该重复元素。</p> <p>有的同学可能会产生疑问，我只要通过二分查找找到目标元素，向左遍历或者向右遍历就好啦！总可以找到该元素最左侧或者最右侧位置嘛！可是这样在最坏情况的复杂度可能会上升至O(n)，例如数组中所有元素均相同时候。能不能将上面的二分查找代码稍作改进以在最坏情况下时间复杂度仍能保持在对数级别呢？</p> <h3 id="12-左边界二分查找">1.2 左边界二分查找</h3> <p>首先，普通的二分查找在找到目标元素位置后就直接返回了，但是若要查找左边界就<strong>不能让其直接返回</strong>，也就是在查找到目标元素后我们得想办法继续改变lo和hi指针，使得它们<strong>逐渐收缩至最左侧目标元素</strong>。这里由于个人习惯采取了lo和hi的选取设置为闭开区间的写法，也可以写为闭区间的形式。</p> <pre><code class="language-java">public static int leftBound(int[] nums, int target) {     return leftBound(nums, target, 0, nums.length); }  public static int leftBound(int[] nums, int target, int lo, int hi) {     while (lo < hi) {         int mid = lo + (hi - lo) / 2;         if (nums[mid] < target)             lo = mid + 1;         // 其实下面两种情况都是一种解决方法，用一个else即可         // 但是为了逻辑清晰，这里暂时全部列出来         else if (nums[mid] > target)             hi = mid;         else             hi = mid; // 若找到了先不要返回，不断地将hi指针靠向lo指针方向     }     if (lo == nums.length)         return -1;     return nums[lo] == target ? lo : -1; // 可能找不到，不要忘记判断 }</code></pre> <h3 id="13-右边界二分查找">1.3 右边界二分查找</h3> <p>如果你理解了左边界二分查找，右边界二分查找就十分简单了，思路都是相同的，只不过是在相等的情况下我们让lo指针靠近hi指针</p> <pre><code class="language-java">public static int rightBound(int[] nums, int target) {     return rightBound(nums, target, 0, nums.length); }  public static int rightBound(int[] nums, int target, int lo, int hi) {     while (lo < hi) {         int mid = lo + (hi - lo) / 2;         if (nums[mid] < target)             lo = mid + 1;         else if (nums[mid] > target)             hi = mid;         else             lo = mid + 1; // 若找到了先不要返回，不断地将lo指针靠向hi指针方向     }     // 可以仔细推算一下，循环结束后lo与hi指向目标位置的下一个位置，所以下面是用lo - 1     // 不要忘记数组中可能不存在这个元素     if (lo == 0)         return -1;     return nums[lo - 1] == target ? lo - 1 : -1; // 仔细体会这个返回值 }</code></pre> <h3 id="14-插入位置二分查找">1.4 插入位置二分查找</h3> <p>如果有序数组中有目标元素值，我们直接返回其对应数组下标；若有序数组中没有目标元素值，我们返回目标值应该插入到的位置，也就是把这个目标值插入到此位置，新生成的数组是仍是有序的。</p> <p>我们采用的形式十分类似于左边界二分查找，唯一的差别在于我们在return语句中不检查是否找到目标元素，直接返回lo对应的值即可。为了更好的理解这段代码为什么能够满足我们的要求，以下对lo指针的行为进行分析：</p> <ol> <li> <p>如果数组中存在目标元素:</p> <p>显然此时代码的行为与左边界二分查找完全相同，会返回最左端的目标元素位置</p> </li> <li> <p><strong>如果数组中不存在目标元素</strong>：</p> <p>lo指针与hi指针收缩到的位置只能有以下可能: 数组的最左端，数组的最右端、小于目标元素的最大元素（结合代码多看看），所以lo返回的位置就是目标元素应该插入到的位置。</p> </li> </ol> <pre><code class="language-java">public static int insertSearch(int[] nums, int target) {     return insertSearch(nums, target, 0, nums.length); }  public static int insertSearch(int[] nums, int target, int lo, int hi) {     while (lo < hi) {     int mid = lo + (hi - lo) / 2;     if (nums[mid] < target)         lo = mid + 1;     else if (nums[mid] > target)         hi = mid;     else         lo = mid + 1;     }     return lo;  }</code></pre> <h2 id="2-二分思想的应用指offer例题">2. 二分思想的应用（指Offer例题）</h2> <h3 id="21-34-在排序数组中查找元素的第一个和最后一个位置">2.134. 在排序数组中查找元素的第一个和最后一个位置</h3> <p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p> <p>如果数组中不存在目标值 target，返回 [-1, -1]。</p> <p>进阶：</p> <p>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</p> <pre><code class="language-示例">示例 1： 输入：nums = [5,7,7,8,8,10], target = 8 输出：[3,4]  示例 2： 输入：nums = [5,7,7,8,8,10], target = 6 输出：[-1,-1]  示例 3： 输入：nums = [], target = 0 输出：[-1,-1]</code></pre> <pre><code class="language-提示">提示： 0 <= nums.length <= 105 -109 <= nums[i] <= 109 nums 是一个非递减数组 -109 <= target <= 109</code></pre> <h4 id="211-题目分析">2.1.1 题目分析</h4> <p>这道题看起来思路很清晰，我们只需要分别使用二分查找寻找左边界和右边界就好。</p> <h4 id="222-代码">2.2.2 代码</h4> <pre><code class="language-java">class Solution {     public int[] searchRange(int[] nums, int target) {         if (nums.length == 0)             return new int[] {-1, -1};         int lo = 0, hi = nums.length;         // 寻找左边界         while (lo < hi) {             int mid = lo + (hi - lo) / 2;             if (nums[mid] < target)                 lo = mid + 1;             else                 hi = mid;         }         // 这个地方需要仔细思考一下，如果查找左边界时发现了问题就直接返回异常值就好         if (lo == nums.length || nums[lo] != target)             return new int[] {-1, -1};          // 寻找右边界         int i = 0, j = nums.length;         while (i < j) {             int mid = i + (j - i) / 2;             if (nums[mid] > target)                 j = mid;             else                 i = mid + 1;         }         return new int[] {lo, i-1};     } }</code></pre> <p>这是一个比较初级的写法，实际上可以通过一个函数同时查找左边界和右边界，可以查看对应题目的官方题解。</p> <hr/> <h3 id="22-69-x-的平方根-">2.269. x 的平方根</h3> <p>由于返回类型是整数，结果只保留整数部分，小数部分将被 舍去 。</p> <p>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p> <pre><code class="language-示例">示例 1： 输入：x = 4 输出：2  示例 2： 输入：x = 8 输出：2 解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。</code></pre> <p>提示：<span class="math inline">\(0 <= x <= 2^{31} - 1\)</span></p> <h4 id="221-题目分析">2.2.1 题目分析</h4> <p>只要读完题目就知道本题实际上是要我们求出x平方根的整数部分，也就是<strong>求一个整数k，满足k的平方小于x且<span class="math inline">\(0<x - k^2<1\)</span></strong>。</p> <p>如果按照暴力的解法来看，我们只需要从1开始遍历整数k，直到找到合适的k为止（也就是当此时的k平方大于x时，返回k-1），这样的时间复杂度为O(n)。</p> <p>其实在上面的过程中我们使用了顺序查找，而且查找的序列还是一个有序的序列，我们可以使用二分查找来降低时间复杂度。(为什么本题与二分查找联系在一起）。</p> <h4 id="222-代码-1">2.2.2 代码</h4> <pre><code class="language-java">class Solution {     public int mySqrt(int x) {         // 设置一个ans来记录当前的一个合适的mid值         int l = 0, r = x, ans = -1;         while (l <= r) { // 当然你可以选择 l < r的写法，但是本题x的取值范围可达到整数最大值，这么做会不太方便             int mid = l + (r - l) / 2;             // 由于mid的范围很大，不转换则会溢出             // 可以使用我们上面提到的方法来防止溢出，但是需要额外设置一些特殊值检查来防止特殊值（0，1）             if ((long)mid * mid <= x) {                 ans = mid;                  l = mid + 1;             } else {                 r = mid - 1;             }         }         // 当循环结束时，ans一定与较小的lo或者hi相等，要注意理解         // 这个ans是我们妥协出来的产物，如果x范围不会达到int类型最大值，采用l < r则不需要ans了         return ans;      } }</code></pre> <p>这道题实际上还有很多有趣的解法：例如袖珍计算器法、牛顿迭代法，但由于本专题是在讨论二分查找问题，故不再介绍这些方法，详见对应官方解析页面。</p> <hr/> <h3 id="23-367-有效的完全平方数">2.3367. 有效的完全平方数</h3> <p>给定一个 正整数 num ，编写一个函数，如果 num 是一个完全平方数，则返回 true ，否则返回 false 。</p> <p>进阶：不要 使用任何内置的库函数，如  sqrt 。</p> <p>示例 1：</p> <p>输入：num = 16<br /> 输出：true</p> <p>示例 2：</p> <p>输入：num = 14<br /> 输出：false</p> <h4 id="231-题目分析">2.3.1 题目分析</h4> <p>检验完全平方数实际上就是从1到num这个整数序列中查找是否存在一个数k，其满足k的平方等于num，如果不存在这样的k则意味着num不是完全平方数。所以可以用二分的思想来寻找这个整数k。</p> <h4 id="232-代码">2.3.2 代码</h4> <pre><code class="language-java">class Solution {     public boolean isPerfectSquare(int num) {         int lo = 1, hi = num;         while (lo <= hi) {             int mid = lo + (hi - lo) / 2;             long val = (long)mid * mid; // 注意这个显示的类型转换，尤其是mid前面的那个             if (val > num)                 hi = mid - 1;             else if (val < num)                 lo = mid + 1;             else                  return true; // 找到k就直接返回true         }         return false; // 如果循环都结束了还没找到只能说明这样的k是不存在的，所以返回false     } }</code></pre> <hr/> <h3 id="24-153-寻找旋转排序数组中的最小值与154-寻找旋转排序数组中的最小值-ii">2.4153. 寻找旋转排序数组中的最小值与154. 寻找旋转排序数组中的最小值 II</h3> <p>已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：<br /> 若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]<br /> 若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]<br /> 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。</p> <p>给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</p> <p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p> <pre><code class="language-示例">示例 1： 输入：nums = [3,4,5,1,2] 输出：1 解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。  示例 2： 输入：nums = [4,5,6,7,0,1,2] 输出：0 解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。  示例 3： 输入：nums = [11,13,15,17] 输出：11 解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。</code></pre> <pre><code class="language-提示">提示： n == nums.length 1 <= n <= 5000 -5000 <= nums[i] <= 5000 nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转</code></pre> <h4 id="241-题目分析">2.4.1 题目分析</h4> <p>数组的一次旋转其实就是将最后一位元素提到最前面来，旋转n次之后可能会出现这样的结果：数组被分为两个有序部分，我们不妨分别称之为左有序数组、右有序数组。当左有序数组、右有序数组长度不为0时，左有序数组元素是要大于等于右有序数组的元素的；当左有序数组为0时，最左端位置就是最小元素；当右有序数组为0时，最右端元素为最小元素。</p> <p>这样一道题看起来与二分查找有什么关联呢？而且这个数组甚至不是完全有序的！下面来分析一下为什么二分思想在本题是可以应用。</p> <p>可以利用左子数组与右子数组特性——左子树组与右子数组均递增且左子数组元素大于等于右子数组元素</p> <p>我们设置两个指针lo和hi，分别指向数组头和尾，比较mid = (lo + hi) / 2，比较nums[mid]与nums[hi]的值</p> <ul> <li>若nums[mid] < nums[hi]，说明mid指向右子数组元素，将lo指针挪至mid处（mid指向的位置本身就可以为最小元素）</li> <li>若nums[mid] > nums[hi]，说明mid指向左子数组元素，将lo指针挪至mid + 1处（mid所指向位置不可能是最小元素）</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e3e61f67bb8f32c158df770d4ef04b1d.jpg" alt="减治思二分查找详细总结"></p> <ul> <li> <p>如果nums[mid] == nums[hi]，遇到<strong>重复值情形</strong>，此时可以将hi --    (如果考虑这个情况可能会出错)</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/2d833ea8405f088337d6e0976092b564.jpg" alt="减治思二分查找详细总结"></p> <p><strong>注意：</strong></p> <p>如果不考虑重复值带来的影响，可能会出现死循环或者无法找到正确值的情况（取决于你的代码实现）。如何合理处理以上情况呢？</p> <p>当左子数组和右子数组均存在时（当左子数组不存在时，相当于数组是升序情况，二分查找的思想很显然可以应用），左子数组元素大于等于右子数组且两者均升序。如果mid所指向值等于hi指向值，可以将断定删除hi所指向的值并不影响最终结果的查找。删除掉hi所指向的元素值，不会使最小值从数组中被删去（即使被删除的元素是最小值，那么数组中仍存在该最小值）。<strong>要好好理解</strong>！</p> </li> </ul> <h4 id="242-代码">2.4.2 代码</h4> <pre><code class="language-java">class Solution {     public int findMin(int[] nums) {         int lo = 0, hi = nums.length - 1;         int mid;         while (lo < hi) {             mid = lo + (hi - lo) / 2;             if (nums[mid] > nums[hi])                 lo = mid + 1;             else if (nums[mid] < nums[hi])                 hi = mid;             else                 hi -= 1;         }         return nums[lo];     } }</code></pre> <h3 id="25-剑指-offer-53---ii-0n-1中缺失的数字">2.5剑指 Offer 53 - II. 0～n-1中缺失的数字</h3> <p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p> <p>示例 1:输入: [0,1,3]<br /> 输出: 2</p> <p>示例 2:输入: [0,1,2,3,4,5,6,7,9]<br /> 输出: 8</p> <p>限制：1 <= 数组长度 <= 10000</p> <h4 id="251-题目分析">2.5.1 题目分析</h4> <p>由于本题还是一个有序数组，应该首先想想能否使用二分查找或利用类似的思想去解决问题。</p> <p>首先，长度为n-1的数组取值为0到n，仅缺失一个元素，而题目要我们查找出这个缺失值。可能看起来有些奇怪是不是？其实这个形式与之前我们写过的<strong>查找插入位置的二分查找</strong>是类似的。</p> <p>如果数组长度是n且升序排列，那么实际上数组元素与其下标是相等的，但是缺失了一个元素之后，缺失元素右侧全部元素数组下标均较少1，也就是在缺失元素前的元素值仍等于数组下标。数组被分为了两个部分，我们要做的也就是查找却缺失元素右侧第一个元素，或者说右侧数组的开头元素。</p> <p>换个角度来看，事实上这个数组可以被视为只有两种取值，一种取值为下标等于值，另一种是下标不等于值，我们要查找的就是下标不等于值的最左侧元素，而缺失的元素的值正好为<strong>leftBound查找</strong>出来的元素最左端下标。</p> <h4 id="252-代码">2.5.2 代码</h4> <pre><code class="language-java">// 二分搜索 class Solution {     public int missingNumber(int[] nums) {         int mid;         int lo = 0, hi = nums.length;         while (lo < hi) {             mid = lo + (hi - lo) / 2;             if (nums[mid] == mid) // 注意这个搜索条件                 lo = mid + 1;             else                 hi = mid;         }         return lo;     } }</code></pre> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3793.htm">ThreadLocal原理及使用场景</a></p>
                                                <p>下一个：<a href="/html/category/article-3795.htm">vue3及与vue2的区别总结（部分）</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7515.htm" title="动物医院诊疗范围有哪些类型 动物医院诊疗范围有哪些类型的">动物医院诊疗范围有哪些类型 动物医院诊疗范围有哪些类型的</a></li>
                        <li class="py-2"><a href="/html/category/article-7469.htm" title="烧茶壶哪个品牌好一点(烧水壶十大公认品牌)">烧茶壶哪个品牌好一点(烧水壶十大公认品牌)</a></li>
                        <li class="py-2"><a href="/html/category/article-7928.htm" title="直接融资方式和间接融资方式(直接融资和间接融资典型形式有哪些?)">直接融资方式和间接融资方式(直接融资和间接融资典型形式有哪些?)</a></li>
                        <li class="py-2"><a href="/html/category/article-7146.htm" title="妙三多三联疫苗打几针（妙三多三联是什么意思）">妙三多三联疫苗打几针（妙三多三联是什么意思）</a></li>
                        <li class="py-2"><a href="/html/category/article-7744.htm" title="动物防疫方针 动物防疫方针是什么?">动物防疫方针 动物防疫方针是什么?</a></li>
                        <li class="py-2"><a href="/html/category/article-6962.htm" title="宠物医院好评200字通用评论怎么写（宠物医院好评的段子）">宠物医院好评200字通用评论怎么写（宠物医院好评的段子）</a></li>
                        <li class="py-2"><a href="/html/category/article-7698.htm" title="动物疫苗接种时间表格图片大全 动物疫苗接种时间表格图片大全集">动物疫苗接种时间表格图片大全 动物疫苗接种时间表格图片大全集</a></li>
                        <li class="py-2"><a href="/html/category/article-7055.htm" title="重庆宠物领养中心有哪些地方好（重庆宠物猫领养中心）">重庆宠物领养中心有哪些地方好（重庆宠物猫领养中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-6963.htm" title="宠物粮食起名怎么起（宠物粮店名字）">宠物粮食起名怎么起（宠物粮店名字）</a></li>
                        <li class="py-2"><a href="/html/category/article-7009.htm" title="咸鱼无货源赚钱吗是真的吗（闲鱼无货源赚钱详细教程）">咸鱼无货源赚钱吗是真的吗（闲鱼无货源赚钱详细教程）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
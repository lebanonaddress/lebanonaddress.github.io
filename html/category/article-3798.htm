<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3798.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>【spring】详解@RequestMapping注解的基本属性以及使用 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">【spring】详解@RequestMapping注解的基本属性以及使用 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>文章目录</h3> <ul> <li><font face="楷体" size="6" color="blue">@RequestMapping注解功能</font></li> <li><font face="楷体" size="6" color="blue">@RequestMapping注解位置</font></li> <li><font face="楷体" size="6" color="blue">@RequestMapping注解属性</font></li> <li> <ul> <li><font face="楷体" size="5" color="##FFFF">value属性</font></li> <li><font face="楷体" size="5" color="##FFFF">method属性</font></li> <li><font face="楷体" size="5" color="##FFFF">params属性</font></li> <li><font face="楷体" size="5" color="##FFFF">headers属性</font></li> </ul> </li> <li><font face="楷体" size="6" color="blue">支持ant风格的请求路径</font></li> <li><font face="楷体" size="6" color="blue">支持路径中的占位符</font></li> </ul> </div> <hr/> <h1><font face="楷体" size="6" color="blue">@RequestMapping注解功能</font></h1> <p><font face="楷体" size="5">@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。<br /> SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</font></p> <h1><font face="楷体" size="6" color="blue">@RequestMapping注解位置</font></h1> <p><font face="楷体" size="5">@RequestMapping标识一个类：设置映射请求的请求路径的初始信息<br /> @RequestMapping标识一个方法：设置映射请求的请求路径的具体信息</font></p> <blockquote> <p><font face="楷体" size="5">注意：如果类上和方法上都有这个注解，那么就先访问初始信息，然后再访问具体信息</font></p> </blockquote> <pre><code class="prism language-html">href="@/test/testRequestMapping"</code></pre> <pre><code class="prism language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">RequestMappingController</span><span class="token punctuation">{<!-- --></span><span class="token comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping @RequestMapping("/testRequestMapping")</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h1><font face="楷体" size="6" color="blue">@RequestMapping注解属性</font></h1> <p><font face="楷体" size="5">下图是 @RequestMapping注解的属性，下面我们简单讲解几个比较常见的属性<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220903/f0a1237d6cb9fed3ff62ab58c5dda700.jpg" alt="【spring】详解@RequestMapping注解的基本属性以及使用"><br /> 属性的基本介绍：</font></p> <ul> <li><font face="楷体" size="5">value属性通过请求的请求地址匹配请求映射</font></li> <li><font face="楷体" size="5">method通过请求的请求方式来匹配请求映射</font></li> <li><font face="楷体" size="5">params通过请求参数匹配请求</font></li> <li><font face="楷体" size="5">headers通过请求头信息匹配请求</font></li> </ul> <blockquote> <p><font face="楷体" size="5">注意：<br /> 1、RequestMapping设置的属性越多，满足的条件就越多，匹配的请求就越精确<br /> 2、所有的请求条件同时满足时才会匹配请求映射</font></p> </blockquote> <h2><font face="楷体" size="5" color="##FFFF">value属性</font></h2> <p><font face="楷体" size="5">@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</font></p> <p><font face="楷体" size="5">@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求，当请求满足其中一个地址的时候，就可以访问到</font></p> <p><font face="楷体" size="5">@RequestMapping注解的value属性必须设置，@RequestMapping注解至少通过请求地址匹配请求映射，其他的属性可以不设置</font></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span> value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span><span class="token string">"/test"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testRequestMapping}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试RequestMapping注解的value属性-->/testRequestMapping<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试RequestMapping注解的value属性-->/test<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>br</span><span class="token punctuation">></span></span></code></pre> <h2><font face="楷体" size="5" color="##FFFF">method属性</font></h2> <p><font face="楷体" size="5">@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</font></p> <p><font face="楷体" size="5">@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求 （请求方式包括：GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE）</font></p> <p><font face="楷体" size="5">注意：</font></p> <p><font face="楷体" size="5">1、method 不设置的时候是不以请求方式为条件，任意的请求方式都可以，设置的请求方式不对时（这时有put或者是delete请求），默认是get请求，</font></p> <p><font face="楷体" size="5">2、若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错 405：<code>Request method 'POST' not supported（请求方式不被支持）</code></font></p> <p><font face="楷体" size="5">3、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解<br /> 处理get请求的映射–>@GetMapping<br /> 处理post请求的映射–>@PostMapping<br /> 处理put请求的映射–>@PutMapping<br /> 处理delete请求的映射–>@DeleteMapping</font></p> <p><font face="楷体" size="5">4、常用的请求方式有get，post，put，delete<br /> 但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符 串（put或delete），则按照默认的请求方式get处理<br /> 若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter</font></p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试@RequestMapping的value属性-->/test<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>form</span><span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test}<span class="token punctuation">"</span></span><span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>input</span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>form</span><span class="token punctuation">></span></span></code></pre> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>    value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span><span class="token string">"/test"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   method<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">}</span><span class="token comment">//两种请求方式都支持</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h2><font face="楷体" size="5" color="##FFFF">params属性</font></h2> <p><font face="楷体" size="5">@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</font></p> <p><font face="楷体" size="5">@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数 和请求映射的匹配关系</font></p> <ul> <li><font face="楷体" size="5">“param”：要求请求映射所匹配的请求必须携带param请求参数</font></li> <li><font face="楷体" size="5">“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</font></li> <li><font face="楷体" size="5">“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</font></li> <li><font face="楷体" size="5"> “param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</font></li> </ul> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>      value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span><span class="token string">"/test"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     method<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">}</span><span class="token punctuation">,</span>     params<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password!=123456"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test(username=<span class="token punctuation">'</span>admin<span class="token punctuation">'</span>,password=123456)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试@RequestMapping的 params属性-->/test<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>br</span><span class="token punctuation">></span></span></code></pre> <p><font face="楷体" size="5">注意：<br /> 若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：<code>Parameter conditions "username, password!=123456" not met for actual request parameters: username={admin}, password={123456}</code></font></p> <h2><font face="楷体" size="5" color="##FFFF">headers属性</font></h2> <p><font face="楷体" size="5">@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</font></p> <p><font face="楷体" size="5">@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</font></p> <ul> <li><font face="楷体" size="5">“header”：要求请求映射所匹配的请求必须携带header请求头信息</font></li> <li><font face="楷体" size="5">“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</font></li> <li><font face="楷体" size="5">“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</font></li> <li><font face="楷体" size="5">“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</font></li> </ul> <blockquote> <p><font face="楷体" size="5">注意：若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</font></p> </blockquote> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testParamsAndHeaders(username=<span class="token punctuation">'</span>admin<span class="token punctuation">'</span>,password=123)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试RequestMapping注解的params属性-->/testParamsAndHeaders<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>br</span><span class="token punctuation">></span></span></code></pre> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>             value<span class="token operator">=</span><span class="token string">"/testParamsAndHeaders"</span><span class="token punctuation">,</span>             params<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password!=123456"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             headers<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token string">"Host=localhost:8080"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">testParamsAndHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h1><font face="楷体" size="6" color="blue">支持ant风格的请求路径</font></h1> <p><font face="楷体" size="5"><code>？</code>：表示任意的单个字符，只可以填一个字符，不能有<code>/?</code>特殊符号<br /><code>*</code>：表示任意的0个或多个字符 ，可以填写多个字符，不能有<code>/?</code>特殊符号<br /><code>**</code>：表示任意的一层或多层目录，目录结构，可以有<code>/?</code>特殊符号，但是需要注意：</font></p> <p><font face="楷体" size="5">注意：在使用<code>**</code>时，只能使用<code>/**/xxx</code>的方式</font></p> <pre><code class="prism language-java"><span class="token comment">//@RequestMapping("/a?a/testAnt")</span><span class="token comment">//@RequestMapping("/a*a/testAnt")</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/**/testAnt"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">testAnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/a1a/testAnt}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试@RequestMapping可以匹配ant风格的路径-->使用?<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/a1a/testAnt}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试@RequestMapping可以匹配ant风格的路径-->使用*<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/a1a/testAnt}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试@RequestMapping可以匹配ant风格的路径-->使用**<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>br</span><span class="token punctuation">></span></span></code></pre> <h1><font face="楷体" size="6" color="blue">支持路径中的占位符</font></h1> <p><font face="楷体" size="5">占位符—{}，用来传参，不在路由中出现？直接显示数据</font></p> <pre><code class="prism language-handlebars"><span class="token variable">原始方式：</span><span class="token punctuation">/</span><span class="token variable">deleteUser?id</span><span class="token punctuation">=</span><span class="token number">1</span><span class="token variable">rest方式：</span><span class="token punctuation">/</span><span class="token variable">deleteUser</span><span class="token punctuation">/</span><span class="token number">1</span></code></pre> <p><font face="楷体" size="5">SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</font></p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>a</span><span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testRest/1/admin}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试路径中的占位符-->/testRest<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>br</span><span class="token punctuation">></span></span></code></pre> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRest/{id}/{username}"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">testRest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token class-name">String</span> id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">",username:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//最终输出的内容为-->id:1,username:admin</span></code></pre> </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3797.htm">PowerShell中的复制项目用于什么？</a></p>
                                                <p>下一个：<a href="/html/category/article-3799.htm">Java Arrays工具类的使用</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4038.htm" title="[Go实战]一个简单的主进程不退出(阻塞方法) 测试方案">[Go实战]一个简单的主进程不退出(阻塞方法) 测试方案</a></li>
                        <li class="py-2"><a href="/html/category/article-4122.htm" title="垃圾收集器与内存分配策略_在线工具">垃圾收集器与内存分配策略_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-4045.htm" title="在UNIX_TIMESTAMP()或FROM_UNIXTIME()函数中传递超出范围的值时，将返回什么MySQL？">在UNIX_TIMESTAMP()或FROM_UNIXTIME()函数中传递超出范围的值时，将返回什么MySQL？</a></li>
                        <li class="py-2"><a href="/html/category/article-4034.htm" title="vscode离线在线安装扩展工具">vscode离线在线安装扩展工具</a></li>
                        <li class="py-2"><a href="/html/category/article-4428.htm" title="动物疫苗企业名单公布时间表（中国动物疫苗生产企业排名）">动物疫苗企业名单公布时间表（中国动物疫苗生产企业排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-4149.htm" title="CompletableFuture的使用介绍, CompletableFuture与FutureTask的区别">CompletableFuture的使用介绍, CompletableFuture与FutureTask的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-4040.htm" title="@order注解 解答">@order注解 解答</a></li>
                        <li class="py-2"><a href="/html/category/article-4319.htm" title="猫咪打的三针疫苗多少钱啊图片（猫咪打的三针疫苗多少钱啊图片大全）">猫咪打的三针疫苗多少钱啊图片（猫咪打的三针疫苗多少钱啊图片大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-4041.htm" title="关于信号量Semaphore的acquire与release的说明">关于信号量Semaphore的acquire与release的说明</a></li>
                        <li class="py-2"><a href="/html/category/article-4094.htm" title="var、function、let、const 的区别及变量提升">var、function、let、const 的区别及变量提升</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
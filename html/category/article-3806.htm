<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3806.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>SpringBoot的AutoConfigure自动配置原理 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">SpringBoot的AutoConfigure自动配置原理 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="htmledit_views"> <h1>外化配置和自动配置</h1> <p>将配置从代码中分离到XML或者properties中，这种spring配置外部化的方式成为外部配置。<br /> spring 自动配置，spring-boot-autoconfigure依赖默认配置项，根据添加的依赖自动加载相关的配置属性并启动依赖。应用者只需要引入对应的start jar包，spring boot 就可以自动扫描和加载依赖信息。</p> <h2>自动配置原理</h2> <h3>自动配置的前提</h3> <ul> <li> <p>@Configuration ：他是JavaConfig形式的Spring IOC容器配置，其本身是一个IOC容器配置类。与原XML形式配置原理一致。<br /> 例如：<br /> 1、 XML方式定义类</p> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"        default-lazy-init="true"&gt;     &lt;!--bean定义--&gt;     &lt;bean id="mockService" class="..MockServiceImpl"&gt; &lt;/bean&gt; &lt;/beans&gt;</code></pre> <p>2、 JavaConfig形式定义类</p> <pre><code>@Configuration public class MockConfiguration{     @Bean     public MockService mockService(){         return new MockServiceImpl();     } }</code></pre> </li> <li> <p>@Conditional：他是在Spring4中引入的有条件注册bean的注解，需要配合@Configuration使用。<br /> 提供以下方式：</p> <blockquote> <p>@ConditionalOnBean：当SpringIoc容器内存在指定Bean的条件<br /> @ConditionalOnClass：当SpringIoc容器内存在指定Class的条件<br /> @ConditionalOnExpression：基于SpEL表达式作为判断条件<br /> @ConditionalOnJava：基于JVM版本作为判断条件<br /> @ConditionalOnJndi：在JNDI存在时查找指定的位置<br /> @ConditionalOnMissingBean：当SpringIoc容器内不存在指定Bean的条件<br /> @ConditionalOnMissingClass：当SpringIoc容器内不存在指定Class的条件<br /> @ConditionalOnNotWebApplication：当前项目不是Web项目的条件<br /> @ConditionalOnProperty：指定的属性是否有指定的值<br /> @ConditionalOnResource：类路径是否有指定的值<br /> @ConditionalOnSingleCandidate：当指定Bean在SpringIoc容器内只有一个，或者虽然有多个但是指定首选的Bean<br /> @ConditionalOnWebApplication：当前项目是Web项目的条件</p> </blockquote> </li> <li> <p>@ComponentScan：自动扫描并加载符合条件的组件，例如通过@Bean、@Component等注解的bean，将这些类加载到Spring IOC容器中。可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围。</p> </li> </ul> <h3><span style="color:#fe2c24;">SpringBoot 的 AutoConfiguration</span></h3> <p>SpringBoot通过@EnableAutoConfiguration开启自动配置，借助SpringFactoriesLoader将所有符合自动配置条件的bean定义加载到IOC容器。</p> <ul> <li>@EnableAutoConfiguration：是一个复合Annotation,通过@Import({EnableAutoConfigurationImportSelector.class})将符合条件的Configuration配置加载到IOC容器。</li> </ul> <pre><code>   @Target({ElementType.TYPE})    @Retention(RetentionPolicy.RUNTIME)    @Documented    @Inherited    @AutoConfigurationPackage    @Import({EnableAutoConfigurationImportSelector.class})    public @interface EnableAutoConfiguration {        String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";            Class&lt;?&gt;[] exclude() default {};            String[] excludeName() default {};    }</code></pre> <ul> <li>@EnableAutoConfigurationImportSelector：继承自AutoConfigurationImportSelector类，该类实现了自动配置项默认配置的加载</li> </ul> <pre><code>``` public class AutoConfigurationImportSelector         implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware,         BeanFactoryAware, EnvironmentAware, Ordered {     //通过select加载自动配置信息     @Override     public String[] selectImports(AnnotationMetadata annotationMetadata) {         if (!isEnabled(annotationMetadata)) {             return NO_IMPORTS;         }         try {           // Step1: 得到注解信息             AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader                     .loadMetadata(this.beanClassLoader);             // Step2: 得到注解中的所有属性信息             AnnotationAttributes attributes = getAttributes(annotationMetadata);             // Step3: 得到候选配置列表             List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,                     attributes);             // Step4: 去重             configurations = removeDuplicates(configurations);             // Step5: 排序             configurations = sort(configurations, autoConfigurationMetadata);             // Step6: 根据注解中的exclude信息去除不需要的             Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);             checkExcludedClasses(configurations, exclusions);             configurations.removeAll(exclusions);             configurations = filter(configurations, autoConfigurationMetadata);             // Step7: 派发事件             fireAutoConfigurationImportEvents(configurations, exclusions);             return configurations.toArray(new String[configurations.size()]);         }         catch (IOException ex) {             throw new IllegalStateException(ex);         }     } } ```</code></pre> <p>在步骤三中加载依赖的Configurations</p> <pre><code>``` protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata,         AnnotationAttributes attributes) {     List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(             getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());     Assert.notEmpty(configurations,             "No auto configuration classes found in META-INF/spring.factories. If you "                     + "are using a custom packaging, make sure that file is correct.");     return configurations; } ```</code></pre> <ul> <li>委托SpringFactoriesLoader加载loadFactoryNames，<span style="color:#fe2c24;">META-INF/spring.factories中</span>的配置候选项。</li> </ul> <pre><code>   public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader) {        String factoryClassName = factoryClass.getName();        try {            Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :                    ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));            List&lt;String&gt; result = new ArrayList&lt;String&gt;();            while (urls.hasMoreElements()) {                URL url = urls.nextElement();                Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));                String factoryClassNames = properties.getProperty(factoryClassName);                result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));            }            return result;        }        catch (IOException ex) {            throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +                    "] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex);        }    }</code></pre> <ul> <li>spring-boot-autoconfigure包含的Autoconfigure</li> </ul> <pre><code>   # Auto Configure    org.springframework.boot.autoconfigure.EnableAutoConfiguration=\    org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\    org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\    org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\    org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\    org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\    org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\    org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\    ....</code></pre> <h2>AutoConfiguration自定义Starter</h2> <p>通过spring-boot-autoconfigure完成自动化配置自定义starter。starter让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。Spring Boot会自动通过classpath路径下的类发现需要的Bean，并织入bean。</p> <h3>添加META-INF/spring.factories</h3> <p><span style="color:#fe2c24;">在src/main/resources资源目录下创建META-INF/spring.factories 配置文件，在该文件中配置key和value。</span><br /><span style="color:#fe2c24;"><span style="background-color:#f9eda6;">其中key固定为：org.springframework.boot.autoconfigure.EnableAutoConfiguration</span></span></p> <h3>配置自定义Autoconfigure</h3> <p>自定义Autoconfigure文件负责设置自动加载规则和条件，只有在引用start项目中符合条件是才回自动装配。</p> <pre><code>/**  * 该配置文件需要在spring.factories中引入  * 在SpringBoot启动台的时候通过SpringFactoriesLoader会加载项目中spring.factories文件  *  * 配置自动装载器  */ @Configuration @EnableConfigurationProperties({AutoConfiguraionProperties.class}) @ConditionalOnClass({CompanyStarterService.class}) @ConditionalOnProperty(prefix="company.starter",name = "enable",havingValue = "true") public class AutoStarterConfiguration {      private AutoConfiguraionProperties properties;      public AutoStarterConfiguration(AutoConfiguraionProperties properties){         this.properties = properties;     }      @Bean     @ConditionalOnMissingBean(CompanyStarterService.class)     public CompanyStarterService companyStarterService(){         return new CompanyStarterService(this.properties);     }  }</code></pre> <h3>@ConfigurationProperties配置项映射</h3> <p>对于自动装配中需要使用的配置项，可以通过自定义@ConfigurationProperties的方式从application.yml中获取配置内容。</p> <pre><code>/**  * 自定义starter的application配置映射文件  * 可以将application.properies或者application.yml中属性映射到java类  */ @Data @ConfigurationProperties(prefix = "company.starter") public class AutoConfiguraionProperties {      private String host;      private Integer port;  }</code></pre> <h3>在Autoconfigure中通过@Bean 配置IOC容器加载类</h3> <p>通过@Bean 配置来决定哪些类可以自动装配到IOC容器，并在系统中使用</p> <pre><code>@Bean @ConditionalOnMissingBean(CompanyStarterService.class) public CompanyStarterService companyStarterService(){     return new CompanyStarterService(this.properties); }</code></pre> </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3805.htm">git语法_在git-pandas中引入统一的glob语法</a></p>
                                                <p>下一个：<a href="/html/category/article-3807.htm">C#中的多播委托和泛型委托_C#教程</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6962.htm" title="宠物医院好评200字通用评论怎么写（宠物医院好评的段子）">宠物医院好评200字通用评论怎么写（宠物医院好评的段子）</a></li>
                        <li class="py-2"><a href="/html/category/article-7146.htm" title="妙三多三联疫苗打几针（妙三多三联是什么意思）">妙三多三联疫苗打几针（妙三多三联是什么意思）</a></li>
                        <li class="py-2"><a href="/html/category/article-7791.htm" title="安康游玩攻略(安康必去旅游景点大全)">安康游玩攻略(安康必去旅游景点大全)</a></li>
                        <li class="py-2"><a href="/html/category/article-7192.htm" title="领养一只狗要多少钱（领养一只小狗需要准备哪些物品）">领养一只狗要多少钱（领养一只小狗需要准备哪些物品）</a></li>
                        <li class="py-2"><a href="/html/category/article-7928.htm" title="直接融资方式和间接融资方式(直接融资和间接融资典型形式有哪些?)">直接融资方式和间接融资方式(直接融资和间接融资典型形式有哪些?)</a></li>
                        <li class="py-2"><a href="/html/category/article-6917.htm" title="上海宠物美容学校培训价格表（上海宠物美容师培训班多少钱,需要学多久）">上海宠物美容学校培训价格表（上海宠物美容师培训班多少钱,需要学多久）</a></li>
                        <li class="py-2"><a href="/html/category/article-7285.htm" title="专门卖宠物的app个人可以用吗（可以买卖宠物的app）">专门卖宠物的app个人可以用吗（可以买卖宠物的app）</a></li>
                        <li class="py-2"><a href="/html/category/article-7514.htm" title="郑州宠物用品批发进货渠道在哪里（郑州宠物用品批发进货渠道在哪里啊）">郑州宠物用品批发进货渠道在哪里（郑州宠物用品批发进货渠道在哪里啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-6916.htm" title="制狗粮的机器设备有哪些（机器制作狗粮的配方大全）">制狗粮的机器设备有哪些（机器制作狗粮的配方大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-6732.htm" title="动物医院简笔画（动物医院海报）">动物医院简笔画（动物医院海报）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
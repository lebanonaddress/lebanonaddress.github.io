<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3836.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Go语学习笔记 &#8211; gorm使用 &#8211; 表增删改查 | Web框架Gin（八） - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Go语学习笔记 &#8211; gorm使用 &#8211; 表增删改查 | Web框架Gin（八） </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="htmledit_views"> <p id="main-toc"><strong>目录</strong></p> <p id="%E6%96%B0%E5%A2%9E%E4%BF%AE%E6%94%B9%E6%8E%A5%E5%8F%A3-toc" style="margin-left:0px;"><a href="#%E6%96%B0%E5%A2%9E%E4%BF%AE%E6%94%B9%E6%8E%A5%E5%8F%A3" rel="nofollow">新增修改接口</a></p> <p id="%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%9C%AA%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4%E6%8E%A5%E5%8F%A3-toc" style="margin-left:0px;"><a href="#%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%9C%AA%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4%E6%8E%A5%E5%8F%A3" rel="nofollow">查询所有未逻辑删除接口</a></p> <p id="%E6%A0%B9%E6%8D%AEID%E5%88%A0%E9%99%A4%E6%8E%A5%E5%8F%A3-toc" style="margin-left:0px;"><a href="#%E6%A0%B9%E6%8D%AEID%E5%88%A0%E9%99%A4%E6%8E%A5%E5%8F%A3" rel="nofollow">根据ID删除接口</a></p> <p id="%E6%97%B6%E9%97%B4%E5%AD%97%E6%AE%B5%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86-toc" style="margin-left:0px;"><a href="#%E6%97%B6%E9%97%B4%E5%AD%97%E6%AE%B5%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86" rel="nofollow">时间字段序列化问题处理</a></p> <p id="%E6%8E%A5%E5%8F%A3%E9%AA%8C%E8%AF%81-toc" style="margin-left:0px;"><a href="#%E6%8E%A5%E5%8F%A3%E9%AA%8C%E8%AF%81" rel="nofollow">接口验证</a></p> <p id="%E5%B0%8F%E7%BB%93-toc" style="margin-left:0px;"><a href="#%E5%B0%8F%E7%BB%93" rel="nofollow">小结</a></p> <hr id="hr-toc"/> <p>学习笔记，写到哪是哪。</p> <p>接着上一篇文章：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/zhiweihongyan1/article/details/125482418"  title="Go语学习笔记 - gorm使用 - 数据库配置、表新增 | Web框架Gin（七）_剑客阿良_ALiang的博客-CSDN博客" rel="nofollow">Go语学习笔记 - gorm使用 - 数据库配置、表新增 | Web框架Gin（七）_剑客阿良_ALiang的博客-CSDN博客</a></p> <p>数据库初始化配置已经弄好了，上一篇文章中简单的写了一个demo接口。</p> <p>本篇文章接着上一篇，对表进行增删改查，同时对时间字段进行特殊处理。</p> <p>项目地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/Hy-1990/learn-gin"  title="github地址" rel="nofollow">github地址</a></p> <h1 id="%E6%96%B0%E5%A2%9E%E4%BF%AE%E6%94%B9%E6%8E%A5%E5%8F%A3">新增修改接口</h1> <p>一般我们在实际项目中，会把新增接口和更新修改接口合并，也就是传递参数中带ID的话则为修改，不带ID的话为新增。</p> <p>按照项目结构的编写方式，在student_service下新增AddOrUpdateStudent方法。</p> <p><strong><span style="color:#fe2c24;">方法代码如下：</span></strong></p> <pre><code class="language-Go">//新增或者更新学生 func (t StudentImpl) AddOrUpdateStudent(student *db_entity.Student) rsp.ResponseMsg { 	log.Logger.Info("新增或者更新学生参数:", log.Any("Student", student)) 	_db := mysql.GetDB() 	if student.Id != 0 { 		_db.Model(&amp;student).Updates(student) 	} else { 		_db.Create(&amp;student) 	} 	return *rsp.SuccessMsg("操作成功") }</code></pre> <p><strong><span style="color:#fe2c24;">注意：在接口测试中你会发现传递update_time时间字段解析错误，在下面的小结里面会讲到自定义事件结构体来解决json时间字段序列化问题。</span></strong></p> <h1 id="%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E6%9C%AA%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4%E6%8E%A5%E5%8F%A3">查询所有未逻辑删除接口</h1> <p>在student_service下新增SelectAll方法，对del_flag为0的用户进行查询。</p> <p><strong><span style="color:#fe2c24;">方法代码如下：</span></strong></p> <pre><code class="language-Go">//查询所有学生 func (t StudentImpl) SelectAll() rsp.ResponseMsg { 	log.Logger.Info("查询所有学生") 	_db := mysql.GetDB() 	var _result []db_entity.Student 	_db.Where("del_flag = ?", 0).Find(&amp;_result) 	return *rsp.SuccessMsg(_result) }</code></pre> <h1 id="%E6%A0%B9%E6%8D%AEID%E5%88%A0%E9%99%A4%E6%8E%A5%E5%8F%A3">根据ID删除接口</h1> <p>在student_service下新增根据ID删除数据接口。</p> <p><strong><span style="color:#fe2c24;">方法代码如下：</span></strong></p> <pre><code class="language-Go">//根据id删除学生 func (t StudentImpl) DeleteById(id int32) rsp.ResponseMsg { 	log.Logger.Info("根据id删除学生") 	_db := mysql.GetDB() 	_db.Delete(&amp;db_entity.Student{}, id) 	return *rsp.SuccessMsg("删除成功") }</code></pre> <h1 id="%E6%97%B6%E9%97%B4%E5%AD%97%E6%AE%B5%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86">时间字段序列化问题处理</h1> <p>由于json不能直接序列化time.Time类型，网上有多种解决方法，我这边主要采用自定义时间类型重写序列化方法的方法来解决。</p> <p>在constants目录下，创建common.go文件。</p> <p><span style="color:#fe2c24;"><strong>common.go代码如下：</strong></span></p> <pre><code class="language-Go">package constants  import ( 	"database/sql/driver" 	"fmt" 	"time" )  type HTime struct { 	time.Time }  var ( 	formatTime = "2006-01-02 15:04:05" )  func (t HTime) MarshalJSON() ([]byte, error) { 	formatted := fmt.Sprintf("\"%s\"", t.Format(formatTime)) 	return []byte(formatted), nil }  func (t *HTime) UnmarshalJSON(data []byte) (err error) { 	now, err := time.ParseInLocation(`"`+formatTime+`"`, string(data), time.Local) 	*t = HTime{Time: now} 	return }  func (t HTime) Value() (driver.Value, error) { 	var zeroTime time.Time 	if t.Time.UnixNano() == zeroTime.UnixNano() { 		return nil, nil 	} 	return t.Time, nil }  func (t *HTime) Scan(v interface{}) error { 	value, ok := v.(time.Time) 	if ok { 		*t = HTime{Time: value} 		return nil 	} 	return fmt.Errorf("can not convert %v to timestamp", v) } </code></pre> <p><strong><span style="color:#fe2c24;">注意：</span></strong></p> <p>1、重新定义HTime结构体，对序列化方法进行调整。</p> <p>2、Student结构体中UpdateTime字段数据类型调整为HTime，调整后如下。</p> <pre><code class="language-Go">type Student struct { 	Id         int32           `json:"id" gorm:"column:id;primary_key;AUTO_INCREMENT;comment:'id'"` 	Name       string          `json:"name" gorm:"column:name;type:varchar(255);comment:'名字'"` 	Age        int64           `json:"age" gorm:"column:age;comment:'年龄'"` 	Content    string          `json:"content" gorm:"column:content;type:varchar(255);comment:'描述'"` 	UpdateTime constants.HTime `json:"update_time" time_format:"unix" gorm:"column:update_time"` 	DelFlag    int64           `json:"del_flag" gorm:"column:del_flag;comment:'删除标识'"` }</code></pre> <h1 id="%E6%8E%A5%E5%8F%A3%E9%AA%8C%E8%AF%81">接口验证</h1> <p><strong><span style="color:#fe2c24;">controller层增加接口代码，如下：</span></strong></p> <pre><code class="language-Go">//新增或者修改一个学生信息 func (s StudentController) AddOrUpdateStudent(context *gin.Context) { 	var addOrUpdateStudent db_entity.Student 	log.Logger.Info("AddOrUpdateStudent接口") 	if err := context.ShouldBindJSON(&amp;addOrUpdateStudent); err != nil { 		log.Logger.Panic("参数异常") 	}  	if _, err := json.Marshal(addOrUpdateStudent); err != nil { 		log.Logger.Panic("参数解析异常") 	} 	_rsp := services.StudentServ.AddOrUpdateStudent(&amp;addOrUpdateStudent) 	context.JSON(http.StatusOK, _rsp) }  //查询所有学生 func (s StudentController) SelectAll(context *gin.Context) { 	log.Logger.Info("SelectAll接口") 	_rsp := services.StudentServ.SelectAll() 	context.JSON(http.StatusOK, _rsp) }  //根据id删除学生 func (s StudentController) DeleteById(context *gin.Context) { 	log.Logger.Info("DeleteById接口") 	_id := context.Query("id") 	_a, _ := strconv.ParseInt(_id, 10, 64) 	_rsp := services.StudentServ.DeleteById(int32(_a)) 	context.JSON(http.StatusOK, _rsp) }</code></pre> <p><strong><span style="color:#fe2c24;">router增加路由路径，如下：</span></strong></p> <pre><code class="language-Go">func StudentRouter(r *gin.Engine) { 	r.POST("/student/addOne", controllers.StudentCtrl.StudentAddOne) 	r.POST("/student/addOrUpdateStudent", controllers.StudentCtrl.AddOrUpdateStudent) 	r.GET("/student/selectAll", controllers.StudentCtrl.SelectAll) 	r.DELETE("/student/deleteById", controllers.StudentCtrl.DeleteById) } </code></pre> <p>分别验证一下3个接口。</p> <p><strong><span style="color:#4da8ee;">新增修改接口</span></strong></p> <p><img fetchpriority="high" decoding="async" alt="" height="445" src="http://img.555519.xyz/uploads/20221231/4581787ca0584efc68c58febe359675d.jpg"></p> <p><img decoding="async" alt="" height="25" src="http://img.555519.xyz/uploads/20221231/348af0dbb2093232a805ad4020a6ca1d.jpg"></p> <p><strong><span style="color:#4da8ee;">查询接口</span></strong></p> <p><img decoding="async" alt="" height="834" src="http://img.555519.xyz/uploads/20221231/ae4ea381fc5be491655732926abc198d.jpg"></p> <p><strong><span style="color:#4da8ee;">删除接口</span></strong></p> <p><img loading="lazy" decoding="async" alt="" height="477" src="http://img.555519.xyz/uploads/20221231/5fde0d5432cfdc9b30e756cb32cf23ab.jpg"></p> <p><img loading="lazy" decoding="async" alt="" height="115" src="http://img.555519.xyz/uploads/20221231/5353bd990eb5845657564ac6ffad8153.jpg"></p> <h1 id="%E5%B0%8F%E7%BB%93">小结</h1> <p>最近说实话有点忙了，在忙也要抽时间学习啊。后面继续操作一些复杂的查询操作。</p> <p>参考链接：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/qq_26372385/article/details/107110173"  title="gorm time.Time 使用钩子函数解决反序列化问题_qq_26372385的博客-CSDN博客" rel="nofollow">gorm time.Time 使用钩子函数解决反序列化问题_qq_26372385的博客-CSDN博客</a></p> <p style="text-align:center;"></p> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3835.htm">pandas中的apply()使用</a></p>
                                                <p>下一个：<a href="/html/category/article-3837.htm">VUE多选按钮变色</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4036.htm" title="字符数组和字符串的区别，C语言字符数组和字符串区别详解">字符数组和字符串的区别，C语言字符数组和字符串区别详解</a></li>
                        <li class="py-2"><a href="/html/category/article-4040.htm" title="@order注解 解答">@order注解 解答</a></li>
                        <li class="py-2"><a href="/html/category/article-4063.htm" title="Python生成sql语句">Python生成sql语句</a></li>
                        <li class="py-2"><a href="/html/category/article-4032.htm" title="springboot mybatis-plus 配置 yml 、druid 配置 yml 、mybatis-plus 代码生成">springboot mybatis-plus 配置 yml 、druid 配置 yml 、mybatis-plus 代码生成</a></li>
                        <li class="py-2"><a href="/html/category/article-4059.htm" title="Android 12图像显示系统简述Allocator/Mapper HAL服务的获取过程">Android 12图像显示系统简述Allocator/Mapper HAL服务的获取过程</a></li>
                        <li class="py-2"><a href="/html/category/article-4024.htm" title="网络协议之:socket协议详解之Unix domain Socket">网络协议之:socket协议详解之Unix domain Socket</a></li>
                        <li class="py-2"><a href="/html/category/article-4050.htm" title="C ++程序实施Rabin-Miller素性测试以检查给定数字是否为素数">C ++程序实施Rabin-Miller素性测试以检查给定数字是否为素数</a></li>
                        <li class="py-2"><a href="/html/category/article-4122.htm" title="垃圾收集器与内存分配策略_在线工具">垃圾收集器与内存分配策略_在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-4093.htm" title="修改docker容器端口映射的方法">修改docker容器端口映射的方法</a></li>
                        <li class="py-2"><a href="/html/category/article-4062.htm" title="Python格式化输出的三种方法（format,f前缀，%s）">Python格式化输出的三种方法（format,f前缀，%s）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3848.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>基于HiKariCP组件，分析连接池原理 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">基于HiKariCP组件，分析连接池原理 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<blockquote> <p>池塘里养：Connection；</p> </blockquote> <h1 id="一设计与原理">一、设计与原理</h1> <h2 id="1基础案例">1、基础案例</h2> <p>HiKariCP作为SpringBoot2框架的默认连接池，号称是跑的最快的连接池，数据库连接池与之前两篇提到的线程池和对象池，从设计的原理上都是基于池化思想，只是在实现方式上有各自的特点；首先还是看HiKariCP用法的基础案例：</p> <pre><code class="language-java">import com.zaxxer.hikari.HikariConfig; import com.zaxxer.hikari.HikariDataSource; import java.sql.Connection; import java.sql.ResultSet; import java.sql.Statement;  public class ConPool {     private static HikariConfig buildConfig (){         HikariConfig hikariConfig = new HikariConfig() ;         // 基础配置         hikariConfig.setJdbcUrl("jdbc:mysql://127.0.0.1:3306/junit_test?characterEncoding=utf8");         hikariConfig.setUsername("root");         hikariConfig.setPassword("123456");         // 连接池配置         hikariConfig.setPoolName("dev-hikari-pool");         hikariConfig.setMinimumIdle(4);         hikariConfig.setMaximumPoolSize(8);         hikariConfig.setIdleTimeout(600000L);         return hikariConfig ;     }     public static void main(String[] args) throws Exception {         // 构建数据源         HikariDataSource dataSource = new HikariDataSource(buildConfig()) ;         // 获取连接         Connection connection = dataSource.getConnection() ;         // 声明SQL执行         Statement statement = connection.createStatement();         ResultSet resultSet = statement.executeQuery("SELECT count(1) num FROM jt_activity") ;         // 输出执行结果         if (resultSet.next()) {             System.out.println("query-count-result："+resultSet.getInt("num"));         }     } }</code></pre> <h2 id="2核心相关类">2、核心相关类</h2> <ul> <li><strong>HikariDataSource类</strong>：汇集数据源描述的相关信息，例如配置、连接池、连接对象、状态管理等；</li> <li><strong>HikariConfig类</strong>：维护数据源的配置管理，以及参数校验，例如userName、passWord、minIdle、maxPoolSize等；</li> <li><strong>HikariPool类</strong>：提供对连接池与池中对象管理的核心能力，并实现池相关监控数据的查询方法；</li> <li><strong>ConcurrentBag类</strong>：抛弃了常规池中采用的阻塞队列作为容器的方式，自定义该并发容器来存储连接对象；</li> <li><strong>PoolEntry类</strong>：拓展连接对象的信息，例如状态、时间等，方便容器中追踪这些实例化对象；</li> </ul> <p>通过对连接池中几个核心类的分析，也能直观地体会到该源码的设计原理，与上篇总结的对象池应用有异曲同工之妙，只是不同的组件不同的开发者在实现的时候，都具备各自的抽象逻辑。</p> <h2 id="3加载逻辑">3、加载逻辑</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/142a9b7468e31d0ed1c54790c3142deb.jpg" alt="基于HiKariCP组件，分析连接池原理"></p> <p>通过配置信息去构建数据源描述，在构造方法中基于配置再去实例化连接池，在HikariPool的构造中，实例化ConcurrentBag容器对象；下面再从源码层面分析实现细节。</p> <h1 id="二容器分析">二、容器分析</h1> <h2 id="1容器结构">1、容器结构</h2> <p>容器ConcurrentBag类提供PoolEntry类型的连接对象存储，以及基本的元素管理能力，对象的状态描述；虽然被HikariPool对象池类所持有，但是实际的操作逻辑是在该类中；</p> <p><strong>1.1 基础属性</strong></p> <p>其中最为核心的是<code>sharedList</code>共享集合、<code>threadList</code>线程级缓存、<code>handoffQueue</code>即时队列；</p> <pre><code class="language-java">// 共享对象集合，存放数据库连接 private final CopyOnWriteArrayList&lt;T&gt; sharedList; // 缓存线程级连接对象，会被优先使用，避免被争抢 private final ThreadLocal&lt;List&lt;Object&gt;&gt; threadList; // 等待获取连接的线程数 private final AtomicInteger waiters; // 标记是否关闭 private volatile boolean closed; // 即时处理连接的队列，当有等待线程时，通过该队列将连接分配给等待线程 private final SynchronousQueue&lt;T&gt; handoffQueue;</code></pre> <p><strong>1.2 状态描述</strong></p> <p>在ConcurrentBag类中的IConcurrentBagEntry内部接口，被PoolEntry类实现，该接口定义连接对象的状态：</p> <ul> <li>STATE_NOT_IN_USE：未使用，即闲置中；</li> <li>STATE_IN_USE：使用中；</li> <li>STATE_REMOVED：被废弃；</li> <li>STATE_RESERVED：保留态，中间状态，用于尝试驱逐连接对象时；</li> </ul> <h2 id="2包装对象">2、包装对象</h2> <p>容器的基本能力是用来存储连接对象的，而对象的管理则需要很多扩展的跟踪信息，以有效的完成各种场景下的识别，此时就需要借助包装类的引入；</p> <pre><code class="language-java">// 业务真正使用的连接对象 Connection connection; // 最近访问时间 long lastAccessed; // 最近借出时间 long lastBorrowed; // 状态描述 private volatile int state = 0; // 是否驱逐 private volatile boolean evict; // 生命周期结束时的调度任务 private volatile ScheduledFuture&lt;?&gt; endOfLife; // 连接生成的Statement对象 private final FastList&lt;Statement&gt; openStatements; // 池对象 private final HikariPool hikariPool;</code></pre> <p>这里需要注意FastList类实现List接口，为HiKariCP组件自定义，相比ArrayList类，出于对性能的追求，在元素的管理时，去掉诸多的范围校验。</p> <h1 id="三对象管理">三、对象管理</h1> <p>基于连接池的常规用法，来看看连接对象具体是如何管理，比如被借出，被释放，被废弃等，以及这些操作下对象的状态转换过程；</p> <h2 id="1初始化">1、初始化</h2> <p>上文<strong>加载逻辑</strong>的描述中，已经提到在构建数据源的时候，会根据配置实例化连接池，在初始化的时候，基于两个核心切入点来分析源码：1.实例化多少连接对象、2.连接对象转换包装对象；</p> <p>在连接池的构造中执行了<code>checkFailFast</code>方法，在该方法内执行MinIdle最小空闲数的判断，如果大于0，则创建一个包装对象并放入容器中；</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/871bbfce659941a000aa883d907b7db1.jpg" alt="基于HiKariCP组件，分析连接池原理"></p> <pre><code class="language-java">public HikariPool(final HikariConfig config) ; private void checkFailFast() {     final PoolEntry poolEntry = createPoolEntry();     if (config.getMinimumIdle() &gt; 0) {         connectionBag.add(poolEntry);     } }</code></pre> <p>需要注意两个问题，创建的连接包装对象，初始状态是0即闲置中；另外虽然案例中设置<code>MinIdle=4</code>的值，但是这里的判断大于0，也只在容器中预先放入一个空闲对象；</p> <h2 id="2借用对象">2、借用对象</h2> <p>从池中获取连接对象时，实际调用的是容器类中的<code>borrow</code>方法：</p> <pre><code class="language-java">public Connection HikariPool.getConnection(final long hardTimeout) throws SQLException ; public T ConcurrentBag.borrow(long timeout, final TimeUnit timeUnit) throws InterruptedException ;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8cc684aaf40c2dfe15e625d5928140ba.jpg" alt="基于HiKariCP组件，分析连接池原理"></p> <p>在执行<code>borrow</code>方法时，涉及如下几个核心步骤与逻辑：</p> <pre><code class="language-java">public T borrow(long timeout, final TimeUnit timeUnit) throws InterruptedException {     // 遍历本地线程缓存     final List&lt;Object&gt; list = threadList.get();     for (int i = list.size() - 1; i &gt;= 0; i--) {        final Object entry = list.remove(i);        final T bagEntry = weakThreadLocals ? ((WeakReference&lt;T&gt;) entry).get() : (T) entry;        if (bagEntry != null &amp;&amp; bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) { }     }     // 增加等待线程数     final int waiting = waiters.incrementAndGet();     try {         // 遍历Shared共享集合         for (T bagEntry : sharedList) {            if (bagEntry.compareAndSet(STATE_NOT_IN_USE, STATE_IN_USE)) { }         }         // 一定时间内轮询handoff队列         listener.addBagItem(waiting);         timeout = timeUnit.toNanos(timeout);         do {            final T bagEntry = handoffQueue.poll(timeout, NANOSECONDS);         }      } finally {         // 减少等待线程数        waiters.decrementAndGet();     } }</code></pre> <ul> <li>首先反向遍历本地线程缓存，如果存在空闲连接，则返回该对象；如果没有则寻找共享集合；</li> <li>遍历Shared共享集合前，会标记等待线程数加1，如果存在空闲连接则直接返回；</li> <li>当Shared共享集合中也没有空闲连接时，这时当前线程进行一定时间的<code>handoffQueue</code>队列轮询，可能会有资源的释放，也可能是新添加的资源；</li> </ul> <p>注意这里在遍历集合时，取出的对象都会对状态进行判断和更新，如果得到空闲对象，会更新为<code>IN_USE</code>状态，然后返回；</p> <h2 id="3释放对象">3、释放对象</h2> <p>从池中释放连接对象时，实际调用的是容器类中的<code>requite</code>方法：</p> <pre><code class="language-java">void HikariPool.recycle(final PoolEntry poolEntry) ; public void ConcurrentBag.requite(final T bagEntry) ;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c7670a9c51fe51e5fc6eda017674abb9.jpg" alt="基于HiKariCP组件，分析连接池原理"></p> <p>在释放连接对象时，首先更新对象状态为空闲，然后判断当前是否有等待的线程，在<code>borrow</code>方法中等待线程会进入一定时间的轮询，如果没有的话则把对象放入本地线程缓存中：</p> <pre><code class="language-java">public void requite(final T bagEntry) {     // 更新状态     bagEntry.setState(STATE_NOT_IN_USE);     // 等待线程判断     for (int i = 0; waiters.get() &gt; 0; i++) {         if (bagEntry.getState() != STATE_NOT_IN_USE || handoffQueue.offer(bagEntry)) { }     }     // 本地线程缓存     final List&lt;Object&gt; threadLocalList = threadList.get();     if (threadLocalList.size() &lt; 50) {         threadLocalList.add(weakThreadLocals ? new WeakReference&lt;&gt;(bagEntry) : bagEntry);     } }</code></pre> <p>注意这里涉及到连接对象的状态从使用中转为<code>NOT_IN_USE</code>空闲；<code>borrow</code>与<code>requite</code>作为连接池中两个核心方法，负责资源创建与回收；</p> <p><strong>最后</strong>本篇文章并没有站在HiKariCP组件的整体设计上构思，只是分析连接池这冰山一角，尽管只是部分源码，但是已经足够彰显出作者对于性能的极致追求，比如：本地线程缓存、自定义容器类型、FastList等；能被普遍采用必然存在诸多支撑的理由。</p> <h1 id="四参考源码">四、参考源码</h1> <pre><code>应用仓库： https://gitee.com/cicadasmile/butte-flyer-parent  组件封装： https://gitee.com/cicadasmile/butte-frame-parent</code></pre> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3847.htm">java变量中不属于复合类型的数据类型是_Java作业3及答案</a></p>
                                                <p>下一个：<a href="/html/category/article-3849.htm">Git基础配置Git用户签名说明详解</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7376.htm" title="动物疫苗代理 动物疫苗代理需要什么资质">动物疫苗代理 动物疫苗代理需要什么资质</a></li>
                        <li class="py-2"><a href="/html/category/article-6218.htm" title="外卖预制菜十大品牌">外卖预制菜十大品牌</a></li>
                        <li class="py-2"><a href="/html/category/article-6131.htm" title="动物医院的面积不得小于多少（动物医院布局设计及分析）">动物医院的面积不得小于多少（动物医院布局设计及分析）</a></li>
                        <li class="py-2"><a href="/html/category/article-7745.htm" title="合肥宠物领养中心在哪里有 合肥宠物领养中心在哪里有啊">合肥宠物领养中心在哪里有 合肥宠物领养中心在哪里有啊</a></li>
                        <li class="py-2"><a href="/html/category/article-7008.htm" title="青岛最好的动物医院在哪里（青岛最好的动物医院在哪里啊）">青岛最好的动物医院在哪里（青岛最好的动物医院在哪里啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-6962.htm" title="宠物医院好评200字通用评论怎么写（宠物医院好评的段子）">宠物医院好评200字通用评论怎么写（宠物医院好评的段子）</a></li>
                        <li class="py-2"><a href="/html/category/article-7330.htm" title="昆明宠物门诊报销政策（昆明宠物医院24小时急诊）">昆明宠物门诊报销政策（昆明宠物医院24小时急诊）</a></li>
                        <li class="py-2"><a href="/html/category/article-6917.htm" title="上海宠物美容学校培训价格表（上海宠物美容师培训班多少钱,需要学多久）">上海宠物美容学校培训价格表（上海宠物美容师培训班多少钱,需要学多久）</a></li>
                        <li class="py-2"><a href="/html/category/article-7698.htm" title="动物疫苗接种时间表格图片大全 动物疫苗接种时间表格图片大全集">动物疫苗接种时间表格图片大全 动物疫苗接种时间表格图片大全集</a></li>
                        <li class="py-2"><a href="/html/category/article-7192.htm" title="领养一只狗要多少钱（领养一只小狗需要准备哪些物品）">领养一只狗要多少钱（领养一只小狗需要准备哪些物品）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
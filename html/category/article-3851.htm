<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3851.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>SOLID原则：解释和实例 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">SOLID原则：解释和实例 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>在面向对象编程中，SOLID是5个重要的设计原则的缩写。首先是由著名的软件大师Robert C.Martin (Bob 大叔)在Design Principles and Design Patterns 中提出， 后来Michael Feathers 用SOLID来概括这五大原则。</p> <p>SOLID原则使得软件设计<strong>更加容易理解、灵活和可维护</strong>。作为一名软件工程师，这5个原则我们必须知道。</p> <p>本文，我将涵盖这些原则，并举例说明怎样是违背了原则，以及如何进行纠正来符合SOLID原则。</p> <h4> S — Single responsibility principle</h4> <p>在程序设计中，单一责任原则指的是每个模块或者类应该只有一个职责。</p> <p>你可能听过这样一句谚语“<strong>做一件事并把它做好</strong>”，这指的就是单一责任原则。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230109/b8e22fefc681de5a6d49aa8241b362d8.jpg" alt="SOLID原则：解释和实例"></p> <p>在文章《<em>Principles of Object Oriented Design</em>》中，Bob 大叔定义责任为“<strong>改变的原因</strong>”。并认为有一个且仅有一个原因使得类或模块发生改变。</p> <pre><code>class User {     void CreatePost(Database db, string postMessage)     {         try         {             db.Add(postMessage);         }         catch (Exception ex)         {             db.LogError("An error occured: ", ex.ToString());             File.WriteAllText("\LocalErrors.txt", ex.ToString());         }     } } </code></pre> <p>在上述代码示例中，我们注意到*CreatePost()*方法有多个功能，创建新的邮件，在数据库中记录错误日志以及在本地文件记录错误日志。</p> <p>这违背了单一责任原则。我们尝试修改如下：</p> <pre><code>class Post {     private ErrorLogger errorLogger = new ErrorLogger();      void CreatePost(Database db, string postMessage)     {         try         {             db.Add(postMessage);         }         catch (Exception ex)         {             errorLogger.log(ex.ToString())         }     } }  class ErrorLogger {     void log(string error)     {       db.LogError("An error occured: ", error);       File.WriteAllText("\LocalErrors.txt", error);     } } </code></pre> <p>通过把错误日志功能抽象出来，我们不再违背单一责任原则。</p> <p>现在有2个类，每个类都有一个责任；创建邮件和记录一个错误日志。</p> <h4> O — Open/closed principle</h4> <p>在程序设计中，开闭原则指的是软件对象（类，模块，函数等等）应该对扩展开放，对修改关闭。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230109/4e78d80cac420a8106afd537eda19f16.jpg" alt="SOLID原则：解释和实例"></p> <p>如果你熟悉OOP，那么对于多态应该不陌生。通过继承或接口实现，使得一个抽象类具有多个子类，就可以确保代码是符合开闭原则的。</p> <p>这听起来有点困惑，所以接下来举个例子，你就会非常清楚我在说什么。</p> <pre><code>class Post {     void CreatePost(Database db, string postMessage)     {         if (postMessage.StartsWith("#"))         {             db.AddAsTag(postMessage);         }         else         {             db.Add(postMessage);         }     } } </code></pre> <p>在这个代码段中，每当邮件是用字符“#“开头，我们都需要做一些指定。然而，当有不同的字符开头，代码会有不同的行为，这违背了开闭原则。</p> <p>比如，如果我们以后想用“@”开头，我们必须在<em>CreatePost()<em>方法中增加一个</em>‘else if’</em>，这修改了类。</p> <p>这里简单使用了继承来使代码符合开闭原则。</p> <pre><code>class Post {     void CreatePost(Database db, string postMessage)     {         db.Add(postMessage);     } }  class TagPost : Post {     override void CreatePost(Database db, string postMessage)     {         db.AddAsTag(postMessage);     } } </code></pre> <p>通过使用继承，重写*CreatePost()*方法来创建邮件的扩展行为变得更加简单。</p> <p>现在，判断第一个字符“#”可以在软件其它地方处理。更酷的事情是，如果我们想改变<em>postMessage</em>的判断方式，可以不影响基类的行为。</p> <h4> L — Liskov substitution principle</h4> <p>这个原则可能是第一次介绍时最难理解的一个。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230109/293a8b268955ef2e030ce2c4a8651926.jpg" alt="SOLID原则：解释和实例"></p> <p>在程序设计中，里氏替换原则指的是如果 <em>S</em> 是<em>T</em> 的子类，那么<em>T</em> 的实例可以用 <em>S</em> 的实例取代。</p> <p>更一般的表述是，在不改变程序正确性的前提下，派生类对象可以在程序中代替其基类对象。</p> <pre><code>class Post {     void CreatePost(Database db, string postMessage)     {         db.Add(postMessage);     } }  class TagPost : Post {     override void CreatePost(Database db, string postMessage)     {         db.AddAsTag(postMessage);     } }  class MentionPost : Post {     void CreateMentionPost(Database db, string postMessage)     {         string user = postMessage.parseUser();          db.NotifyUser(user);         db.OverrideExistingMention(user, postMessage);         base.CreatePost(db, postMessage);     } }  class PostHandler {     private database = new Database();      void HandleNewPosts() {         List<string> newPosts = database.getUnhandledPostsMessages();          foreach (string postMessage in newPosts)         {             Post post;              if (postMessage.StartsWith("#"))             {                 post = new TagPost();             }             else if (postMessage.StartsWith("@"))             {                 post = new MentionPost();             }             else {                 post = new Post();             }              post.CreatePost(database, postMessage);         }     } } </code></pre> <p>由于没有覆写，<em>CreatePost()<em>方法在子类</em>MentionPost</em>中不会起到应有的作用。</p> <p>修改后如下：</p> <pre><code>...  class MentionPost : Post {     override void CreatePost(Database db, string postMessage)     {         string user = postMessage.parseUser();          NotifyUser(user);         OverrideExistingMention(user, postMessage)         base.CreatePost(db, postMessage);     }      private void NotifyUser(string user)     {         db.NotifyUser(user);     }      private void OverrideExistingMention(string user, string postMessage)     {         db.OverrideExistingMention(user, postMessage);     } }  ... </code></pre> <p>通过重构<em>MentionPost</em>类，就能满足可替换性。</p> <p>这只是一个不违背里氏替换原则的简单例子。然而，在实际使用过程中，这种情形可以用多种方式实现并且不易识别出来。</p> <h4> I — Interface segregation principle</h4> <p>这个原则理解起来很简单，实际上，如果你习惯于使用接口，很大概率上会用到这个原则。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230109/53b26a744bb605ae3e0bae33a74f7c6f.jpg" alt="SOLID原则：解释和实例"></p> <p>在程序设计中，接口隔离原则指的是客户不应被迫使用对其而言无用的方法或功能。</p> <p>简单来讲，不要在已有接口上增加新的方法来实现新的功能。相反的，可以创建新的接口，如果有必要，可以让你的类实现多个接口。</p> <pre><code>interface IPost {     void CreatePost(); }  interface IPostNew {     void CreatePost();     void ReadPost(); } </code></pre> <p>在上述代码示例中，假设我已经有了一个<em>IPost</em> 接口，包含<em>CreatePost()<em>方法；后来，我增加了一个新方法 <em>ReadPost()</em>，修改了这个接口，变成</em>IPostNew</em> 接口，这违背了接口隔离原则。修改如下：</p> <pre><code>interface IPostCreate {     void CreatePost(); }  interface IPostRead {     void ReadPost(); } </code></pre> <p>一旦任何类需要实现这2个方法，就将同时实现这2个接口。</p> <h4> D - Dependency inversion principle</h4> <p>最后，我们来看一下D，最后一个设计原则。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230109/c62281eaf6ade76db265c03b8ff88d9f.jpg" alt="SOLID原则：解释和实例"></p> <p>在程序设计中，依赖倒置原则用于解耦软件中的模块。这个原则表述如下：</p> <ul> <li>高层的模块不应该依赖底层的模块，而应该依赖抽象；</li> <li>抽象不应该依赖实现细节，实现细节应该依赖抽象。</li> </ul> <p>为了遵循这一原则，我们需要使用一种设计模式称为<strong>依赖注入</strong>，典型的，依赖注入通过类的构造函数作为输入参数。</p> <pre><code>class Post {     private ErrorLogger errorLogger = new ErrorLogger();      void CreatePost(Database db, string postMessage)     {         try         {             db.Add(postMessage);         }         catch (Exception ex)         {             errorLogger.log(ex.ToString())         }     } } </code></pre> <p>观察到我们在<em>Post</em> 类中创建了<em>ErrorLogger</em> 实例，如果我们想使用不同的日志，我们需要修改Post类，这违背了依赖倒置原则。修改如下：</p> <pre><code>class Post {     private Logger _logger;      public Post(Logger injectedLogger)     {         _logger = injectedLogger;     }      void CreatePost(Database db, string postMessage)     {         try         {             db.Add(postMessage);         }         catch (Exception ex)         {             _logger.log(ex.ToString());         }     } } </code></pre> <p>通过使用依赖注入，我们不再依赖<em>Post</em>类来定义指定类型的日志。</p> <p>OK，介绍完这么多，也大致理解了这几个原则。这些原则有区别，同时彼此间也有着联系。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230109/ea6c75b445abfbe74b86541e0f492dc2.jpg" alt="SOLID原则：解释和实例"></p> <ul> <li>单一职责原则是 SOLID 所有原则的基础和解决问题的思路。</li> <li>开闭原则是直接保障代码质量的原则，用来解决设计的脆弱性、僵化、难以阅读、难以复用等问题，应用开闭原则的关键在于如何“抽象”。</li> <li>里氏替换原则通过确保子类和父类是 “is a” 的关系，来帮助实现开闭原则。该原则的使用中，引申出面向对象角度的 “is a” 是关于行为的，以及模型的正确性不是内在的，而是由它的客户程序来体现。</li> <li>接口隔离原则提供了一种方案，在不违反里氏替换原则的情况下，如何实现开闭原则。同时接口隔离的思想本身也体现了单一职责原则。</li> <li>依赖倒置原则是过程式设计与面向对象设计的分水岭，通过适当的抽象，让高层模块和底层模块同样地可复用和可测试。同时它也被用来指导接口隔离原则。</li> </ul> <h2> 参考</h2> <p>【1】What Is Design Pattern？</p> <p>【2】Single Responsibility Principle in C++</p> <p>【3】单一功能原则</p> <p>【4】Open Closed Principle in C++</p> <p>【5】开闭原则</p> <p>【6】Liskov’s Substitution Principle in C++</p> <p>【7】里氏替换原则</p> <p>【8】Interface Segregation Principle in C++</p> <p>【9】接口隔离原则</p> <p>【10】Dependency Inversion Principle in C++</p> <p>【11】依赖倒置原则</p> <hr/> <p><strong>That’s it!If you have any questions or feedback, please feel free to comment below.</strong></p> <p><strong>-EOF-</strong></p> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3850.htm">进程内优雅管理多个服务</a></p>
                                                <p>下一个：<a href="/html/category/article-3852.htm">URL编码及解码</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4575.htm" title="狗粮颗粒机家用小型（制作狗粮配方 颗粒机器）">狗粮颗粒机家用小型（制作狗粮配方 颗粒机器）</a></li>
                        <li class="py-2"><a href="/html/category/article-7330.htm" title="昆明宠物门诊报销政策（昆明宠物医院24小时急诊）">昆明宠物门诊报销政策（昆明宠物医院24小时急诊）</a></li>
                        <li class="py-2"><a href="/html/category/article-7193.htm" title="58同城茶杯犬狗领养（58同城宠物狗狗出售茶杯犬）">58同城茶杯犬狗领养（58同城宠物狗狗出售茶杯犬）</a></li>
                        <li class="py-2"><a href="/html/category/article-6595.htm" title="兽药生产厂家排名（兽药生产企业排名）">兽药生产厂家排名（兽药生产企业排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-5954.htm" title="宠物领养需要什么条件 宠物领养需要什么条件呢">宠物领养需要什么条件 宠物领养需要什么条件呢</a></li>
                        <li class="py-2"><a href="/html/category/article-6131.htm" title="动物医院的面积不得小于多少（动物医院布局设计及分析）">动物医院的面积不得小于多少（动物医院布局设计及分析）</a></li>
                        <li class="py-2"><a href="/html/category/article-6086.htm" title="新华全媒+｜这些留言，看哭了(新华全媒这里培养了我)">新华全媒+｜这些留言，看哭了(新华全媒这里培养了我)</a></li>
                        <li class="py-2"><a href="/html/category/article-6641.htm" title="宠物粮食加工厂设备模具会粘吗 宠物粮食加工设备贵吗">宠物粮食加工厂设备模具会粘吗 宠物粮食加工设备贵吗</a></li>
                        <li class="py-2"><a href="/html/category/article-6963.htm" title="宠物粮食起名怎么起（宠物粮店名字）">宠物粮食起名怎么起（宠物粮店名字）</a></li>
                        <li class="py-2"><a href="/html/category/article-7008.htm" title="青岛最好的动物医院在哪里（青岛最好的动物医院在哪里啊）">青岛最好的动物医院在哪里（青岛最好的动物医院在哪里啊）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">10</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
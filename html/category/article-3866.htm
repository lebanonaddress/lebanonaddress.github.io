<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3866.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>数据结构（初阶）—— C语言实现双向带头循环链表 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">数据结构（初阶）—— C语言实现双向带头循环链表 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="htmledit_views"> <p class="img-center"><img fetchpriority="high" decoding="async" alt="" height="699" src="http://img.555519.xyz/uploads/20230205/d3aecabcd13e52813d5d9e4cb310eaec.jpg"></p> <p>&nbsp;</p> <p id="main-toc"><strong>目录</strong></p> <p id="%E4%B8%80%E3%80%81%E9%93%BE%E8%A1%A8%E7%A7%8D%E7%B1%BB%E7%9A%84%E4%BC%98%E5%8A%A3-toc" style="margin-left:40px;"><a href="#%E4%B8%80%E3%80%81%E9%93%BE%E8%A1%A8%E7%A7%8D%E7%B1%BB%E7%9A%84%E4%BC%98%E5%8A%A3" rel="nofollow">一、链表种类的优劣</a></p> <p id="%E4%BA%8C%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%C2%A0-toc" style="margin-left:40px;"><a href="#%E4%BA%8C%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%C2%A0" rel="nofollow">二、什么是双向循环链表&nbsp;</a></p> <p id="%E4%B8%89%EF%BC%8C%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%90%84%E6%8E%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%C2%A0-toc" style="margin-left:40px;"><a href="#%E4%B8%89%EF%BC%8C%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%90%84%E6%8E%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%C2%A0" rel="nofollow">三，双向循环链表各接口函数实现&nbsp;</a></p> <p id="1.%C2%A0%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96-toc" style="margin-left:80px;"><a href="#1.%C2%A0%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96" rel="nofollow">1.双链表的初始化</a></p> <p id="2.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%89%93%E5%8D%B0%C2%A0-toc" style="margin-left:80px;"><a href="#2.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%89%93%E5%8D%B0%C2%A0" rel="nofollow">2.双链表的打印&nbsp;</a></p> <p id="3.%E6%89%A9%E5%AE%B9%E5%87%BD%E6%95%B0%C2%A0-toc" style="margin-left:80px;"><a href="#3.%E6%89%A9%E5%AE%B9%E5%87%BD%E6%95%B0%C2%A0" rel="nofollow">3.扩容函数&nbsp;</a></p> <p id="4%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8F%92%C2%A0-toc" style="margin-left:80px;"><a href="#4%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8F%92%C2%A0" rel="nofollow">4.双链表的尾插&nbsp;</a></p> <p id="%C2%A05.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E5%88%A0-toc" style="margin-left:80px;"><a href="#%C2%A05.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E5%88%A0" rel="nofollow">5.双链表的尾删</a></p> <p id="%C2%A06.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E6%8F%92-toc" style="margin-left:80px;"><a href="#%C2%A06.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E6%8F%92" rel="nofollow">6.双链表的头插</a></p> <p id="7.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E5%88%A0%C2%A0-toc" style="margin-left:80px;"><a href="#7.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E5%88%A0%C2%A0" rel="nofollow">7.双链表的头删&nbsp;</a></p> <p id="%C2%A08.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE-toc" style="margin-left:80px;"><a href="#%C2%A08.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE" rel="nofollow">8.双链表的查找</a></p> <p id="9.%20%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%9C%A8pos%E4%BD%8D%E7%BD%AE%E4%B9%8B%E5%89%8D%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9-toc" style="margin-left:80px;"><a href="#9.%20%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%9C%A8pos%E4%BD%8D%E7%BD%AE%E4%B9%8B%E5%89%8D%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9" rel="nofollow">9. 双链表在pos位置之前插入结点</a></p> <p id="10.%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4pos%E4%BD%8D%E7%BD%AE%E7%9A%84%E7%BB%93%E7%82%B9%C2%A0-toc" style="margin-left:80px;"><a href="#10.%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4pos%E4%BD%8D%E7%BD%AE%E7%9A%84%E7%BB%93%E7%82%B9%C2%A0" rel="nofollow">10.双链表删除pos位置的结点&nbsp;</a></p> <p id="11.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E9%94%80%E6%AF%81%C2%A0-toc" style="margin-left:80px;"><a href="#11.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E9%94%80%E6%AF%81%C2%A0" rel="nofollow">11.双链表的销毁&nbsp;</a></p> <p id="%E5%9B%9B%E3%80%81%E6%BA%90%E4%BB%A3%E7%A0%81%C2%A0-toc" style="margin-left:40px;"><a href="#%E5%9B%9B%E3%80%81%E6%BA%90%E4%BB%A3%E7%A0%81%C2%A0" rel="nofollow">四、源代码&nbsp;</a></p> <p id="List.h-toc" style="margin-left:80px;"><a href="#List.h" rel="nofollow">List.h</a></p> <p id="%C2%A0List.c-toc" style="margin-left:80px;"><a href="#%C2%A0List.c" rel="nofollow">List.c</a></p> <p id="%C2%A0test.c-toc" style="margin-left:80px;"><a href="#%C2%A0test.c" rel="nofollow">test.c</a></p> <p id="%E4%BA%94%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%80%BB%E7%BB%93-toc" style="margin-left:40px;"><a href="#%E4%BA%94%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%80%BB%E7%BB%93" rel="nofollow">五、顺序表和双向链表的总结</a></p> <p id="1.%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9-toc" style="margin-left:80px;"><a href="#1.%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9" rel="nofollow">1.顺序表的优点与缺点</a></p> <p id="2.%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9-toc" style="margin-left:80px;"><a href="#2.%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9" rel="nofollow">2. 双向链表的优点与缺点</a></p> <hr id="hr-toc"/> <h2 id="%E4%B8%80%E3%80%81%E9%93%BE%E8%A1%A8%E7%A7%8D%E7%B1%BB%E7%9A%84%E4%BC%98%E5%8A%A3">一、链表种类的优劣</h2> <blockquote> <p><strong>链表可分为8种：</strong></p> <table align="center" border="1" cellpadding="1" cellspacing="1" style="width:500px;"> <tbody> <tr> <td style="text-align:center;width:242px;"><span style="color:#0d0016;"><strong>单向</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#0d0016;"><strong>双向</strong></span></td> </tr> <tr> <td style="text-align:center;width:242px;"><span style="color:#0d0016;"><strong>单向带头循环</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#fe2c24;"><strong>双向带头循环</strong></span></td> </tr> <tr> <td style="text-align:center;width:242px;"><span style="color:#0d0016;"><strong>单向带头不循环</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#0d0016;"><strong>双向带头不循环</strong></span></td> </tr> <tr> <td style="text-align:center;width:242px;"><span style="color:#0d0016;"><strong>单向不带头循环</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#0d0016;"><strong>双向不带头循环</strong></span></td> </tr> <tr> <td style="text-align:center;width:242px;"><span style="color:#fe2c24;"><strong>单向不带头不循环</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#0d0016;"><strong>双向不带头不循环</strong></span></td> </tr> </tbody> </table> <p><span style="color:#0d0016;"><strong>在C语言实现链表那篇博客中</strong></span><a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/sjsjnsjnn/article/details/123920224?spm=1001.2014.3001.5501"  title="https://blog.csdn.net/sjsjnsjnn/article/details/123920224?spm=1001.2014.3001.5501" rel="nofollow">https://blog.csdn.net/sjsjnsjnn/article/details/123920224?spm=1001.2014.3001.5501</a></p> <p><span style="color:#0d0016;"><strong>主要实现的是</strong></span><span style="color:#fe2c24;"><strong>单向不带头非循环</strong></span><span style="color:#0d0016;"><strong>的链表结构；</strong></span></p> <p><span style="color:#0d0016;"><strong>此结构：</strong></span></p> <div>   <span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结构简单，一般不会单独用来存数据。实际中更多是作为其他数据结构的子结构，如哈希桶、图的邻接表等等。另外这种结构在笔试面试中出现很多。</strong></span>  </div> <div>   <span style="color:#0d0016;"><strong>-------------------------------------------------------------------------------------------------------------------------</strong></span>  </div> <div>   <span style="color:#0d0016;"><strong>本次主要分析</strong></span><br />   <strong><span style="color:#fe2c24;">双向带头循环链表</span><span style="color:#0d0016;">的链表结构；</span></strong>  </div> <div>   <span style="color:#0d0016;"><strong>此结构：</strong></span>  </div> <div> <div>    <span style="color:#777777;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong></span><br />    <strong><span style="color:#0d0016;">结构最复杂，一般用在单独存储数据。实际中使用的链表数据结构，都是带头双向</span></strong><br />    <strong><span style="color:#0d0016;">循环链表。另外这个结构虽然结构复杂，但是使用代码实现以后会发现结构会带来很多优势，实现反而</span></strong><br />    <strong><span style="color:#0d0016;">简单了；</span></strong>   </div> </p></div> <div></div> </blockquote> <h2 id="%E4%BA%8C%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%C2%A0">二、什么是双向循环链表&nbsp;</h2> <blockquote> <p><span style="color:#0d0016;"><strong>&nbsp; &nbsp; &nbsp;双向循环链表和单链表都是由结点组成的，单链表包含一个数据域和一个指针域构成，而双向循环链表不同，它是由一个数据域和两个指针域组成，其中指针包含前驱指针（prev）和后继指针（next）；</strong></span></p> <p class="img-center"><img decoding="async" alt="" height="284" src="http://img.555519.xyz/uploads/20230205/6c0bac1e5133f2931cc877e0279e6cfe.jpg"></p> <p><img decoding="async" alt="" height="270" src="http://img.555519.xyz/uploads/20230205/af3de3dc78169662f90224a91c7a2714.jpg"></p> </blockquote> <h2 id="%E4%B8%89%EF%BC%8C%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%90%84%E6%8E%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%C2%A0">三，双向循环链表各接口函数实现&nbsp;</h2> <h3 id="1.%C2%A0%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96">1.双链表的初始化</h3> <pre><code class="language-cpp">//双向带头循环链表的初始化 LTNode* ListInit() { 	LTNode* phead = (LTNode*)malloc(sizeof(LTNode));//创建头结点 	phead-&gt;next = phead;//后继指针指向头 	phead-&gt;prev = phead;//前驱指针指向头 	return phead; }</code></pre> <h3 id="2.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%89%93%E5%8D%B0%C2%A0">2.双链表的打印&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表的打印 void ListPrint(LTNode* phead) { 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		printf("%d-&gt;", cur-&gt;Data); 		cur = cur-&gt;next; 	} 	printf("\n"); }</code></pre> <h3 id="3.%E6%89%A9%E5%AE%B9%E5%87%BD%E6%95%B0%C2%A0">3.扩容函数&nbsp;</h3> <pre><code class="language-cpp">//增容函数 LTNode* BuyListNode(LTDataType x) { 	LTNode* newnode = (LTNode*)malloc(sizeof(LTNode)); 	if (newnode == NULL) 	{ 		printf("malloc fail\n"); 		exit(-1); 	} 	newnode-&gt;Data = x; 	newnode-&gt;next = NULL; 	newnode-&gt;prev = NULL; 	return newnode; }</code></pre> <p><img loading="lazy" decoding="async" alt="" height="303" src="http://img.555519.xyz/uploads/20230205/ab2611704e5cc1cb5629eda0c5d95469.jpg"></p> <h3 id="4%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8F%92%C2%A0">4.双链表的尾插&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表的尾插 void ListPushBack(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* tail = phead-&gt;prev; 	LTNode* newnode = BuyListNode(x); 	tail-&gt;next = newnode; 	newnode-&gt;prev = tail; 	newnode-&gt;next = phead; 	phead-&gt;prev = newnode; }</code></pre> <p><img loading="lazy" decoding="async" alt="" height="705" src="http://img.555519.xyz/uploads/20230205/ecc7651ba186d3c1c9d50b695bc2d035.jpg"></p> <h3 id="%C2%A05.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E5%88%A0">5.双链表的尾删</h3> <pre><code class="language-cpp">//双向带头循环链表的尾删 void ListPopBack(LTNode* phead) { 	assert(phead); 	assert(phead-&gt;next != phead); 	LTNode* tail = phead-&gt;prev; 	LTNode* tailprev = tail-&gt;prev; 	free(tail); 	tailprev-&gt;next = phead; 	phead-&gt;prev = tailprev; 	//ListErase(phead-&gt;prev);//尾删就相当于复用Erase这个函数 }</code></pre> <p>&nbsp;<img loading="lazy" decoding="async" alt="" height="526" src="http://img.555519.xyz/uploads/20230205/6aa29a07ed711d4136960c5a26fb22ae.jpg"></p> <h3 id="%C2%A06.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E6%8F%92">6.双链表的头插</h3> <pre><code class="language-cpp">//双向带头循环链表的头插 void ListPushFront(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* newnode = BuyListNode(x); 	LTNode* next = phead-&gt;next;//先找到头 	phead-&gt;next = newnode; 	newnode-&gt;prev = phead; 	newnode-&gt;next = next; 	next-&gt;prev = newnode; 	//ListInsert(phead-&gt;next, x); }</code></pre> <p>&nbsp;<img loading="lazy" decoding="async" alt="" height="855" src="http://img.555519.xyz/uploads/20230205/4aff9b60c1fc95dda9ac0b94db12399a.jpg"></p> <h3 id="7.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E5%88%A0%C2%A0">7.双链表的头删&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表的头删 void ListPopFront(LTNode* phead) { 	assert(phead); 	assert(phead-&gt;next != phead);//如果哨兵位的后继指针指向的是头，就不能去调用头删 	LTNode* next = phead-&gt;next;//先找到头结点 	LTNode* nextNext = next-&gt;next;//再找到头结点的下一个结点 	phead-&gt;next = next-&gt;next; 	nextNext-&gt;prev = phead; }</code></pre> <p>&nbsp;<img loading="lazy" decoding="async" alt="" height="776" src="http://img.555519.xyz/uploads/20230205/aac82f8d72d9f58be8b3e7fc42c70a75.jpg"></p> <h3 id="%C2%A08.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE">8.双链表的查找</h3> <pre><code class="language-cpp">//双向带头循环链表的查找 LTNode* ListFind(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* cur = phead-&gt;next;//从头结点出发 	while (cur != phead) 	{         //找到返回对应的地址 		if (cur-&gt;Data == x) 		{ 			return cur; 		}         //找不到继续向后找 		cur = cur-&gt;next; 	}     //彻底找不到 	return NULL; }</code></pre> <h3 id="9.%20%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%9C%A8pos%E4%BD%8D%E7%BD%AE%E4%B9%8B%E5%89%8D%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9">9. 双链表在pos位置之前插入结点</h3> <pre><code class="language-cpp">//双向带头循环链表pos位置之前插入 void ListInsert(LTNode* pos, LTDataType x) { 	assert(pos); 	LTNode* posPrev = pos-&gt;prev;//先找到pos的前一个结点的位置 	LTNode* newnode = BuyListNode(x); 	posPrev-&gt;next = newnode; 	newnode-&gt;prev = posPrev; 	newnode-&gt;next = pos; 	pos-&gt;prev = newnode; }</code></pre> <p><img loading="lazy" decoding="async" alt="" height="1200" src="http://img.555519.xyz/uploads/20230205/dc4941dc9f6850a013bc8edea6c413d7.jpg"></p> <h3 id="10.%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4pos%E4%BD%8D%E7%BD%AE%E7%9A%84%E7%BB%93%E7%82%B9%C2%A0">10.双链表删除pos位置的结点&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表pos位置删除 void ListErase(LTNode* pos) { 	assert(pos); 	LTNode* posPrev = pos-&gt;prev;//找到pos的前一个位置 	LTNode* posNext = pos-&gt;next;//和pos的后一个位置     //把前一个结点和后一个结点链接起来 	posPrev-&gt;next = posNext; 	posNext-&gt;prev = posPrev;     //释放pos结点 	free(pos); 	pos = NULL; }</code></pre> <p><img loading="lazy" decoding="async" alt="" height="950" src="http://img.555519.xyz/uploads/20230205/a6e3885111c28e14fe4aaa03ffe1786e.jpg"></p> <h3 id="11.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E9%94%80%E6%AF%81%C2%A0">11.双链表的销毁&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表的销毁 void ListDestroy(LTNode* phead) {     //在销毁链表的时候，逐个销毁，销毁前一个，必须要保存下一个结点的地址 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		LTNode* next = cur-&gt;next; 		free(cur); 		cur = next; 	} 	free(phead); 	phead = NULL; }</code></pre> <h2 id="%E5%9B%9B%E3%80%81%E6%BA%90%E4%BB%A3%E7%A0%81%C2%A0">四、源代码&nbsp;</h2> <h3 id="List.h">List.h</h3> <pre><code class="language-cpp">#pragma once  #include &lt;stdio.h&gt; #include &lt;assert.h&gt; #include &lt;stdlib.h&gt;  typedef int LTDataType;  typedef struct ListNode { 	LTDataType Data; 	struct ListNode* next; 	struct ListNode* prev; }LTNode;  //双向带头循环链表的初始化 LTNode* ListInit();  //双向带头循环链表的打印 void ListPrint(LTNode* phead);  //增容函数 LTNode* BuyListNode(LTDataType x);  //双向带头循环链表的尾插 void ListPushBack(LTNode* phead, LTDataType x);  //双向带头循环链表的尾删 void ListPopBack(LTNode* phead);  //双向带头循环链表的头插 void ListPushFront(LTNode* phead, LTDataType x);  //双向带头循环链表的头删 void ListPopFront(LTNode* phead);  //双向带头循环链表的查找 LTNode* ListFind(LTNode* phead, LTDataType x);  //双向带头循环链表pos位置之前插入 void ListInsert(LTNode* pos, LTDataType x);  //双向带头循环链表pos位置删除 void ListErase(LTNode* pos);  //双向带头循环链表的销毁 void ListDestroy(LTNode* phead);</code></pre> <h3 id="%C2%A0List.c">List.c</h3> <pre><code class="language-cpp">#include "List.h"  //双向带头循环链表的初始化 LTNode* ListInit() { 	LTNode* phead = (LTNode*)malloc(sizeof(LTNode));//创建头结点 	phead-&gt;next = phead;//后继指针指向头 	phead-&gt;prev = phead;//前驱指针指向头 	return phead; }  //双向带头循环链表的打印 void ListPrint(LTNode* phead) { 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		printf("%d-&gt;", cur-&gt;Data); 		cur = cur-&gt;next; 	} 	printf("\n"); }  //增容函数 LTNode* BuyListNode(LTDataType x) { 	LTNode* newnode = (LTNode*)malloc(sizeof(LTNode)); 	if (newnode == NULL) 	{ 		printf("malloc fail\n"); 		exit(-1); 	} 	newnode-&gt;Data = x; 	newnode-&gt;next = NULL; 	newnode-&gt;prev = NULL; 	return newnode; }  //双向带头循环链表的尾插 void ListPushBack(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* tail = phead-&gt;prev; 	LTNode* newnode = BuyListNode(x); 	tail-&gt;next = newnode; 	newnode-&gt;prev = tail; 	newnode-&gt;next = phead; 	phead-&gt;prev = newnode; }  //双向带头循环链表的尾删 void ListPopBack(LTNode* phead) { 	assert(phead); 	assert(phead-&gt;next != phead); 	LTNode* tail = phead-&gt;prev; 	LTNode* tailprev = tail-&gt;prev; 	free(tail); 	tailprev-&gt;next = phead; 	phead-&gt;prev = tailprev; 	//ListErase(phead-&gt;prev);//尾删就相当于复用Erase这个函数 }  //双向带头循环链表的头插 void ListPushFront(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* newnode = BuyListNode(x); 	LTNode* next = phead-&gt;next; 	phead-&gt;next = newnode; 	newnode-&gt;prev = phead; 	newnode-&gt;next = next; 	next-&gt;prev = newnode; 	//ListInsert(phead-&gt;next, x); }  //双向带头循环链表的头删 void ListPopFront(LTNode* phead) { 	assert(phead); 	assert(phead-&gt;next != phead); 	LTNode* next = phead-&gt;next; 	LTNode* nextNext = next-&gt;next; 	phead-&gt;next = next-&gt;next; 	nextNext-&gt;prev = phead; }  //双向带头循环链表的查找 LTNode* ListFind(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		if (cur-&gt;Data == x) 		{ 			return cur; 		} 		cur = cur-&gt;next; 	} 	return NULL; }  //双向带头循环链表pos位置之前插入 void ListInsert(LTNode* pos, LTDataType x) { 	assert(pos); 	LTNode* posPrev = pos-&gt;prev; 	LTNode* newnode = BuyListNode(x); 	posPrev-&gt;next = newnode; 	newnode-&gt;prev = posPrev; 	newnode-&gt;next = pos; 	pos-&gt;prev = newnode; }  //双向带头循环链表pos位置删除 void ListErase(LTNode* pos) { 	assert(pos); 	LTNode* posPrev = pos-&gt;prev; 	LTNode* posNext = pos-&gt;next; 	posPrev-&gt;next = posNext; 	posNext-&gt;prev = posPrev; 	free(pos); 	pos = NULL; }  //双向带头循环链表的销毁 void ListDestroy(LTNode* phead) { 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		LTNode* next = cur-&gt;next; 		free(cur); 		cur = next; 	} 	free(phead); 	phead = NULL; }</code></pre> <h3 id="%C2%A0test.c">test.c</h3> <pre><code class="language-cpp">#include "List.h"   void TestList1() { 	LTNode* plist = ListInit(); 	ListPushBack(plist, 5); 	ListPushBack(plist, 6); 	ListPushBack(plist, 7); 	ListPushBack(plist, 8); 	ListPrint(plist); 	ListPopBack(plist); 	ListPrint(plist);  	ListPushFront(plist, 4); 	ListPushFront(plist, 3); 	ListPushFront(plist, 2); 	ListPushFront(plist, 1); 	ListPrint(plist); 	//ListPopFront(plist); 	//ListPopFront(plist); 	//ListPrint(plist);  	LTNode* ret = ListFind(plist, 4); 	ListInsert(ret, 30); 	ListPrint(plist); 	ListDestroy(plist); 	plist = NULL; }  int main() { 	TestList1(); 	return 0; }</code></pre> <h2 id="%E4%BA%94%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%80%BB%E7%BB%93">五、顺序表和双向链表的总结</h2> <h3 id="1.%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9"><span style="color:#0d0016;"><strong>1.顺序表的优点与缺点</strong></span></h3> <blockquote> <p><span style="color:#0d0016;"><strong>优点：（可以使用下标访问&nbsp;）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong></span></p> <p><span style="color:#0d0016;"><strong>1.支持随机访问；需要随机访问结构支持算法可以很好的适用；</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.cpu高速缓存命中率更高&nbsp;</strong></span></p> <p><span style="color:#0d0016;"><strong>缺点：</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.头部、中部插入删除数据时间效率低。O(N)</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.连续的物理空间，空间不够需要增容；</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;①、增容有一定程度消耗</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;②、为了避免频繁增容，一般我们都按倍数去增，用不完可能存在一定的空间浪费</strong></span></p> </blockquote> <h3 id="2.%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9"><span style="color:#0d0016;"><strong>2. 双向链表的优点与缺点</strong></span></h3> <blockquote> <p><span style="color:#0d0016;"><strong>优点：（不可以使用下标访问&nbsp;）</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.任意位置插入，效率高；o(1)</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.按需申请释放空间；</strong></span></p> <p><span style="color:#0d0016;"><strong>缺点：</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.不支持随机访问；意味着：一些排序，二分查找在这种结构上不适用；</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.链表存储一个值，同时要存储链接指针，也有一定的消耗；</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp; &nbsp; &nbsp; &nbsp; 3.cpu高速缓存命中率更低；</strong></span></p> </blockquote></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3865.htm">实现mysql主从复制、读写分离</a></p>
                                                <p>下一个：<a href="/html/category/article-3867.htm">解析SpringBoot中的starter原理</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4032.htm" title="springboot mybatis-plus 配置 yml 、druid 配置 yml 、mybatis-plus 代码生成">springboot mybatis-plus 配置 yml 、druid 配置 yml 、mybatis-plus 代码生成</a></li>
                        <li class="py-2"><a href="/html/category/article-4056.htm" title="SpringMVC对Ajax请求的处理">SpringMVC对Ajax请求的处理</a></li>
                        <li class="py-2"><a href="/html/category/article-4041.htm" title="关于信号量Semaphore的acquire与release的说明">关于信号量Semaphore的acquire与release的说明</a></li>
                        <li class="py-2"><a href="/html/category/article-4349.htm" title="宠物粮食哪里批发便宜点呢（宠物粮从哪里进货便宜）">宠物粮食哪里批发便宜点呢（宠物粮从哪里进货便宜）</a></li>
                        <li class="py-2"><a href="/html/category/article-4394.htm" title="宠物医院收费价目表昆明（昆明宠物医院24小时营业）">宠物医院收费价目表昆明（昆明宠物医院24小时营业）</a></li>
                        <li class="py-2"><a href="/html/category/article-4348.htm" title="动物诊疗许可证去哪里办理手续（动物诊疗许可证在哪个部门办理）">动物诊疗许可证去哪里办理手续（动物诊疗许可证在哪个部门办理）</a></li>
                        <li class="py-2"><a href="/html/category/article-4395.htm" title="安又琪个人资料（安又琪图片 个人资料 感情生活）">安又琪个人资料（安又琪图片 个人资料 感情生活）</a></li>
                        <li class="py-2"><a href="/html/category/article-4094.htm" title="var、function、let、const 的区别及变量提升">var、function、let、const 的区别及变量提升</a></li>
                        <li class="py-2"><a href="/html/category/article-4029.htm" title="eclipse &#8211;  maven &#8211; 打war包的几种方式:">eclipse &#8211;  maven &#8211; 打war包的几种方式:</a></li>
                        <li class="py-2"><a href="/html/category/article-4060.htm" title="MySQL数据库生成某一年的日历存储过程_在线工具">MySQL数据库生成某一年的日历存储过程_在线工具</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
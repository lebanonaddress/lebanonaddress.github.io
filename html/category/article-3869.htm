<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3869.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>C#反射调用dll文件中的方法操作泛型与属性字段_C#教程 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">C#反射调用dll文件中的方法操作泛型与属性字段_C#教程 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h2>一、使用方法</h2> <ul> <li> <p>查找DLL文件，</p> </li> <li> <p>通过Reflection反射类库里的各种方法来操作dll文件</p> </li> </ul> <h2>二、步骤</h2> <p>加载DLL文件</p> <div class="ay1code"> <pre class="brush:csharp;">Assembly assembly1 = Assembly.Load("SqlServerDB");//方式一：这个DLL文件要在启动项目下  string filePath = Environment.CurrentDirectory + "";  Assembly assembly2 = Assembly.LoadFile(filePath + @"\SqlServerDB.dll");//方式二：完整路径  Assembly assembly3 = Assembly.LoadFrom(filePath + @"\SqlServerDB.dll");//方式三：完整路径  Assembly assembly4 = Assembly.LoadFrom(@"SqlServerDB.dll");//方式三：完整路径</pre> </div> <p>获取指定类型</p> <div class="ay1code"> <pre class="brush:csharp;">foreach (var item in assembly4.GetTypes())//查找所有的类型,就是有多少个类  {      Console.WriteLine(item.Name);  }</pre> </div> <p>获取构造函数</p> <div class="ay1code"> <pre class="brush:csharp;">Type type = assembly4.GetType("SqlServerDB.ReflectionTest");//在ReflectionTest类中调用  foreach (var ctor in type.GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public))  {      Console.WriteLine($"构造方法：{ctor.Name}");      foreach (var param in ctor.GetParameters())      {          Console.WriteLine($"构造方法的参数：{param.ParameterType}");      }  }  //【3】实例化  //ReflectionTest reflectionTest = new ReflectionTest();//这种实例化是知道具体类型--静态    //object objTest = Activator.CreateInstance(type);//动态实例化--调用我们的构造方法  object objTest1 = Activator.CreateInstance(type, new object[] { "string" });//动态实例化--调用我们的有参数构造方法    //调用私有构造函数  //ReflectionTest reflectionTest = new ReflectionTest();  //普通调用  object objTest2 = Activator.CreateInstance(type, true);</pre> </div> <p>调用非构造方法</p> <div class="ay1code"> <pre class="brush:csharp;">object objTest2 = Activator.CreateInstance(type, true);  //调用普通方法  ReflectionTest reflectionTest = objTest2 as ReflectionTest;//as转换的好处，它不报错，类型不对的话就返回null  reflectionTest.Show1();    //调用私有方法  var method = type.GetMethod("Show2", BindingFlags.Instance | BindingFlags.NonPublic);  method.Invoke(objTest2, new object[] { });</pre> </div> <p>调用泛型方法</p> <div class="ay1code"> <pre class="brush:csharp;">//泛型无参数  var method3 = type.GetMethod("Show3");//查找指定方法  var genericMethod = method3.MakeGenericMethod(new Type[] { typeof(int) });//指定泛型参数类型T  genericMethod.Invoke(objTest2, new object[] { });    //泛型有参数  var method4 = type.GetMethod("Show4");//查找指定方法  var genericMethod4 = method4.MakeGenericMethod(new Type[] { typeof(string) });//指定泛型参数类型T  genericMethod4.Invoke(objTest2, new object[] { 123, "泛型string参数" });</pre> </div> <p>反射测试类</p> <blockquote> <p>位于SqlServerDB.dll中的ReflectionTest.cs文件中</p> </blockquote> <div class="ay1code"> <pre class="brush:csharp;">    /// &lt;summary&gt;      /// 反射测试类      /// &lt;/summary&gt;     public class ReflectionTest      {          //私有构造函数          private ReflectionTest()          {              Console.WriteLine("这是私有无参数构造方法");          }            //普通构造函数          //public ReflectionTest()          //{          //    Console.WriteLine("这是无参数构造方法");          //}            public ReflectionTest(string name)          {              Console.WriteLine($"这是有参数构造方法+参数值是：{name}");          }            public void Show1()          {              Console.WriteLine("调用普通方法", this.GetType());          }            private void Show2()          {              Console.WriteLine("调用私有方法",this.GetType());          }              public void Show3&lt;T&gt;()          {              Console.WriteLine("调用无参数泛型方法", this.GetType());          }            public void Show4&lt;T&gt;(int id,string name)          {              Console.WriteLine($"调用有参数泛型方法，参数是{id}，{name}", this.GetType());          }      }</pre> </div> <h2>操作泛型类和泛型方法</h2> <p>加载DLL文件</p> <div class="ay1code"> <pre class="brush:csharp;">Assembly assembly = Assembly.LoadFrom(@"SqlServerDB.dll");</pre> </div> <p>获取指定类型</p> <div class="ay1code"> <pre class="brush:csharp;">Type type = assembly.GetType("SqlServerDB.GenericClass`2").MakeGenericType(typeof(int), typeof(string));//一定给定具体类型参数</pre> </div> <p>调用泛型方法</p> <div class="ay1code"> <pre class="brush:csharp;">object objTest2 = Activator.CreateInstance(type);  var method = type.GetMethod("GenericMethod").MakeGenericMethod(typeof(int));  method.Invoke(objTest2, new object[] { });</pre> </div> <p>反射测试类</p> <blockquote> <p>位于SqlServerDB.dll中的GenericClass.cs文件中</p> </blockquote> <div class="ay1code"> <pre class="brush:csharp;">public class GenericClass&lt;T,W&gt;  {      public void GenericMethod&lt;TType&gt;()      {          Console.WriteLine("泛型类调用+泛型方法");      }  }</pre> </div> <h2>操作类属性字段</h2> <p>加载DLL文件</p> <div class="ay1code"> <pre class="brush:csharp;">Assembly assembly2 = Assembly.LoadFrom("SqlServerDB.dll");</pre> </div> <p>获取指定类型</p> <div class="ay1code"> <pre class="brush:csharp;">Type type2 = assembly2.GetType("SqlServerDB.PropertyClass");</pre> </div> <p>调用泛型方法</p> <div class="ay1code"> <pre class="brush:csharp;">object obj = Activator.CreateInstance(type2);  foreach (var property in type2.GetProperties())  {      Console.WriteLine(property.Name);      //给属性设置值      if (property.Name.Equals("Id"))      {          property.SetValue(obj, 1);      }      else if (property.Name.Equals("Name"))      {          property.SetValue(obj, "学习编程");      }      else if (property.Name.Equals("Phone"))      {          property.SetValue(obj, "123459789");      }      //获取属性值      Console.WriteLine(property.GetValue(obj));  }  </pre> </div> <p>反射测试类</p> <blockquote> <p>位于SqlServerDB.dll中的PropertyClass.cs文件中</p> </blockquote> <div class="ay1code"> <pre class="brush:csharp;">public class PropertyClass  {      public int Id { get; set; }      public string Name { get; set; }      public string Phone { get; set; }  }</pre> </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3868.htm">iOS全埋点解决方案手势采集</a></p>
                                                <p>下一个：<a href="/html/category/article-3870.htm">python中的time库安装步骤-python中time库的实例使用方法</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4042.htm" title="python安装卸载及查看python版本/第三方包版本">python安装卸载及查看python版本/第三方包版本</a></li>
                        <li class="py-2"><a href="/html/category/article-4023.htm" title="ElasticSearch学习：springboot集成ElasticSearch">ElasticSearch学习：springboot集成ElasticSearch</a></li>
                        <li class="py-2"><a href="/html/category/article-4024.htm" title="网络协议之:socket协议详解之Unix domain Socket">网络协议之:socket协议详解之Unix domain Socket</a></li>
                        <li class="py-2"><a href="/html/category/article-4022.htm" title="java socket read 堵塞问题的解决方法">java socket read 堵塞问题的解决方法</a></li>
                        <li class="py-2"><a href="/html/category/article-4063.htm" title="Python生成sql语句">Python生成sql语句</a></li>
                        <li class="py-2"><a href="/html/category/article-4021.htm" title="使用feign客户端要使用注解@EnableFeignClients">使用feign客户端要使用注解@EnableFeignClients</a></li>
                        <li class="py-2"><a href="/html/category/article-4028.htm" title="Halo 开源项目学习评论与点赞">Halo 开源项目学习评论与点赞</a></li>
                        <li class="py-2"><a href="/html/category/article-4121.htm" title="PyTorch查看CUDA支持情况">PyTorch查看CUDA支持情况</a></li>
                        <li class="py-2"><a href="/html/category/article-4025.htm" title="Java原生HttpClient的使用详解_java">Java原生HttpClient的使用详解_java</a></li>
                        <li class="py-2"><a href="/html/category/article-4020.htm" title="spring schedule 配置多任务动态 cron 【增删启停】">spring schedule 配置多任务动态 cron 【增删启停】</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
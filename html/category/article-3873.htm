<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3873.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Spring Boot当中获取request的三种方式 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Spring Boot当中获取request的三种方式 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>本篇博客主要记录request相关知识，也是开发当中经常遇到的，感兴趣的跟小编一起学习吧！</p> <div class="toc"> <h3>目录</h3> <ul> <li> <ul> <li>一、请求过程</li> <li>二、获取request的三种方式</li> <li> <ul> <li>2.1、可以封装为静态方法</li> <li>2.2、controller的方法里面</li> <li>2.3、直接注入</li> </ul> </li> <li>三、request常用API</li> <li> <ul> <li>3.1、request路径相关</li> <li>3.2、Header相关</li> <li>3.3、获取请求体</li> <li>3.4、获取参数</li> <li>3.5、中文乱码</li> <li>3.6、转发</li> <li>3.7、共享数据</li> </ul> </li> <li>四、response常用API</li> <li>五、常用工具类</li> <li> <ul> <li>5.1、封装的</li> <li>5.2、Hutool工具类</li> </ul> </li> </ul> </li> </ul> </div> <h2> 一、请求过程</h2> <p>大概的流程：</p> <p>1、通过请求，然后访问到服务器，像java常用的服务器就是tomcat。</p> <p>2、服务器收到请求将请求参数、请求内容封装成一个request和response对象，以参数的形式传到我们的java程序。（这个在servlet最底层的接口当中就会看到的，本篇文章不过多说了，后续找时间出一篇sevlet的博客）</p> <p>3、这时候java程序就有了request和response对象，request当中包含了请求参数、session、请求路径等一些列关于调用接口的相关内容。而response就是我们对于该请求做出的请求响应。响应内容可以是各种参数，或者页面等等，最终封装到response，响应给服务器。</p> <p>4、服务器将response响应给客户端。</p> <h2> 二、获取request的三种方式</h2> <h3> 2.1、可以封装为静态方法</h3> <pre><code class="prism language-java"><span class="token class-name">ServletRequestAttributes</span> servletRequestAttributes <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> servletRequestAttributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> servletRequestAttributes<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <h3> 2.2、controller的方法里面</h3> <pre><code class="prism language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">//...</span> <span class="token punctuation">}</span> </code></pre> <h3> 2.3、直接注入</h3> <pre><code class="prism language-java"><span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">;</span>   <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">;</span> </code></pre> <h2> 三、request常用API</h2> <h3> 3.1、request路径相关</h3> <pre><code class="prism language-java"><span class="token comment">// 获取请求方式: GET</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取虚拟目录(上下文目录)：虚拟路径通过在application配置当中可以配置</span> <span class="token comment">// 配置：server.servlet.context-path=/aaa</span> <span class="token class-name">String</span> <span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取Servlet路径：就是获取的controller当中配置的路径</span> <span class="token class-name">String</span> <span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">/// 获取请求参数： id=3</span> <span class="token comment">// http://localhost:8080/aaa/test?id=3</span> <span class="token class-name">String</span> <span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取请求URI：/servletDemo/demo1</span> <span class="token comment">// 上下文路径+controller当中配置的路径</span> <span class="token class-name">String</span> <span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取完整请求路径：http://localhost:8080/aaa/test</span> <span class="token class-name">String</span> <span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取协议及版本：HTTP/1.1</span> <span class="token class-name">String</span> <span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取客户机的IP地址：192.168.0.0</span> <span class="token class-name">String</span> <span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre> <h3> 3.2、Header相关</h3> <pre><code class="prism language-java"><span class="token comment">// 获取请求头数据,通过请求头名称获取值</span> <span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 获取所有请求头信息</span> <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre> <h3> 3.3、获取请求体</h3> <pre><code class="prism language-java"><span class="token comment">// 获取流对象-获取字符输入流，只能操作字符数据</span> <span class="token class-name">BufferedReader</span> <span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取流对象-获取字节输入流，既能操作字节也能操作字符</span> <span class="token class-name">ServletInputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre> <h3> 3.4、获取参数</h3> <pre><code class="prism language-java"><span class="token comment">// 获取请求参数通用方式(根据参数名称获取参数值) username=zhangsan</span> <span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 获取请求参数名称获取参数值的数组 hobby=xx&hobby=game</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 获取请求参数名称(与获取请求头方法类似)</span> <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有参数的Map集合</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation"><</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre> <h3> 3.5、中文乱码</h3> <p>中文乱码问题，Tomcat8 已经将GET 请求方式的乱码问题 解决了，但是POST方式的中文乱码问题 依旧存在，需要自行配置<br /> 在获取参数之前配置</p> <pre><code class="prism language-java">request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <h3> 3.6、转发</h3> <p>浏览器像服务器发起一次请求，服务器内部实现转发，相当于执行了两个资源之间的操作。</p> <pre><code class="prism language-java"><span class="token comment">// 通过request对象获取请求转发服务器：</span> <span class="token class-name">RequestDispatcher</span> <span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用==RequestDispatcher对象来进行转发</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token class-name">ServlertRequest</span> request<span class="token punctuation">,</span><span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <h3> 3.7、共享数据</h3> <p>域对象：一个有作用范围的对象，可以在范围内共享数据<br /> request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p> <pre><code class="prism language-java"><span class="token comment">// 存储数据</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token comment">// 通过键来获取值</span> <span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过键移除键对应的值</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> </code></pre> <h2> 四、response常用API</h2> <pre><code class="prism language-java"><span class="token comment">//设置状态码</span> response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置指定名称响应头的值，下面是导出的时候我们经常要设置的响应头，响应头当中还有文件的名称，也就是通过流下载文件的时候那个文件名称</span> response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> zipName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1.字符输出流</span> <span class="token class-name">PrintWriter</span> <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 2.字节输出流（一般导出就是将文件写到字节流，然后响应response）</span> <span class="token class-name">ServletOutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 注意：在同一个Servlet，二种输出流不能同时使用，产生互斥</span> 　　 <span class="token comment">// response提供了专门负责重定向的方法</span> response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"/项目地址/资源地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指定服务器响应中文的编码方式</span> response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 统一服务器和客户端的编码方式</span> response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 导出的时候如果需要直接通过response流导出Excel，需要和前端设置上下文类型，如下：</span> response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <h2> 五、常用工具类</h2> <h3> 5.1、封装的</h3> <pre><code class="prism language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestAttributes</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletUtils</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">/**      * 获取request      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServletRequest</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">/**      * 获取response      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServletResponse</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">/**      * 获取session      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpSession</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">/**      * request和response在ServletRequestAttributes类当中      *      * @return      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ServletRequestAttributes</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">RequestAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> attributes<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">/**      * 将字符串渲染到客户端(前后端分离很少会用到)      *      * @param response 渲染对象      * @param string   待渲染的字符串      * @return null      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">renderString</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span>             response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">/**      * 获取完整的请求路径，包括：域名，端口，上下文访问路径      * 上传图片的时候需要：服务器路径+上下文访问路径（所以封装了该方法）      *      * @return 服务地址      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token function">getDomain</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getDomain</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">StringBuffer</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> contextPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> url<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> 5.2、Hutool工具类</h3> <p>Hutool工具类是目前最常用的工具类，他的官网写的非常好，并且API也非常好，并且全是中文的，这是重点哈哈。</p> <p>ServletUtil在线API文档:https://apidoc.gitee.com/dromara/hutool/</p> <p>API当中包含了：</p> <ul> <li>cookie相关</li> <li>获取请求体</li> <li>header相关</li> <li>获得MultiPart表单内容</li> <li>获得请求参数、将参数转换为Bean</li> <li>以及response相关write操作</li> </ul> </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3872.htm">Kafka如何保证可靠的数据传递</a></p>
                                                <p>下一个：<a href="/html/category/article-3874.htm">idea里面集成tomcat</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6086.htm" title="新华全媒+｜这些留言，看哭了(新华全媒这里培养了我)">新华全媒+｜这些留言，看哭了(新华全媒这里培养了我)</a></li>
                        <li class="py-2"><a href="/html/category/article-6043.htm" title="东北农村房间(东北农村室内)">东北农村房间(东北农村室内)</a></li>
                        <li class="py-2"><a href="/html/category/article-4394.htm" title="宠物医院收费价目表昆明（昆明宠物医院24小时营业）">宠物医院收费价目表昆明（昆明宠物医院24小时营业）</a></li>
                        <li class="py-2"><a href="/html/category/article-6042.htm" title="附近领养狗狗基地 附近领养狗狗基地在哪里">附近领养狗狗基地 附近领养狗狗基地在哪里</a></li>
                        <li class="py-2"><a href="/html/category/article-4056.htm" title="SpringMVC对Ajax请求的处理">SpringMVC对Ajax请求的处理</a></li>
                        <li class="py-2"><a href="/html/category/article-4612.htm" title="猫咪打疫苗针要多少钱（猫咪打疫苗需要花多少钱）">猫咪打疫苗针要多少钱（猫咪打疫苗需要花多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-6174.htm" title="三国杀武将展示替换（三国杀装备替换）">三国杀武将展示替换（三国杀装备替换）</a></li>
                        <li class="py-2"><a href="/html/category/article-4094.htm" title="var、function、let、const 的区别及变量提升">var、function、let、const 的区别及变量提升</a></li>
                        <li class="py-2"><a href="/html/category/article-4093.htm" title="修改docker容器端口映射的方法">修改docker容器端口映射的方法</a></li>
                        <li class="py-2"><a href="/html/category/article-5954.htm" title="宠物领养需要什么条件 宠物领养需要什么条件呢">宠物领养需要什么条件 宠物领养需要什么条件呢</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3902.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Android开发基础——Kotlin：标准函数和静态方法 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Android开发基础——Kotlin：标准函数和静态方法 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="htmledit_views"> <h2 id="articleContentId">标准函数with/run/apply</h2> <p>Kotlin中的标准函数指的是Standard.kt文件中定义的函数，任何Kotlin代码都可以自由调用所有的标准函数。</p> <p>之前提到let函数，该函数主要作用是配合?.操作符进行辅助判空处理的。</p> <p>这里再看几个标准函数with/run/apply。</p> <h3>with</h3> <p>with函数接收两个参数，第一个参数可以是一个任意类型的对象，第二个参数是一个Lambda表达式。with函数会在Lambda表达式中提供第一个参数对象的上席文，并使用Lambda表达式中的最后一行代码作为返回值返回。</p> <p>其形式类似于：</p> <pre><code class="language-Kotlin">    val result = with(obj) {         // obj context         "value"     }</code></pre> <p>该函数可以在连续调用同一个对象的多个方法时让代码变得更加简洁。</p> <pre><code class="language-Kotlin">    val list = listOf("apple", "orange", "banana")     val builder = StringBuilder()     builder.append("Start eating fruits.\n")     for (fruit in list) {         builder.append(fruit).append("\n")     }     builder.append("Ate al fruits.")     val result = builder.toString()     println(result)</code></pre> <p>上面的代码逻辑很简单，只是将各个字符串进行打印，其结果为：</p> <pre><code class="language-Kotlin">Start eating fruits. apple orange banana Ate al fruits. </code></pre> <p>但是上面代码多次调用了builder对象的方法，而如果使用with函数，则有：</p> <pre><code class="language-Kotlin">    val list = listOf("apple", "orange", "banana")     val result = with(StringBuilder()) {         append("Start eating fruits.\n")         for (fruit in list) {             append(fruit).append("\n")         }         append("Ate all fruits")         toString()     }     println(result)</code></pre> <p>上面的代码首先给with函数的第一个参数传入了一个StringBuilder对象，之后的Lambda表示式的上下文就是该StringBuilder对象，因此便可以直接使用append之类的方法调用，然后最后一行代码的执行结果会返回。</p> <h3>run</h3> <p>run函数通常不会直接调用，而是要在某个对象的基础上调用，并且run函数只接收一个Lambda参数，并且会在Lambda表达式中提供调用对象的上下文。其它方面和with函数类似，也会将Lambda表示式的最后一行代码作为返回值返回。</p> <pre><code class="language-Kotlin">    val result = obj.run {         // obj context         "value"     }</code></pre> <p>而如果使用run函数对上述代码改写，则为：</p> <pre><code class="language-Kotlin">    val list = listOf("apple", "orange", "banana")     val result = StringBuilder().run {         append("Start eating fruits.\n")         for (fruit in list) {             append(fruit).append("\n")         }         append("Ate all fruits")         toString()     }     println(result)</code></pre> <p>代码上的变动很小，不过能够实现一样的功能。</p> <h3>apply</h3> <p>apply函数和run函数也类似，都要在某个对象上调用，并且只接收一个Lambda参数，也会在Lambda表达式中提供调用对象的上下文，但是apply函数无法指定返回值，而是会自动返回调用对象本身。</p> <pre><code class="language-Kotlin">    val result = obj.apply {         // obj context     }</code></pre> <p>使用apply实现上面的代码，则为：</p> <pre><code class="language-Kotlin">    val list = listOf("apple", "orange", "banana")     val result = StringBuilder().run {         append("Start eating fruits.\n")         for (fruit in list) {             append(fruit).append("\n")         }         append("Ate all fruits")     }     println(result.toString())</code></pre> <p>代码变动仍然很小，不过由于apply没有返回值，只能通过调用StringBuilder的toString方法进行打印。</p> <h2>定义静态方法</h2> <p>静态方法指不需要创建实例就能够调用的方法。</p> <p>静态方法很适合编写一些工具类的功能，因为功能类通常没有创建实例的必要，是全局通用的。</p> <p>虽然其它编程语言中，定义一个静态方法很简单，但是Kotlin却弱化了这方面的使用。</p> <p>如果需要使用类似的功能，单例类就可以实现。不过单例类会将整个类中方法的调用方式都变为类似于静态方法的调用方式。而如果只希望类中的某一个方法变为静态方法的调用方式，就需要使用到之前提到的companion object了。</p> <pre><code class="language-Kotlin">class Util {     fun doAction1() {         println("doAction1")     }      companion object {         fun doAction2() {             println("doAction2")         }     } }  fun main() {     Util().doAction1()     Util.doAction2() }</code></pre> <p>上面的doAction1是普通方法，需要创建Util类的实例才可调用，而doAction2方法则可以通过静态方法的调用方式进行调用。</p> <p>但其实doAction2方法并不是静态方法，companion object实际上会在Util类的内部创建一个伴生类，而doAction2方法就是定义在该伴生类中的实例方法。只是Kotlin会保证Util类始终只会存在一个伴生类对象，因此调用Util.doAction2方法实际上就是调用了Util类中伴生类对象的doAction2方法。</p> <p>上面只是静态方法类似的调用形式和使用方法，如果需要定义真正的静态方法，Kotlin提供了两种实现方式：</p> <ul> <li>注解</li> <li>顶层方法</li> </ul> <h3>注解</h3> <p>将单例类或companion object中的方法加上@JvmStatic注解，Kotlin就会将对应方法编译为真正的静态方法。</p> <pre><code class="language-java">class Util {     fun doAction1() {         println("doAction1")     }      companion object {         @JvmStatic         fun doAction2() {             println("doAction2")         }     } }</code></pre> <p>但是@JvmStatic注解只能加在单例类或companion object中的方法上，不能加在普通方法上。</p> <h3>顶层方法</h3> <p>顶层方法指没有定义在任何类中的方法。</p> <p>Kotlin编译器会将所有的顶层方法全部编译为静态方法，比如main方法。</p> <p>而所有顶层方法可以在任何位置被直接调用，而不用考虑包路径，也不用创建实例，直接调用即可。比如main方法，可以在任意位置直接调用。</p> </p></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3901.htm">win11系统怎么关闭自动锁屏</a></p>
                                                <p>下一个：<a href="/html/category/article-3903.htm">我们如何计算MySQL中两个时间值之间的差？</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7192.htm" title="领养一只狗要多少钱（领养一只小狗需要准备哪些物品）">领养一只狗要多少钱（领养一只小狗需要准备哪些物品）</a></li>
                        <li class="py-2"><a href="/html/category/article-7561.htm" title="深圳湾公园一日游路线(深圳湾公园游玩)">深圳湾公园一日游路线(深圳湾公园游玩)</a></li>
                        <li class="py-2"><a href="/html/category/article-6732.htm" title="动物医院简笔画（动物医院海报）">动物医院简笔画（动物医院海报）</a></li>
                        <li class="py-2"><a href="/html/category/article-7285.htm" title="专门卖宠物的app个人可以用吗（可以买卖宠物的app）">专门卖宠物的app个人可以用吗（可以买卖宠物的app）</a></li>
                        <li class="py-2"><a href="/html/category/article-7790.htm" title="宠物店粮食一个月要多少斤正常 宠物店粮食一个月要多少斤正常呢">宠物店粮食一个月要多少斤正常 宠物店粮食一个月要多少斤正常呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7652.htm" title="国内动物医院排行（中国最好的动物医学院）">国内动物医院排行（中国最好的动物医学院）</a></li>
                        <li class="py-2"><a href="/html/category/article-7055.htm" title="重庆宠物领养中心有哪些地方好（重庆宠物猫领养中心）">重庆宠物领养中心有哪些地方好（重庆宠物猫领养中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-7883.htm" title="猫咪三针疫苗多少钱（猫咪三针疫苗多少钱一共）">猫咪三针疫苗多少钱（猫咪三针疫苗多少钱一共）</a></li>
                        <li class="py-2"><a href="/html/category/article-7146.htm" title="妙三多三联疫苗打几针（妙三多三联是什么意思）">妙三多三联疫苗打几针（妙三多三联是什么意思）</a></li>
                        <li class="py-2"><a href="/html/category/article-7238.htm" title="宠物免费领养网站大全（免费领养宠物包邮）">宠物免费领养网站大全（免费领养宠物包邮）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
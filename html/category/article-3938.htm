<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3938.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p>hello大家好呀，我是小楼。</p> <p>作为一名基础组件开发，服务好每一位业务开发同学是我们的义务（KPI）。</p> <p>客服群里经常有业务开发同学丢来一段代码、一个报错，而我们，当然要微笑服务，耐心解答。</p> <p></p> <p>有的问题，凭借多年踩坑经验，一眼就能看出；有的问题，看一眼代码也能知道原因，但有的问题，还真就光凭看是看不出来的，这时，只能下载代码，本地跑跑看了。</p> <p>熟悉我的朋友都知道，我从事dubbo相关开（客）发（服）工作多年，所以我就来讲一个dubbo问题排查过程中的有趣的事。</p> <p>通常遇到看不能解决的问题时，先git拉取代码，再导入IDEA，找到main方法点击启动，一顿操作下来，不出意外，肯定会有点小错误，比如这条：</p> <blockquote> <p>Socket error occurred: localhost/127.0.0.1:2181: Connection refused</p> </blockquote> <p>看到2181端口就知道这是本地没有装zookeeper（下文简称zk），问题不大，docker直接拉一个zk镜像，起个容器就完事。</p> <p>随着这样的习惯日积月累，低配的Mac上相继跑了etcd、redis、mysql等等容器，重要的是还打开了N个IDEA窗口。</p> <p>每当启动一个新的项目时，风扇呼呼地直接将IDEA卡死。</p> <p>这时，我陷入了思考，能不能少跑点程序？</p> <p>etcd、redis、mysql暂时搞不定，但dubbo的注册中心我熟啊！柿子当然要挑软的捏。</p> <h3 id="需求梳理">需求梳理</h3> <p>在开干之前，得先梳理一下需求，于是我脑子闪现出无数个在本地测试时遇到的与dubbo注册中心有关问题的瞬间，但仔细一捋，无外乎两种：</p> <ul> <li>作为provider：最最最主要的就是不要阻断应用启动</li> <li>作为consumer： <ul> <li>不要阻断应用启动</li> <li>可以发现并调用本地的provider</li> <li>可以调用远程的provider</li> <li>可以手动指定调用任意provider</li> </ul> </li> </ul> <p>除了这两个功能上的需求，还得解决我们最初的问题：<strong>不要依赖第三方服务</strong>（如zk）。</p> <h3 id="调研">调研</h3> <p>由于一开始就想到了利用dubbo注册中心扩展来实现这个功能，为了不重复造轮子，翻了一下dubbo源码，看看是否已经有相应的实现：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/dad5689a78778863e927e75d35acddef.jpg" alt="灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子"></p> <p>发现除了dubbo-registry-multicast之外都是依赖了第三方服务，所以这个multicast是啥呢？dubbo官方文档说的很清楚：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5027488398f7d4e6a964e6ddc8ccee80.jpg" alt="灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子"></p> <p>乍一看很符合我们的需求，但仔细一想，还是有几点不满足：</p> <ol> <li>不一定能发现远程的provider，如果大家代码都是用的zk，而你把代码拉下来注册中心改成multicast是没法发现远程的服务的；</li> <li>没法手动指定调用任意provider。</li> </ol> <h3 id="产品设计">产品设计</h3> <p>服务发现得有个载体，要么通过第三方组件、要么通过网络。但我们忽略了，在本地，磁盘也可以作为一个载体。</p> <p>provider注册向磁盘文件写入，consumer订阅即读取磁盘文件，当磁盘文件有变更时通知consumer，大概是这么个样子：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e586f4a37c32ade4acc2a36e1f1b80d4.jpg" alt="灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子"></p> <p>这样设计有什么好处呢？</p> <ul> <li>不依赖其他服务，只是文件的读写，不会阻塞应用启动</li> <li>consumer和provider都在本地时，可以像其他注册中心（如zk、nacos等）一样工作，对开发者完全透明</li> <li>可以手动修改、指定调用任意provider</li> </ul> <p>唯一的缺点是，无法发现远程的provider，但我们可以手动指定，也算是没有大碍。</p> <p>我们以dubbo 2.7.x版本的接口级服务发现来设计我们的产品，因为这个版本使用的最多。</p> <p>首先要考虑的是如何去组织服务发现文件，由于是接口级服务发现，我们就按服务名来作为文件名，每个服务一个文件：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b6bcebca1c76b819f4ff220336f9399b.jpg" alt="灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子"></p> <p>其次每个文件的内容怎么组织？最简单的就是将dubbo注册的URL直接写入文件，每行一个URL，就像这样：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ba0b9181c2c60f0b0d7cafc33021a63b.jpg" alt="灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子"></p> <p>但你可能发现了问题，这dubbo的URL有点长啊~如果让我手动指定，岂不是很难做到？</p> <p>这个问题好解决，我们实现一个简写版本的URL，比如有一行这样简写，就将它还原为一个可用的URL。</p> <blockquote> <p>127.0.0.1:20880</p> </blockquote> <h3 id="代码实现">代码实现</h3> <p>在实现之前首先要了解的是dubbo注册中心扩展是如何编写的，这块直接看官方文档：</p> <blockquote> <p>https://dubbo.apache.org/zh/docs/v2.7/dev/impls/registry/</p> </blockquote> <p>虽然我觉得看完了文档你也不一定能实现一个dubbo注册中心扩展，但别慌，先往下看，说不定看完了本文你也能自己写一个。</p> <p>先看一下代码结构：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/62a8712c3d24404479583eaf01c8bc21.jpg" alt="灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子"></p> <ul> <li>项目命名为：dubbo-registry-mock，和dubbo源码中的命名风格保持一致</li> <li>MockRegistry是注册中心的核心实现</li> <li>MockRegistryFactory是mock registry的工厂，dubbo会通过这个类来创建MockRegistry</li> <li>org.apache.dubbo.registry.RegistryFactory这个文件是指定MockRegistryFactory该如何加载，即dubbo的SPI发现文件</li> </ul> <p>dubbo的注册中心配置只需要改成：</p> <blockquote> <p>dubbo.registry.address=mock://127.0.0.1:2181</p> </blockquote> <p>这里起作用的只有<code>mock</code>，ip、port并不重要，只是占个位置。</p> <p>当dubbo应用启动时，读取到配置的mock，会查找resources/META-INF.dubbo下的org.apache.dubbo.registry.RegistryFactory文件，这里它的内容为：</p> <pre><code class="language-xml">mock=org.newboo.MockRegistryFactory</code></pre> <p>于是去new出一个MockRegistryFactory。</p> <blockquote> <p>注：newboo.org是我曾经注册的一个域名，用来放博客，不过后来没有续费，现在我的测试代码中经常会出现这个包名。</p> </blockquote> <p>MockRegistryFactory也很简单，直接new一个MockRegistry：</p> <pre><code class="language-java">public class MockRegistryFactory extends AbstractRegistryFactory {      @Override     protected Registry createRegistry(URL url) {         return new MockRegistry(url);     } }</code></pre> <p>最后看核心的实现MockRegistry类：</p> <pre><code class="language-java">public MockRegistry(URL url) {     super(url);     String basePath = DISCOVERY_DEFAULT_DIR;     if (StringUtils.isNotEmpty(url.getParameter(DISCOVERY_FILE_DIR_KEY))) {         basePath = url.getParameter(DISCOVERY_FILE_DIR_KEY);     }      mockService = new MockService(basePath);      ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1, new NamedThreadFactory("file_scan", true));     scheduledExecutorService.scheduleWithFixedDelay(new SubscribeScan(), 1000L, 5000, TimeUnit.MILLISECONDS); }</code></pre> <p>这个构造方法，做了3件事情：</p> <ul> <li>获取basePath，也就是服务发现的文件夹基础路径，有个默认值，也可以根据url的参数进行调整，如：</li> </ul> <pre><code class="language-xml">dubbo.registry.address=mock://127.0.0.1:2181?discovery_file=/tmp/mock-registry2</code></pre> <ul> <li>new一个MockService，承载了核心的服务发现逻辑，后面再说</li> <li>启动一个定时任务，每隔5秒去扫描一次文件，看文件是否有变化，如果有变化则通知consumer，详细后面也会说</li> </ul> <p>MockRegistry继承自FailbackRegistry，只需要实现它的<code>doRegister</code>、<code>doUnregister</code>、<code>doSubscribe</code>、<code>doUnsubscribe</code>、<code>isAvailable</code>几个方法即可。</p> <p>其中<code>isAvailable</code>是判断注册中心是否可用，我们直接返回true即可。</p> <p><code>doUnsubscribe</code>是取消订阅，这里也啥都不用干，剩下3个方法我们将逻辑封装在MockService：</p> <pre><code class="language-java">@Override public void doRegister(URL url) {     try {         mockService.writeUrl(url);     } catch (Throwable e) {         throw new RpcException("Failed to register " + url, e);     } }  @Override public void doUnregister(URL url) {     try {         mockService.removeUrl(url);     } catch (Throwable e) {         throw new RpcException("Failed to unregister " + url, e);     } }  @Override public void doSubscribe(URL url, NotifyListener listener) {     try {         List<URL> urls = mockService.getUrls(url.getServiceInterface());         listener.notify(urls);     } catch (ServiceNotChangeException ignored) {     } catch (Throwable e) {         throw new RpcException("Failed to subscribe " + url, e);     } }</code></pre> <p><code>writeUrl</code>直接获取到文件名，往文件中append新的一行URL即可：</p> <pre><code class="language-java">public void writeUrl(URL url) throws IOException {     String fileName = pathCenter.getServicePath(url.getServiceInterface());      // 写入文件     String line = url.toFullString();     FileUtil.appendLine(fileName, line); }</code></pre> <p><code>removeUrl</code>先读取文件，把要注销的URL删除，再把剩余内容覆盖写回文件即可：</p> <pre><code class="language-java">public void removeUrl(URL url) throws IOException {     String fileName = pathCenter.getServicePath(url.getServiceInterface());     String line = url.toFullString();      List<String> lines = FileUtil.readLines(fileName);     lines = LinesUtil.removeLine(lines, line);      FileUtil.writeLines(fileName, lines); }</code></pre> <p><code>getUrls</code>去扫描文件，如果文件有变更，就把读取到的最新的URL格式化后返回，之所以要格式化是因为可能会有简写的URL（见上文），文件是否有变更直接根据文件的最后更新时间来判断，精确到毫秒，本地测试也够用了：</p> <pre><code class="language-java"> public List<URL> getUrls(String service) throws Exception {     if (!scan(service)) {         throw new ServiceNotChangeException();     }      String fileName = pathCenter.getServicePath(service);     List<String> lines = FileUtil.readLines(fileName);     List<URL> urls = new ArrayList<>(lines.size());     for (String line : lines) {         if (!LinesUtil.isSkipLine(line)) {             urls.add(format(line));         }     }     return urls; }</code></pre> <p>其中scan如果返回false，说明文件没有变更，直接忽略本次扫描。</p> <p>最后一个SubscribeScan只需要把已经订阅的接口拿出来，执行一次doSubscribe即可：</p> <pre><code class="language-java">public class SubscribeScan implements Runnable {     @Override     public void run() {         try {             // 已经订阅的url             Map<URL, Set<NotifyListener>> subscribeds = getSubscribed();             if (subscribeds == null || subscribeds.isEmpty()) {                 return;             }              for (Map.Entry<URL, Set<NotifyListener>> entry : subscribeds.entrySet()) {                 for (NotifyListener listener : entry.getValue()) {                     doSubscribe(entry.getKey(), listener);                 }             }         } catch (Throwable t) {             // ignore         }     } }</code></pre> <p>看到这里可能有的同学问，为啥要轮询，不用WatchService监听文件的变更呢？我写的时候也查了一下，并且debug了一下，发现WatchService的真实实现是PollingWatchService，而且它也是采用轮询来实现的，不信可以打开这个类看看</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4e43b703bef8f86fc3923c1aea5d6713.jpg" alt="灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子"></p> <p>感觉和自己写没啥差别，所以我就自己写了。</p> <p>完整代码已经上传到了github：</p> <blockquote> <p>https://github.com/lkxiaolou/dubbo-registry-mock</p> </blockquote> <p>为了让这个项目看起来更饱满一点，还写了一个README：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8d90c49186d2dcf0d997a096563867cb.jpg" alt="灵感乍现！造了个与众不同的Dubbo注册中心扩展轮子"></p> <h3 id="最后">最后</h3> <p>如果你耐心看完了本文，且对dubbo有所了解，我相信你已经能自己写一个dubbo注册中心扩展。</p> <p>如果你也经常在本地做测试，也可以用我写的这个mock registry来试试，当然代码和想法都有改进的地方，如果你有更好的想法也可以和我交流。</p> <p>最后，这应该是劳动节前的最后一篇文章，写文不易，来点正向反馈，点赞+在看+分享，我会写得更有劲~我们下期再见。</p> <hr/> <blockquote> <ul> <li></li> </ul> </blockquote> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3937.htm">SpringCloudAlibaba注册中心与配置中心之利器Nacos实战与源码分析(下)_在线工具</a></p>
                                                <p>下一个：<a href="/html/category/article-3939.htm">springboot集成swagger碰到的坑（报404）</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7330.htm" title="昆明宠物门诊报销政策（昆明宠物医院24小时急诊）">昆明宠物门诊报销政策（昆明宠物医院24小时急诊）</a></li>
                        <li class="py-2"><a href="/html/category/article-7652.htm" title="国内动物医院排行（中国最好的动物医学院）">国内动物医院排行（中国最好的动物医学院）</a></li>
                        <li class="py-2"><a href="/html/category/article-6824.htm" title="全日粮饲料混合搅拌机单轴好还是双轴好（双轴搅拌给料机）">全日粮饲料混合搅拌机单轴好还是双轴好（双轴搅拌给料机）</a></li>
                        <li class="py-2"><a href="/html/category/article-6871.htm" title="动物医院资质查询网站有哪些软件（动物医院公示栏）">动物医院资质查询网站有哪些软件（动物医院公示栏）</a></li>
                        <li class="py-2"><a href="/html/category/article-7515.htm" title="动物医院诊疗范围有哪些类型 动物医院诊疗范围有哪些类型的">动物医院诊疗范围有哪些类型 动物医院诊疗范围有哪些类型的</a></li>
                        <li class="py-2"><a href="/html/category/article-7606.htm" title="用电饭锅做小豆饭(小豆饭怎么煮)">用电饭锅做小豆饭(小豆饭怎么煮)</a></li>
                        <li class="py-2"><a href="/html/category/article-6732.htm" title="动物医院简笔画（动物医院海报）">动物医院简笔画（动物医院海报）</a></li>
                        <li class="py-2"><a href="/html/category/article-6825.htm" title="水可以自发形成过氧化氢，我们终于明白为什么了：">水可以自发形成过氧化氢，我们终于明白为什么了：</a></li>
                        <li class="py-2"><a href="/html/category/article-7975.htm" title="电视剧青树（青树剧情）">电视剧青树（青树剧情）</a></li>
                        <li class="py-2"><a href="/html/category/article-7560.htm" title="被猫抓了一下出了点血多久***（被猫抓伤出血多久要***）">被猫抓了一下出了点血多久***（被猫抓伤出血多久要***）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
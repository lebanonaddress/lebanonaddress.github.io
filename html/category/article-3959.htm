<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3959.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Kotlin新手入坑：构造函数，静态方法，顶层方法.._.ST - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Kotlin新手入坑：构造函数，静态方法，顶层方法.._.ST </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>构造函数，静态方法</h3> <ul> <li>前言</li> <li>构造函数</li> <li> <ul> <li>主构函数</li> <li>次构造函数</li> </ul> </li> <li>静态方法</li> <li> <ul> <li>类似静态方法调用的语法特性</li> <li>静态方法</li> <li>顶层方法</li> </ul> </li> </ul> </div> <p><font size="5"><em><strong>抓住今天，尽可能少的信赖明天。</strong></em> </font>喝汤能补 (* ^ ▽ ^ *)</p> <h1> 前言</h1> <p>  该文章作为学习交流，如有错误欢迎各位大佬指正 (* ^ ▽ ^ *)</p> <ul> <li>自身技能<br /> （1）已具备计算机的基本知识</li> <li>本文简介<br /> 主要讲解：构造函数概念与相关语法，静态方法概念与相关语法知识。</li> </ul> <h1> 构造函数</h1> <p>在kotlin中构造函数分为两种：主构函数，次构函数。</p> <h2> 主构函数</h2> <p>    主构函数：每个类默认都会有一个不带参数的主构函数，也可以显式的给它指明参数。特点是没有函数体，直接定义在类名的后面即可。</p> <p>看下代码<br />     这里将name1，age1都放在主构函数中，表示在实例化Bird时，必须要传入要求的参数。<br />     在创建对象时，传入的参数自动赋值了，所以不需要重新赋值，可以使用val。<br />     init结构体：如果想在主构造函数中编写逻辑，就必须写在 <font color="red"> init{}</font>的函数体中。（主构造函数无函数体）</p> <pre><code>class Bird(val name1 : String ,val age1 : Int) : Animal(){ 	init {         println("init Bird")     } 	 }  val Bird  b  =  Bird("翠",3) </code></pre> <p>    学过java的会发现，继承的时候多了一个(). why？------java继承中有个特性，是子类的构造函数必须调用父类的构造函数。 在kotlin中，可以通过在init结构体中去调用父类的构造函数，但是这种方式不太好，在大多数的时候，我们是不需要写init的。所以使用  ()  来进行代替,子类的构造函数调用父类中的哪个构造函数，通过继承时的括号进行指定。</p> <p>看下带参数的父类的代码<br />     Animal 已经带了参数，这时如果继承时是Animal()，就会报错，因为没有无参数的主构造函数了。在添加这个两个构造函数的值的时候，可以在子类中加上这两个参数，然后传个父类的构造函数。<br />     这里对父类的参数声明未使用var，val，是因为主构造函数中，声明成var、val的参数将自动成为该类的字段，会导致和父类同名的name，age冲突。不加关键字表示将name，age的作用域仅限制在主构造函数中。</p> <pre><code>open class Animal( name: String, age: Int) {     var name = ""     var age = 0     fun eat() {         println(name + " age is " + age)     } }  class Bird(val appearance : String ,name: String, age : Int) : Animal(name,age){     init {         println("init Bird")     }     fun fry(){         println(" flight ")     } }      val bird = Bird("翅膀","cui",4) </code></pre> <h2> 次构造函数</h2> <p>   对于任意一个类，只能有一个主构造函数，但是可以有多个次构造函数。次构造函数也可以用来实例化类，特点是拥有函数体。<br /> 当类机既有主构造函数又有次构造函数时，所有的次构造函数都必须调用主构造函数(包括间接调用)。</p> <ul> <li> <font color="red"> <strong>constructor关键字</strong></font>，语法格式constructor(参数) : this (参数){…}</li> </ul> <p>   第一个次构造函数接收name和age，然后通过this调用主构造函数，并对 appearance赋值初始值； 第二个次构造函数，通过this调用第一个次构造函数，并对name和age参数赋值初始值，间接调用了主构造函数。</p> <pre><code>class Bird(val appearance : String ,name: String, age : Int) : Animal(name,age){     constructor(name: String,age: Int): this("",name,age){     }     constructor() : this ("",0){     }          fun fry(){         println(" flight ")     } } </code></pre> <p>看个特殊的列子<br />    这时继承又没有()了。前面我们提到一个类默认都有一个主构造函数，然而kotlin是允许，类中只有次构造函数，没有主构造函数的情况的，非常少见。因为没有主构造函数，所以继承时，也就不需要括号了；同时，次构造函数只能   直接调用(super)  父类的构造函数。</p> <pre><code>class Bird : Animal{     constructor(name: String,age: Int): super(name,age){     } } </code></pre> <h1> 静态方法</h1> <p>  静态方法，在一些编程语言中也称类方法，指不需要创建实例就能调用的方法。Kotlin中，极度弱化了静态方法的概念，改用其语法特性来实现类似效果，但也有静态方法。</p> <ul> <li>类似静态方法调用的语法特性，不是真的静态方法；如果在java代码中使用静态方法的形式去调用，会发现这些方法并不存在。</li> </ul> <h2> 类似静态方法调用的语法特性</h2> <p>  工具类的方法，Kotlin推荐使用单例类的方式来实现。这里的getFileIsExist不是静态方法，但是实现了通过类名即可调用的语法特性。</p> <pre><code>object FileUtil {     fun getFileIsExist(file: File): Boolean{         return file.exists()     } } </code></pre> <p>  在类中，只希望某个方法能使用类名的方式进行调用，则可以使用<font color="red"> <strong>companion object关键字</strong></font>。这个关键字会在Test类的内部创建一个伴生类，getFileIsExist就是定义在这个伴生类里面的实例方法。<br />   Kotlin保证Test类始终只会存在一个伴生类对象，所以Test.getFileIsExist()方法，就是调用Test类的伴生对象的getFileIsExist()方法。<br />   同样，这种形式定义的getFileIsExist()方法也不是静态方法。</p> <pre><code>class Test{      companion object {         fun getFileIsExist(file: File): Boolean {             return file.exists()         }     } } </code></pre> <h2> 静态方法</h2> <p>  Kotlin中，给单例类或者companion object 中的方法加上<font color="red">@JvmStatic注解</font>，编译器就会将这些方法编译成真正的静态方法。该注解只能加在单例类，或者companion object 中的方法上，普通方法添加，会提示语法错误。</p> <pre><code>class Test{      companion object {         @JvmStatic         fun getFileIsExist(file: File): Boolean {             return file.exists()         }     } } </code></pre> <h2> 顶层方法</h2> <p>  顶层方法指的是那些没有定义在任何类中的方法，直接放到某一个包里面（也称为包级别函数）。如：main()方法。Kotlin编译器会将所有的顶层方法全部编译成静态方法，所以定义一个顶层方法，也就定义一个静态方法。</p> <ul> <li>定义顶层方法，首先创建一个Kotlin文件，后缀为.kt ，在这个xxx.kt的文件中，定义的方法都是顶层方法。使用时，直接在需要使用的类，导入该方法即可。</li> <li>如果在java中，没有顶层方法概念，无法直接调用。这里编译器会自动创建一个xxxKt的java类，这些方法以静态的形式定义在该java类中。</li> </ul> <p>  简单例子，Kotlin中定义FileUtil.kt ，里面有getFileIsExist()方法。 java中想使用，需要使用编译器创建的FileUtilKt类，然后调用该类中的 getFileIsExist()方法。</p> <p><font size="5">觉得有帮助的点下赞哟，毕竟三连步骤更多，嘻嘻，谢谢大家的支持(* ^ ▽ ^ *)</font>                 </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3958.htm">Vue知识点整理编程式路由导航、缓存路由组件、两个新的生命周期钩子</a></p>
                                                <p>下一个：<a href="/html/category/article-3960.htm">python学习分享之垃圾回收-缓存机制</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4049.htm" title="JAVA初始化自定义类的数组">JAVA初始化自定义类的数组</a></li>
                        <li class="py-2"><a href="/html/category/article-4046.htm" title="Vue  el-input  trim() 去空格">Vue  el-input  trim() 去空格</a></li>
                        <li class="py-2"><a href="/html/category/article-4059.htm" title="Android 12图像显示系统简述Allocator/Mapper HAL服务的获取过程">Android 12图像显示系统简述Allocator/Mapper HAL服务的获取过程</a></li>
                        <li class="py-2"><a href="/html/category/article-4505.htm" title="动物医院咨询电话号码（动物医院的电话号码）">动物医院咨询电话号码（动物医院的电话号码）</a></li>
                        <li class="py-2"><a href="/html/category/article-4036.htm" title="字符数组和字符串的区别，C语言字符数组和字符串区别详解">字符数组和字符串的区别，C语言字符数组和字符串区别详解</a></li>
                        <li class="py-2"><a href="/html/category/article-4395.htm" title="安又琪个人资料（安又琪图片 个人资料 感情生活）">安又琪个人资料（安又琪图片 个人资料 感情生活）</a></li>
                        <li class="py-2"><a href="/html/category/article-5954.htm" title="宠物领养需要什么条件 宠物领养需要什么条件呢">宠物领养需要什么条件 宠物领养需要什么条件呢</a></li>
                        <li class="py-2"><a href="/html/category/article-4065.htm" title="Zookeeper分布式一致性协议ZAB">Zookeeper分布式一致性协议ZAB</a></li>
                        <li class="py-2"><a href="/html/category/article-4121.htm" title="PyTorch查看CUDA支持情况">PyTorch查看CUDA支持情况</a></li>
                        <li class="py-2"><a href="/html/category/article-4048.htm" title="【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）">【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
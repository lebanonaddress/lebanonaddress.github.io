<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3964.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>分析fastcache和freecache(一)_在线工具 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">分析fastcache和freecache(一)_在线工具 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h2 id="分析fastcache和freecache一">分析fastcache和freecache(一)</h2> <p>fastcache和freecache是两个比较简单的缓存实现，下面分析一下各自的实现，并学习一下其实现中比较好的方式。</p> <h3 id="fastcache">fastcache</h3> <h4 id="概述">概述</h4> <p>fastcache是一个简单库，核心文件也就两个：<code>fastcache.go</code>和<code>bigcache.go</code>。其中后者是对前者场景的扩展，其实就是将大于64KB 的数据分段存储。参见下面<code>Limitations</code>的第二条。</p> <blockquote> <h4 id="limitations">Limitations</h4> <ol> <li>Keys and values must be <strong>byte slices.</strong> Other types must be marshaled before storing them in the cache.</li> <li>Big entries with sizes exceeding <strong>64KB</strong> must be stored via distinct API.</li> <li>There is <strong>no cache expiration</strong>. Entries are evicted from the cache only on cache size overflow. Entry deadline may be stored inside the value in order to implement cache expiration.</li> </ol> </blockquote> <p>根据官方的性能测试报告，其读写性能比较均衡，远好于标准的Go map和sync.Map：</p> <pre><code>GOMAXPROCS=4 go test github.com/VictoriaMetrics/fastcache -bench='Set|Get' -benchtime=10s goos: linux goarch: amd64 pkg: github.com/VictoriaMetrics/fastcache BenchmarkBigCacheSet-4      	    2000	  10566656 ns/op	   6.20 MB/s	 4660369 B/op	       6 allocs/op BenchmarkBigCacheGet-4      	    2000	   6902694 ns/op	   9.49 MB/s	  684169 B/op	  131076 allocs/op BenchmarkBigCacheSetGet-4   	    1000	  17579118 ns/op	   7.46 MB/s	 5046744 B/op	  131083 allocs/op BenchmarkCacheSet-4         	    5000	   3808874 ns/op	  17.21 MB/s	    1142 B/op	       2 allocs/op BenchmarkCacheGet-4         	    5000	   3293849 ns/op	  19.90 MB/s	    1140 B/op	       2 allocs/op BenchmarkCacheSetGet-4      	    2000	   8456061 ns/op	  15.50 MB/s	    2857 B/op	       5 allocs/op BenchmarkStdMapSet-4        	    2000	  10559382 ns/op	   6.21 MB/s	  268413 B/op	   65537 allocs/op BenchmarkStdMapGet-4        	    5000	   2687404 ns/op	  24.39 MB/s	    2558 B/op	      13 allocs/op BenchmarkStdMapSetGet-4     	     100	 154641257 ns/op	   0.85 MB/s	  387405 B/op	   65558 allocs/op BenchmarkSyncMapSet-4       	     500	  24703219 ns/op	   2.65 MB/s	 3426543 B/op	  262411 allocs/op BenchmarkSyncMapGet-4       	    5000	   2265892 ns/op	  28.92 MB/s	    2545 B/op	      79 allocs/op BenchmarkSyncMapSetGet-4    	    1000	  14595535 ns/op	   8.98 MB/s	 3417190 B/op	  262277 allocs/op </code></pre> <h4 id="fastcachego分析">fastcache.go分析</h4> <p>fastcache的数据结构相对比较简单，主要内容如下(省去了统计相关的结构体成员)：</p> <pre><code class="language-go">type Cache struct { 	buckets [bucketsCount]bucket 	... }  type bucket struct { 	mu sync.RWMutex  	// chunks is a ring buffer with encoded (k, v) pairs. 	// It consists of 64KB chunks. 	chunks [][]byte  	// m maps hash(k) to idx of (k, v) pair in chunks. 	m map[uint64]uint64  	// idx points to chunks for writing the next (k, v) pair. 	idx uint64  	// gen is the generation of chunks. 	gen uint64 	... } </code></pre> <p><code>Cache</code>结构体中包含长度为512的<code>buckets</code>，<code>bucket</code>中包含存储数据的<code>chunks</code>数组。fastcache没有缓存超时机制，<code>chunks</code>为<code>ringbuffer</code>，当<code>chunks</code>满数据之后，新来的数据会放到<code>chunk1</code>中，以此类推。从这方面看，fastcache并没有什么神奇之处，但cache说白了也就2件事：</p> <ol> <li>快速检索数据，包括快速确定写入的内存以及快速查找所需的数据</li> <li>高效利用内存，不产生过多的内存碎片</li> </ol> <p>后面看下fastcache如何利用<code>bucket.m</code>、<code>bucket.idx</code>和<code>bucket.gen</code>这三个参数来实现快速检索数据，以及如何使用<code>freeChunks</code>来减少内存预分配。</p> <p><img decoding="async" src="https://img2022.cnblogs.com/blog/1334952/202204/1334952-20220429175047909-2058588532.png" alt="分析fastcache和freecache(一)_在线工具" style="zoom: 80%"></p> <h5 id="cache的初始化">Cache的初始化</h5> <p><code>Cache</code>中的<code>buckets</code>的长度以及<code>bucket</code>中单个<code>chunk</code>的大小是固定的，入参的<code>maxBytes</code>仅会影响<code>bucket.chunks</code>的长度，即<code>bucket</code>中的<code>chunk</code>数目。从<code>Cache</code>结构体中可以看到其<code>buckets</code>的长度为<code>bucketsCount</code>，即512个。</p> <pre><code class="language-go">func New(maxBytes int) *Cache { 	if maxBytes <= 0 { 		panic(fmt.Errorf("maxBytes must be greater than 0; got %d", maxBytes)) 	} 	var c Cache 	maxBucketBytes := uint64((maxBytes + bucketsCount - 1) / bucketsCount) 	for i := range c.buckets[:] { 		c.buckets[i].Init(maxBucketBytes) 	} 	return &c } </code></pre> <p>下面是<code>bucket</code>的初始化方法，需要注意的是其仅仅初始化了<code>b.chunks</code>的大小，并没有初始化单个<code>chunk</code>的内存空间(即<code>chunkSize</code>字节)。<code>chunk</code>的初始化是在实际使用时从<code>freeChunks</code>申请的，这样可以避免预先分配冗余内存。这种方式有点类似底层的虚拟内存的概念，只有在真正使用的时候才会分配内存。后面会看到<code>freeChunks</code>是如何申请内存的。</p> <pre><code class="language-go">func (b *bucket) Init(maxBytes uint64) { 	if maxBytes == 0 { 		panic(fmt.Errorf("maxBytes cannot be zero")) 	} 	if maxBytes >= maxBucketSize { 		panic(fmt.Errorf("too big maxBytes=%d; should be smaller than %d", maxBytes, maxBucketSize)) 	} 	maxChunks := (maxBytes + chunkSize - 1) / chunkSize 	b.chunks = make([][]byte, maxChunks) 	b.m = make(map[uint64]uint64) 	b.Reset() } </code></pre> <h5 id="chunk内存的申请和释放">chunk内存的申请和释放</h5> <p>上面说了在<code>Cache</code>初始化时并没有为<code>chunk</code>申请内存，在实际使用<code>chunk</code>的时候(<code>Set</code>)才会申请内存。下面是<code>chunk</code>的内存初始化方式。可以看到fastcache中使用<code>unix.Mmap</code>来为<code>chunk</code>申请内存，这样作可以避免GC的影响(当前缺点是需要手动维护内存)。当需要为<code>chunk</code>申请内存时，会调用<code>unix.Mmap</code>来一次性申请<code>chunksPerAlloc</code>(即1024)个<code>chunk</code>，将其附加到<code>freeChunks</code>中，并从<code>freeChunks</code>中返回最后一个元素作为初始化后的<code>chunk</code>。当然<code>unix.Mmap</code>需要在unix系统下才能生效。</p> <p><code>freeChunks</code>是个全局<code>chunk</code>数组，便于为不同的<code>chunk</code>提供存储。</p> <pre><code class="language-go">func getChunk() []byte {    freeChunksLock.Lock()    if len(freeChunks) == 0 {       // Allocate offheap memory, so GOGC won't take into account cache size.       // This should reduce free memory waste.       data, err := unix.Mmap(-1, 0, chunkSize*chunksPerAlloc, unix.PROT_READ|unix.PROT_WRITE, unix.MAP_ANON|unix.MAP_PRIVATE)       if err != nil {          panic(fmt.Errorf("cannot allocate %d bytes via mmap: %s", chunkSize*chunksPerAlloc, err))       }       for len(data) > 0 {          p := (*[chunkSize]byte)(unsafe.Pointer(&data[0]))          freeChunks = append(freeChunks, p)          data = data[chunkSize:]       }    }    n := len(freeChunks) - 1    p := freeChunks[n]    freeChunks[n] = nil    freeChunks = freeChunks[:n]    freeChunksLock.Unlock()    return p[:] } </code></pre> <p>下面是trunk的回收方式，比较简单，即将需要回收的trunk附加到<code>freeChunks</code>即可。</p> <pre><code class="language-go">func putChunk(chunk []byte) { 	if chunk == nil { 		return 	} 	chunk = chunk[:chunkSize] 	p := (*[chunkSize]byte)(unsafe.Pointer(&chunk[0]))  	freeChunksLock.Lock() 	freeChunks = append(freeChunks, p) 	freeChunksLock.Unlock() } </code></pre> <h5 id="添加kv数据">添加kv数据</h5> <p>fastcache使用<code>Set</code>来添加数据，但数据需要是<code>[]byte</code>类型。它首先会对<code>k</code>进行哈希，统一<code>k</code>的长度。并通过哈希的结果找出存放该数据的<code>bucket</code>索引。</p> <pre><code class="language-go">func (c *Cache) Set(k, v []byte) {    h := xxhash.Sum64(k)    idx := h % bucketsCount    c.buckets[idx].Set(k, v, h) } </code></pre> <p>通过索引找到对应的<code>bucket</code>之后，下一步就是将数据存储到<code>bucket</code>中的<code>chunk</code>中。</p> <p>该函数是fastcache的核心函数，</p> <ol> <li> <p>有效性校验，确保k、v的长度不超过16bit，即2个字节，在第2步中会保存k、v的长度信息，因此此处是强制限制。</p> </li> <li> <p><code>chunk</code>中保存的单个数据的格式如下，使用这种方式主要是为了方便快速检索k、v。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/639f4162b85e945876bfa7d9dc64eea3.jpg" alt="分析fastcache和freecache(一)_在线工具" style="zoom: 80%"></p> </li> <li> <p>获取该bucket中的<code>chunks</code>，注意一开始使用的时候<code>chunks</code>中的<code>chunk</code>是没有初始化的</p> </li> <li> <p><code>b.idx</code>表示当前<code>chunks</code>中的总数据偏移(但并不等于有效数据，如果某个chunk无法容纳下一个数据，则会产生一定的碎片)。<code>chunkIdx</code>为当前<code>chunk</code>的索引，<code>idxNew</code>为添加新数据之后的总数据偏移，<code>chunkIdxNew</code>为添加新数据之后的<code>chunk</code>索引<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/d2bea8c8465f15aac884b6083b139cad.jpg" alt="分析fastcache和freecache(一)_在线工具" style="zoom: 80%"></p> </li> <li> <p>如果<code>chunkIdxNew > chunkIdx</code>说明当前chunk的剩余空间无法保存新数据，此时需要一个新的chunk来保存新数据(此时索引为<code>chunkIdx</code>的<code>chunk</code>中会产生内存碎片)。</p> </li> <li> <p>如果该<code>bucket</code>中的所有<code>chunk</code>都已经被占满，此时没有空余的chunk来保存新数据，此时会采用<code>ringbuffer</code>的方式，将新数据放到第一个chunk中</p> <p>6.1 更新数据偏移量，此时在第一个<code>chunk</code>中，因此偏移量为0。bucket有一个<code>b.gen</code>成员，保存了当前bucket中chunks的循环使用次数，即第<code>gen</code>代数据。由于<code>chunks</code>是ringbuf，存储空间会被循环利用，因此在查询数据时需要对比数据存储时的<code>gen</code>(存储在<code>b.m</code>中)和当前<code>gen</code>，如果不相同，则说明老的数据已经被后来的数据覆盖了。</p> <p>6.2 <code>b.gen</code>会保存到<code>b.m</code>的高24位，如果此时<code>b.gen&((1<<genSizeBits)-1) == 0</code>，则说明<code>b.gen</code>发生了溢出，此时需要将<code>b.gen</code>置0，重新计数。</p> <p>6.3 当重新使用<code>chunks</code>时，需要清理<code>b.m</code>中无效的数据</p> </li> <li> <p>如果<code>chunks</code>中有空余的<code>chunk</code>，则更新<code>chunk</code>索引和总数据偏移量。</p> </li> <li> <p>清空<code>chunk</code>中的数据</p> </li> <li> <p>获取存储数据的<code>chunk</code>，如果该<code>chunk</code>没有初始化，则调用<code>getChunk</code>初始化<code>chunk</code>内存。</p> </li> <li> <p>在<code>chunk</code>中添加该数据，包括数据头(<code>kvLenBuf</code>)和k、v</p> </li> <li> <p><code>b.m</code>中保存了该元素(索引为k的哈希值)的相关信息，高24位保存了该数据所处的<code>gen</code>，低40位保存了该数据的起始位置(即保存该数据时的总数据偏移量，受限于<code>chunkSize</code>的大小，最多只会占用16bit)。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/587f8b04d04ab6b63d4f71e1db65b721.jpg" alt="分析fastcache和freecache(一)_在线工具" style="zoom: 80%"></p> </li> <li> <p>更新bucket中的总数据偏移量</p> </li> <li> <p><code>cleanLocked</code>会清理<code>b.m</code>中的无效数据。那么如何判断哪些数据是无效的呢？有效数据有如下两种情况：</p> <ol> <li>如果数据的偏移量(<code>idx</code>)大于当前bucket的偏移量(<code>bIdx</code>)，则说明该数据是上一代数据，则数据的<code>gen</code>和<code>bucket</code>的gen(<code>bGen</code>)有如下两种关系： <ol> <li><code>gen+1 == bGen</code></li> <li>gen == maxGen && bGen == 1</li> </ol> </li> <li>如果数据的偏移量(<code>idx</code>)小于当前bucket的偏移量(<code>bIdx</code>)，，则说明该数据是本代数据，则要满足<code>gen == bGen</code> </li> </ol> <p>不满足上述两种场景的数据都是无效数据，需要清理。</p> <pre><code class="language-go">func (b *bucket) cleanLocked() { 	bGen := b.gen & ((1 << genSizeBits) - 1) 	bIdx := b.idx 	bm := b.m 	for k, v := range bm { 		gen := v >> bucketSizeBits 		idx := v & ((1 << bucketSizeBits) - 1) 		if (gen+1 == bGen || gen == maxGen && bGen == 1) && idx >= bIdx || gen == bGen && idx < bIdx { 			continue 		} 		delete(bm, k) 	} } </code></pre> </li> </ol> <pre><code class="language-go">func (b *bucket) Set(k, v []byte, h uint64) { 	atomic.AddUint64(&b.setCalls, 1) 	if len(k) >= (1<<16) || len(v) >= (1<<16) { //<1> 		return 	} 	var kvLenBuf [4]byte // <2> 	kvLenBuf[0] = byte(uint16(len(k)) >> 8) 	kvLenBuf[1] = byte(len(k)) 	kvLenBuf[2] = byte(uint16(len(v)) >> 8) 	kvLenBuf[3] = byte(len(v)) 	kvLen := uint64(len(kvLenBuf) + len(k) + len(v)) 	if kvLen >= chunkSize { 		return 	}  	chunks := b.chunks // <3> 	needClean := false 	b.mu.Lock() 	idx := b.idx // <4> 	idxNew := idx + kvLen 	chunkIdx := idx / chunkSize  	chunkIdxNew := idxNew / chunkSize 	if chunkIdxNew > chunkIdx { // <5> 		if chunkIdxNew >= uint64(len(chunks)) { // <6> 			idx = 0  // <6.1> 			idxNew = kvLen 			chunkIdx = 0 			b.gen++ 			if b.gen&((1<<genSizeBits)-1) == 0 { // <6.2> 				b.gen++ 			} 			needClean = true // <6.3> 		} else { 			idx = chunkIdxNew * chunkSize // <7> 			idxNew = idx + kvLen 			chunkIdx = chunkIdxNew 		} 		chunks[chunkIdx] = chunks[chunkIdx][:0] // <8> 	} 	chunk := chunks[chunkIdx] // <9> 	if chunk == nil { 		chunk = getChunk() 		chunk = chunk[:0] 	} 	chunk = append(chunk, kvLenBuf[:]...) // <10> 	chunk = append(chunk, k...) 	chunk = append(chunk, v...) 	chunks[chunkIdx] = chunk 	b.m[h] = idx | (b.gen << bucketSizeBits) // <11> 	b.idx = idxNew //12 	if needClean { // <13> 		b.cleanLocked() 	} 	b.mu.Unlock() } </code></pre> <h5 id="获取kv数据">获取kv数据</h5> <p>有了<code>Set</code>的基础，<code>Get</code>就相对简单很多。</p> <ol> <li>首先从<code>b.m</code>中获取该<code>k</code>对应的元数据</li> <li>校验该数据是否合法，逻辑跟<code>cleanLocked</code>一样</li> <li>如果合法，则通过偏移量找到对应的<code>chunk</code> </li> <li>获取数据在其所在的<code>chunk</code>中的偏移量</li> <li>找到<code>kvLenBuf</code>中保存的k、v长度</li> <li>校验数据中的k是不是跟所需要的k一样，这么做的目的是防止哈希冲突的情况下获取到异常数值。如果合法则返回对应的v即可</li> </ol> <pre><code class="language-go">func (b *bucket) Get(dst, k []byte, h uint64, returnDst bool) ([]byte, bool) { 	atomic.AddUint64(&b.getCalls, 1) 	found := false 	chunks := b.chunks 	b.mu.RLock() 	v := b.m[h] // <1> 	bGen := b.gen & ((1 << genSizeBits) - 1) 	if v > 0 { 		gen := v >> bucketSizeBits 		idx := v & ((1 << bucketSizeBits) - 1) 		if gen == bGen && idx < b.idx || gen+1 == bGen && idx >= b.idx || gen == maxGen && bGen == 1 && idx >= b.idx { // <2> 			chunkIdx := idx / chunkSize // <3> 			if chunkIdx >= uint64(len(chunks)) { 				// Corrupted data during the load from file. Just skip it. 				atomic.AddUint64(&b.corruptions, 1) 				goto end 			} 			chunk := chunks[chunkIdx] 			idx %= chunkSize // <4> 			if idx+4 >= chunkSize { 				// Corrupted data during the load from file. Just skip it. 				atomic.AddUint64(&b.corruptions, 1) 				goto end 			} 			kvLenBuf := chunk[idx : idx+4] // <4> 			keyLen := (uint64(kvLenBuf[0]) << 8) | uint64(kvLenBuf[1]) 			valLen := (uint64(kvLenBuf[2]) << 8) | uint64(kvLenBuf[3]) 			idx += 4 			if idx+keyLen+valLen >= chunkSize { 				// Corrupted data during the load from file. Just skip it. 				atomic.AddUint64(&b.corruptions, 1) 				goto end 			} 			if string(k) == string(chunk[idx:idx+keyLen]) { // <5> 				idx += keyLen 				if returnDst { 					dst = append(dst, chunk[idx:idx+valLen]...) 				} 				found = true 			} else { 				atomic.AddUint64(&b.collisions, 1) 			} 		} 	} end: 	b.mu.RUnlock() 	if !found { 		atomic.AddUint64(&b.misses, 1) 	} 	return dst, found } </code></pre> <h4 id="总结">总结</h4> <ul> <li>fastcache的chunk内存分配方式比较好，它没有预先分配大量内存，而是动态申请的方式。其次内存申请使用了手动申请的方式(<code>mmap</code>)，以此避免GC的影响。</li> <li>fastcache的数据存储时包含了一个元数据头，元数据里面保存了该数据的数据偏移量以及k、v长度等数据，通过这种方式可以快速定位数据所在的位置。像大部分存储的WAL存储方式也是采用的这种TLV或LV方式。</li> <li>fastcache的缓存采用的是ringbuffer的方式，并没有超时机制。数据的存储和查找都是通过哈希的方式进行的，因此检索速度很快。</li> <li>fastcache的代码比较少，可以直接移植</li> </ul> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3963.htm">C++ String类的简单实现</a></p>
                                                <p>下一个：<a href="/html/category/article-3965.htm">C++ STL 中的数值算法示例讲解_C 语言</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4066.htm" title="Go汇编语法和MatrixOne使用介绍">Go汇编语法和MatrixOne使用介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-4576.htm" title="下一站是幸福贺繁星元宋分手（下一站幸福大结局）速看，">下一站是幸福贺繁星元宋分手（下一站幸福大结局）速看，</a></li>
                        <li class="py-2"><a href="/html/category/article-4575.htm" title="狗粮颗粒机家用小型（制作狗粮配方 颗粒机器）">狗粮颗粒机家用小型（制作狗粮配方 颗粒机器）</a></li>
                        <li class="py-2"><a href="/html/category/article-4057.htm" title="vue打包后整合到springboot项目、并打包成jar上传到Linux服务器运行【前后端分离开发、整体部署到Linux服务器】">vue打包后整合到springboot项目、并打包成jar上传到Linux服务器运行【前后端分离开发、整体部署到Linux服务器】</a></li>
                        <li class="py-2"><a href="/html/category/article-4048.htm" title="【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）">【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）</a></li>
                        <li class="py-2"><a href="/html/category/article-4395.htm" title="安又琪个人资料（安又琪图片 个人资料 感情生活）">安又琪个人资料（安又琪图片 个人资料 感情生活）</a></li>
                        <li class="py-2"><a href="/html/category/article-4318.htm" title="动物打疫苗去哪里预约呢（动物打疫苗去哪里预约呢）">动物打疫苗去哪里预约呢（动物打疫苗去哪里预约呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-4612.htm" title="猫咪打疫苗针要多少钱（猫咪打疫苗需要花多少钱）">猫咪打疫苗针要多少钱（猫咪打疫苗需要花多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-4050.htm" title="C ++程序实施Rabin-Miller素性测试以检查给定数字是否为素数">C ++程序实施Rabin-Miller素性测试以检查给定数字是否为素数</a></li>
                        <li class="py-2"><a href="/html/category/article-4051.htm" title="vue项目运行后自动运行浏览器（vue2/vue3）">vue项目运行后自动运行浏览器（vue2/vue3）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
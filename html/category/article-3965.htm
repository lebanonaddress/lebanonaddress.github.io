<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3965.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>C++ STL 中的数值算法示例讲解_C 语言 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">C++ STL 中的数值算法示例讲解_C 语言 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">1.iota</a></li> <li><a href="#_label1" rel="nofollow">2.accumulate</a></li> <li><a href="#_label2" rel="nofollow">3.partial_sum</a></li> <li><a href="#_label3" rel="nofollow">4.adjacent_difference</a></li> <li><a href="#_label4" rel="nofollow">5.inner_product</a></li> </ul> </div> <p>以下算法均包含在头文件 numeric 中</p> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>1.iota</h2> <p>该函数可以把一个范围内的序列从给定的初始值开始累加<br />先看用法。<br />例：<br />假设我需要一个长度为10，从5开始递增的序列</p> <div class="ay1code"> <pre class="brush:cpp;">    vector&lt;int&gt; a(10);      iota(begin(a), end(a), 5);        for (auto x : a) {          cout &lt;&lt; x &lt;&lt; " ";      }  </pre> </div> <p>输出：</p> <blockquote> <p>5 6 7 8 9 10 11 12 13 14</p> </blockquote> <p>这样就可以很方便的创建一个递增的序列，而不用使用for循环<br />此外，该函数是使用连续的支持 operator++()的 T 类型值填充序列<br />也就是说double类型也可以使用，string类型也可以使用。<br />只要是重载了++运算符的类型都可以使用。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>2.accumulate</h2> <p>曾经在算法比赛中看见别人使用accumulate函数计算出了一个数组的和。<br />觉得特别的优雅，像这样：</p> <div class="ay1code"> <pre class="brush:cpp;">    vector&lt;int&gt; a(10);      iota(begin(a), end(a), 1);        cout &lt;&lt; accumulate(begin(a), end(a), 0) &lt;&lt; "\n";  // 计算从1加到10的和，从0开始加  </pre> </div> <p>输出：</p> <blockquote> <p>55</p> </blockquote> <p>从那天起，每当我要求一个序列的和的时候，我都会使用这个方法...<br />但是今天，当我看到accumulate的源码之后：</p> <div class="ay1code"> <pre class="brush:cpp;">template &lt;class InputIterator, class T&gt;     T accumulate (InputIterator first, InputIterator last, T init)  {    while (first!=last) {      init = init + *first;  // or: init=binary_op(init,*first) for the binary_op version      ++first;    }    return init;  }  </pre> </div> <p>注意看这里：</p> <p style="text-align:center"><img decoding="async" alt="" src="//img.jbzj.com/file_images/article/202204/%0D%0A202204080826522.png"></p> <p>哇哦，它竟然还支持二元仿函数，<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.jb51.net/article/243625.htm"  target="_blank" rel="nofollow">详解C++ functional库中的仿函数使用方法</a><br />于是，我有了一个大胆的想法。<br />求一个数组的乘积</p> <div class="ay1code"> <pre class="brush:cpp;">    vector&lt;int&gt; a(10);      iota(begin(a), end(a), 1);        cout &lt;&lt; accumulate(begin(a), end(a), 1, multiplies&lt;int&gt;()) &lt;&lt; "\n";  // 计算从1加到10的乘积，从1开始乘  </pre> </div> <p>输出：</p> <blockquote> <p>3628800</p> </blockquote> <p>同理，还可以求数组的减，数组的除，数组的模????</p> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>3.partial_sum</h2> <p>这个函数可以用来求前缀和，前缀和指一个数组的某下标之前的所有数组元素的和（包含其自身）。</p> <p>例如，1、2、3、4、5的前缀和数组为 1 3 6 10 15</p> <div class="ay1code"> <pre class="brush:cpp;">    vector&lt;int&gt; a(5);      iota(begin(a), end(a), 1);        partial_sum(begin(a), end(a), begin(a)); // 求a的前缀和，赋值给a数组（第三个参数）        for (auto x : a) {          cout &lt;&lt; x &lt;&lt; " ";      }  </pre> </div> <p>输出：</p> <blockquote> <p>1 3 6 10 15</p> </blockquote> <p>有了上一个函数的经验，我们还可以求一个数组的前缀乘、除等</p> <p>例：</p> <div class="ay1code"> <pre class="brush:cpp;">    partial_sum(begin(a), end(a), begin(a), multiplies&lt;int&gt;());  </pre> </div> <p>输出：</p> <blockquote> <p>1 2 6 24 120</p> </blockquote> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>4.adjacent_difference</h2> <p>这个函数可以对一个序列里相邻两个元素进行运算，通过differerce这个词可以看出来，默认是计算相邻两元素的差</p> <div class="ay1code"> <pre class="brush:cpp;">vector&lt;int&gt; a{1, 4, 5, 100, 40};    adjacent_difference(begin(a), end(a), begin(a)); // 求a数组相邻元素的差，赋值给a数组（第三个参数）    for (auto x : a) {      cout &lt;&lt; x &lt;&lt; " ";  }  </pre> </div> <p>输出：</p> <blockquote> <p>1 3 1 95 -60</p> </blockquote> <p>今天我想计算相邻两元素的乘积</p> <div class="ay1code"> <pre class="brush:cpp;">adjacent_difference(begin(a), end(a), begin(a), multiplies&lt;int&gt;());  </pre> </div> <p>输出：</p> <p>1 4 20 500 4000</p> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>5.inner_product</h2> <p>这个函数默认情况下可以求序列中每个元素的内积之和：</p> <div class="ay1code"> <pre class="brush:cpp;">    vector&lt;int&gt; a(3);      iota(begin(a), end(a), 1);        cout &lt;&lt; inner_product(begin(a), end(a), begin(a), 10) &lt;&lt; "\n"; // 从初值10开始加上序列各元素的内积  </pre> </div> <p>输出：</p> <blockquote> <p>24</p> </blockquote> <p>还可以用来求两个序列元素两两相乘再相加的结果</p> <div class="ay1code"> <pre class="brush:cpp;">    vector&lt;int&gt; a{1, 2, 3};      vector&lt;int&gt; b{2, 3, 4};        // 1 * 2 + 2 * 3 + 3 * 4      cout &lt;&lt; inner_product(begin(a), end(a), begin(b), 0) &lt;&lt; "\n";  </pre> </div> <p>输出：</p> <blockquote> <p>20</p> </blockquote> <p>此外，还可以通过仿函数来替代上述的两个操作符 + 和 *</p> <div class="ay1code"> <pre class="brush:cpp;">    vector&lt;int&gt; a{1, 2, 3};      vector&lt;int&gt; b{2, 3, 4};        cout &lt;&lt; inner_product(begin(a), end(a), begin(b), 1                          , multiplies&lt;int&gt;(), minus&lt;int&gt;()) &lt;&lt; "\n";                              // 原来的加法 +  // 原来的乘法 *                              // 计算 (1 - 2) * (2 - 3) * (3 - 4) = -1  </pre> </div> <p>输出：</p> <blockquote> <p>-1</p> </blockquote> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3964.htm">分析fastcache和freecache(一)_在线工具</a></p>
                                                <p>下一个：<a href="/html/category/article-3966.htm">Java中的守护程序线程和用户线程之间的区别</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4047.htm" title="springboot关于mysql数据库date时间的坑">springboot关于mysql数据库date时间的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-4011.htm" title="光的偏振">光的偏振</a></li>
                        <li class="py-2"><a href="/html/category/article-4058.htm" title="TS语言与JS语言的区别">TS语言与JS语言的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-4024.htm" title="网络协议之:socket协议详解之Unix domain Socket">网络协议之:socket协议详解之Unix domain Socket</a></li>
                        <li class="py-2"><a href="/html/category/article-4007.htm" title="C++的命名空间">C++的命名空间</a></li>
                        <li class="py-2"><a href="/html/category/article-4012.htm" title="修改docker 默认镜像存储路径">修改docker 默认镜像存储路径</a></li>
                        <li class="py-2"><a href="/html/category/article-4046.htm" title="Vue  el-input  trim() 去空格">Vue  el-input  trim() 去空格</a></li>
                        <li class="py-2"><a href="/html/category/article-4045.htm" title="在UNIX_TIMESTAMP()或FROM_UNIXTIME()函数中传递超出范围的值时，将返回什么MySQL？">在UNIX_TIMESTAMP()或FROM_UNIXTIME()函数中传递超出范围的值时，将返回什么MySQL？</a></li>
                        <li class="py-2"><a href="/html/category/article-4049.htm" title="JAVA初始化自定义类的数组">JAVA初始化自定义类的数组</a></li>
                        <li class="py-2"><a href="/html/category/article-4044.htm" title="python2字符串编码方式_一、基础部分-2.字符串编码">python2字符串编码方式_一、基础部分-2.字符串编码</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">58</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
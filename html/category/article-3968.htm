<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3968.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>FP-growth算法以及代码实现 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">FP-growth算法以及代码实现 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2>FP-growth算法以及代码实现</h2> <p><strong>FP-growth算法介绍</strong><br /> FP-growth算法，它被用于挖掘频繁项集，它把数据集存储为一个叫FP树的数据结构里，这样可以更高效地发现频繁项集或频繁项对。</p> <p><strong>FP树</strong><br /> FP即Frequent Pattern，FP树看上去就是一棵前缀树，根节点是空集，结点上是单个元素，保存了它在数据集中的出现次数，出现次数越多的元素越接近根。此外，结点之间通过链接（link）相连，只有相似元素会被连起来，连起来的元素又可以看成链表。同一个元素可以在FP树中多次出现，根据位置不同，对应着不同的频繁项集。可以为FP树设置最小支持度，过滤掉出现次数太少的元素。<br /> FP树每个结点上都是一个单独的元素，及其在路径中的出现次数。</p> <p><strong>构建FP树</strong><br /> 1.遍历一次数据集，统计每个元素出现的次数，然后把出现次数较小的滤掉，然后对每个样本按照元素出现次数重排序<br /> 2.构造FP树。从根节点∅开始，将过滤并排序后的样本一个个加入树中，若FP树不存在现有元素则添加分支，若存在则增加相应的值。</p> <p>每个样本都是排序过的，频数高的频繁项集在前面，它总是更接近根结点，所以也可以把每个样本看成一棵子树，而我们要做的就是把子树添加到FP树里</p> <p><strong>FP树构建实例</strong><br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/8997a38616092cdcadd727bd2b7cc8b2.jpg"><br /> 根据此数据集构造的FP树为：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/c5b95874b7b6b51c5983459c22b72f16.jpg"><br /><strong>从FP树挖掘频繁项集</strong><br /> 步骤如下：<br /> 1.从FP树提取条件模式基<br /> 2.用条件模式基构造FP树<br /> 3.重复1和2直到树只包含一个元素<br /><strong>提取条件模式基</strong><br /> 条件模式基（conditional pattern base）定义为以所查找元素为结尾的所有前缀路径（prefix path）的集合。我们要做的就是从header列表开始，针对每一个频繁项，都查找其对应的条件模式基。<br /> 上述实例路径：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/87284c4fd6432b801db05ca6f49b05ae.jpg"><br /> 频繁项集：<br /><img decoding="async" alt="在这里插入图片描述" src="http://img.555519.xyz/uploads3/20220723/9238b527667e5c1550aba0db8430a56a.jpg"><br /><strong>代码实现</strong></p> <pre><code class="prism language-python"><span class="token keyword">class</span><span class="token class-name">treeNode</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nameValue<span class="token punctuation">,</span> numOccur<span class="token punctuation">,</span> parentNode<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>name<span class="token operator">=</span> nameValue         self<span class="token punctuation">.</span>count<span class="token operator">=</span> numOccur         self<span class="token punctuation">.</span>nodeLink<span class="token operator">=</span><span class="token boolean">None</span>         self<span class="token punctuation">.</span>parent<span class="token operator">=</span> parentNode         self<span class="token punctuation">.</span>children<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">def</span><span class="token function">inc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numOccur<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>count<span class="token operator">+=</span> numOccur<span class="token keyword">def</span><span class="token function">disp</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ind<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  '</span><span class="token operator">*</span> ind<span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token keyword">for</span> child<span class="token keyword">in</span> self<span class="token punctuation">.</span>children<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             child<span class="token punctuation">.</span>disp<span class="token punctuation">(</span>ind<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 当出现两个或两个以上的相似项时，找到最后一个相似项的实例，让该实例的self.nodeLink属性保存新出现的相似项</span><span class="token comment"># 效果如同是在一条链的最后一个节点后再接入一个节点，这些链就是self.nodeLink</span><span class="token keyword">def</span><span class="token function">updateHeader</span><span class="token punctuation">(</span>nodeToTest<span class="token punctuation">,</span> targetNode<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> nodeToTest<span class="token punctuation">.</span>nodeLink<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>         nodeToTest<span class="token operator">=</span> nodeToTest<span class="token punctuation">.</span>nodeLink     nodeToTest<span class="token punctuation">.</span>nodeLink<span class="token operator">=</span> targetNode<span class="token comment"># 接收处理好的事务列表，画出FP树</span><span class="token keyword">def</span><span class="token function">updateFPtree</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> inTree<span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">in</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">:</span><span class="token comment"># 判断items的第一个结点是否已作为子结点</span>         inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>inc<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment"># 创建新的分支</span>         inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> treeNode<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> inTree<span class="token punctuation">)</span><span class="token comment"># 更新相应频繁项集的链表，往后添加</span><span class="token keyword">if</span> headerTable<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">None</span><span class="token punctuation">:</span>             headerTable<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>             updateHeader<span class="token punctuation">(</span>headerTable<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 递归</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>         updateFPtree<span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inTree<span class="token punctuation">.</span>children<span class="token punctuation">[</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token comment"># 输入字典格式的事务和最小支持度，返回FP树和项头表</span><span class="token keyword">def</span><span class="token function">createFPtree</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">,</span> minSup<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     headerTable<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">for</span> trans<span class="token keyword">in</span> dataSet<span class="token punctuation">:</span><span class="token keyword">for</span> item<span class="token keyword">in</span> trans<span class="token punctuation">:</span>             headerTable<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span> headerTable<span class="token punctuation">.</span>get<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span> dataSet<span class="token punctuation">[</span>trans<span class="token punctuation">]</span><span class="token keyword">for</span> k<span class="token keyword">in</span><span class="token builtin">list</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator"><</span> minSup<span class="token punctuation">:</span><span class="token keyword">del</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 删除不满足最小支持度的元素</span>     freqItemSet<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 满足最小支持度的频繁项集</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>freqItemSet<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token keyword">for</span> k<span class="token keyword">in</span> headerTable<span class="token punctuation">:</span>         headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>headerTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token comment"># element: [count, node]</span>     retTree<span class="token operator">=</span> treeNode<span class="token punctuation">(</span><span class="token string">'Null Set'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">for</span> tranSet<span class="token punctuation">,</span> count<span class="token keyword">in</span> dataSet<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         localD<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">for</span> item<span class="token keyword">in</span> tranSet<span class="token punctuation">:</span><span class="token keyword">if</span> item<span class="token keyword">in</span> freqItemSet<span class="token punctuation">:</span><span class="token comment"># 过滤，只取该样本中满足最小支持度的频繁项</span>                 localD<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">=</span> headerTable<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># element : count</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>localD<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span><span class="token comment"># 根据全局频数从大到小对单样本排序</span>             orderedItem<span class="token operator">=</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> v<span class="token keyword">in</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>localD<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#print('orderItems=', orderedItem)</span><span class="token comment"># 用过滤且排序后的样本更新树</span>             updateFPtree<span class="token punctuation">(</span>orderedItem<span class="token punctuation">,</span> retTree<span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token keyword">return</span> retTree<span class="token punctuation">,</span> headerTable<span class="token comment"># 构造成 element : count 的形式，以字典形式输出</span><span class="token keyword">def</span><span class="token function">createInitSet</span><span class="token punctuation">(</span>dataSet<span class="token punctuation">)</span><span class="token punctuation">:</span>     retDict<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">for</span> trans<span class="token keyword">in</span> dataSet<span class="token punctuation">:</span>         trans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'，'</span><span class="token punctuation">)</span>         key<span class="token operator">=</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token keyword">if</span> key<span class="token keyword">in</span> retDict<span class="token punctuation">:</span>             retDict<span class="token punctuation">[</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>             retDict<span class="token punctuation">[</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">return</span> retDict<span class="token comment"># 递归回溯，找到给定节点往上回溯到根节点的路径，并把路径存到列表中</span><span class="token keyword">def</span><span class="token function">ascendFPtree</span><span class="token punctuation">(</span>leafNode<span class="token punctuation">,</span> prefixPath<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> leafNode<span class="token punctuation">.</span>parent<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>         prefixPath<span class="token punctuation">.</span>append<span class="token punctuation">(</span>leafNode<span class="token punctuation">.</span>name<span class="token punctuation">)</span>         ascendFPtree<span class="token punctuation">(</span>leafNode<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> prefixPath<span class="token punctuation">)</span><span class="token comment"># 找到给定元素名称的条件模式基，以字典格式存贮</span><span class="token keyword">def</span><span class="token function">findPrefixPath</span><span class="token punctuation">(</span>basePat<span class="token punctuation">,</span> myHeaderTab<span class="token punctuation">)</span><span class="token punctuation">:</span>     treeNode<span class="token operator">=</span> myHeaderTab<span class="token punctuation">[</span>basePat<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># basePat在FP树中的第一个结点</span>     condPats<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token keyword">while</span> treeNode<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>         prefixPath<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>         ascendFPtree<span class="token punctuation">(</span>treeNode<span class="token punctuation">,</span> prefixPath<span class="token punctuation">)</span><span class="token comment"># prefixPath是倒过来的，从treeNode开始到根</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>prefixPath<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>             condPats<span class="token punctuation">[</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span>prefixPath<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span> treeNode<span class="token punctuation">.</span>count<span class="token comment"># 关联treeNode的计数</span>         treeNode<span class="token operator">=</span> treeNode<span class="token punctuation">.</span>nodeLink<span class="token comment"># 下一个basePat结点</span><span class="token keyword">return</span> condPats<span class="token keyword">def</span><span class="token function">mineFPtree</span><span class="token punctuation">(</span>inTree<span class="token punctuation">,</span> headerTable<span class="token punctuation">,</span> minSup<span class="token punctuation">,</span> preFix<span class="token punctuation">,</span> freqItemList<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 最开始的频繁项集是headerTable中的各元素</span>     bigL<span class="token operator">=</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> v<span class="token keyword">in</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>headerTable<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> p<span class="token punctuation">:</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 根据频繁项的总频次排序</span><span class="token comment">#print("bigL:  ",bigL)</span><span class="token keyword">for</span> basePat<span class="token keyword">in</span> bigL<span class="token punctuation">:</span><span class="token comment"># 对每个频繁项</span>         newFreqSet<span class="token operator">=</span> preFix<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>         newFreqSet<span class="token punctuation">.</span>add<span class="token punctuation">(</span>basePat<span class="token punctuation">)</span>         freqItemList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>newFreqSet<span class="token punctuation">)</span>         condPattBases<span class="token operator">=</span> findPrefixPath<span class="token punctuation">(</span>basePat<span class="token punctuation">,</span> headerTable<span class="token punctuation">)</span><span class="token comment"># 当前频繁项集的条件模式基</span>         myCondTree<span class="token punctuation">,</span> myHead<span class="token operator">=</span> createFPtree<span class="token punctuation">(</span>condPattBases<span class="token punctuation">,</span> minSup<span class="token punctuation">)</span><span class="token comment"># 构造当前频繁项的条件FP树</span><span class="token keyword">if</span> myHead<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>             mineFPtree<span class="token punctuation">(</span>myCondTree<span class="token punctuation">,</span> myHead<span class="token punctuation">,</span> minSup<span class="token punctuation">,</span> newFreqSet<span class="token punctuation">,</span> freqItemList<span class="token punctuation">)</span><span class="token comment"># 递归挖掘条件FP树</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>     parsedDat<span class="token operator">=</span><span class="token punctuation">[</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line<span class="token keyword">in</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'FPGrowth_datasets/shopping_cart.csv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>     initSet<span class="token operator">=</span> createInitSet<span class="token punctuation">(</span>parsedDat<span class="token punctuation">)</span>     myFPtree<span class="token punctuation">,</span> myHeaderTab<span class="token operator">=</span> createFPtree<span class="token punctuation">(</span>initSet<span class="token punctuation">)</span>     myFPtree<span class="token punctuation">.</span>disp<span class="token punctuation">(</span><span class="token punctuation">)</span>     myFreqList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     mineFPtree<span class="token punctuation">(</span>myFPtree<span class="token punctuation">,</span> myHeaderTab<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myFreqList<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"频繁项集的数量是: %s"</span><span class="token operator">%</span><span class="token builtin">len</span><span class="token punctuation">(</span>myFreqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item<span class="token keyword">in</span> myFreqList<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre> </div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3967.htm">pymysql执行有参数的in语句</a></p>
                                                <p>下一个：<a href="/html/category/article-3969.htm">简单聊一聊Vue3组件更新过程_vue.js</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6087.htm" title="为什么给猫***扎不进去（为什么猫咪***不怕疼）">为什么给猫***扎不进去（为什么猫咪***不怕疼）</a></li>
                        <li class="py-2"><a href="/html/category/article-4429.htm" title="合肥猫咪领养微信群 合肥猫咪领养微信群号">合肥猫咪领养微信群 合肥猫咪领养微信群号</a></li>
                        <li class="py-2"><a href="/html/category/article-6043.htm" title="东北农村房间(东北农村室内)">东北农村房间(东北农村室内)</a></li>
                        <li class="py-2"><a href="/html/category/article-5981.htm" title="兰州狗粮批发市场地址电话（兰州卖狗粮的地方）">兰州狗粮批发市场地址电话（兰州卖狗粮的地方）</a></li>
                        <li class="py-2"><a href="/html/category/article-6218.htm" title="外卖预制菜十大品牌">外卖预制菜十大品牌</a></li>
                        <li class="py-2"><a href="/html/category/article-4504.htm" title="宠物领养平台有哪几个品牌名称（宠物领养平台有哪几个品牌名称好听）">宠物领养平台有哪几个品牌名称（宠物领养平台有哪几个品牌名称好听）</a></li>
                        <li class="py-2"><a href="/html/category/article-6732.htm" title="动物医院简笔画（动物医院海报）">动物医院简笔画（动物医院海报）</a></li>
                        <li class="py-2"><a href="/html/category/article-4349.htm" title="宠物粮食哪里批发便宜点呢（宠物粮从哪里进货便宜）">宠物粮食哪里批发便宜点呢（宠物粮从哪里进货便宜）</a></li>
                        <li class="py-2"><a href="/html/category/article-7100.htm" title="做猫粮的机器（做猫粮的机器多少钱）">做猫粮的机器（做猫粮的机器多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-6594.htm" title="动物医疗器械市场（动物医疗设备）">动物医疗器械市场（动物医疗设备）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3982.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>用RxJS和react开发mac地址输入框 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">用RxJS和react开发mac地址输入框 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> 项目简介</li> <li><i class="be be-arrowright"></i> RxJS简介</li> <li><i class="be be-arrowright"></i> 项目结构</li> <li><i class="be be-arrowright"></i> 项目详解</li> <li><i class="be be-arrowright"></i> 170624更新</li> </ul><span class="log-zd"><span class="log-close"><i class="be be-cross"></i><strong>目录</strong></span></span></div>  			</div> <div id="content_views" class="htmledit_views"> <div class="article fmt article__content"> <span class="directory"></span><h4 id="title-0">项目简介</h4> <p>本次使用了RxJS和react开发了一个mac地址输入框，主要实现的功能有限制输入符合条件的字符1-9,a-f,并每隔两位可以自动添加用于分割的冒号。项目屏蔽了react的事件处理，同时使用setSelectionRange来手动控制光标。可以查看项目的demo,项目地址</p> <span class="directory"></span><h4 id="title-1">RxJS简介</h4> <p>RxJS 是 Reactive Extensions 在 JavaScript 上的实现，具体来说是一系列工具库，包括事件处理，函数节流，延时等函数，RxJS应用了’流‘的思想，同时具有事件和时间的概念。RxJS也可以用于处理异步流程，比起Promise具有可取消和可延迟，重试等优点。Promise vs Observable<br />RxJS中有两个比较重要的概念，分别是Observable和observer。Observable可以使用create,of,from,fromEvent等方法来产生流，而Observer可以对流进行观察。最后两者通过subscribe来结合,例子如下：</p> <pre><code class="javascript"> var Observable = Rx.Observable.create(observer => {     observer.next(2);     observer.complete();     return  () => console.log('disposed'); });  var Observer = Rx.Observer.create(     x => console.log('Next:', x),     err => console.log('Error:', err),     () => console.log('Completed') );  var subscription = Observable.subscribe(Observer); </code></pre> <p>来自构建流式应用—RxJS详解</p> <p>更多关于RxJS,可以阅读Introduction | RxJS - Javascript library for functional reactive programming.</p> <span class="directory"></span><h4 id="title-2">项目结构</h4> <pre><code class="javascript">     // 监听事件，发起流和处理流     componentDidMount () {     this.t = ReactDOM.findDOMNode(this.refs.t)     let keydownValue = Rx.Observable.fromEvent(this.t,'keydown').map(e => e.key.toUpperCase())     this.sa = keydownValue.filter(value => value.length === 1 && value.match(/[0-9A-F]/)).subscribe(value => {this.setColon('before');this.insertValue(value); this.setColon();this.setDomValue()})     // 省略类似的部分     }     // 取消订阅     componentWillUnmount()      this.sa.dispose()     // 类似的部分省略     }          // 一些用到的方法,这里省略               // 取消原生的事件监听     render() {       return (         <div className="App">           <input type="text" onKeyDown={e => e.preventDefault()}  ref="t"/>         </div>       );     }       </code></pre> <span class="directory"></span><h4 id="title-3">项目详解</h4> <p>首先使用Rx.Observable.fromEvent来监听输入框的按键事件，并获取按键的key值，保存为keydownValue</p> <pre><code class="javascript"> let keydownValue = Rx.Observable.fromEvent(this.t,'keydown')  .map(e => e.key.toUpperCase())</code></pre> <p>接着首先考虑输入字符的情况,在这里，显示筛选出按键符合要求的情况，接着在subscribe中对数据进行处理。在插入新的字符之前和之后，都需要判断是否在前面加上冒号，最后使用setDomValue来让保存在state中的value显示到输入框上。</p> <pre><code class="javascript">    this.sa = keydownValue         .filter(value => value.length === 1 && value.match(/[0-9A-F]/))         .subscribe(value => {           this.setColon('before');           this.insertValue(value);            this.setColon();           this.setDomValue()         })</code></pre> <p>判断是否需要插入冒号的函数setColon,需要排除前面没有字符和周围已经有冒号的情况。</p> <pre><code class="javascript">  setColon = type => this.state.value.length &&        (type !== 'before' ? !this.isNearColon() : !this.isLastColon()) &&        !(this.state.value.slice(0, this.state.pos).replace(/:/g, '').length%2) &&        this.insertValue(':') </code></pre> <p>插入新字符的函数。在记录的光标位置pos值上插入新的字符，然后改变光标位置。如果在字符末尾有未完成的字符对(即1f:的形式)又在中间插入新的字符串且字符对已经到达六个，则删掉最后一个字符对。</p> <pre><code class="javascript">  insertValue = value => {     if (this.state.value.length !== 17) {       this.setState({       ...this.state,       value: this.state.value.slice(0, this.state.pos) +          value + this.state.value.slice(this.state.pos, this.state.value.length)       })       this.setPos(this.state.pos + 1)       if (this.state.value.split(':').length === 7) {         this.setState({         ...this.state,          value: this.state.value.slice(0, this.state.value.lastIndexOf(':'))         })       }   }}</code></pre> <p>接着是讲解关于删除的流，筛选按键值为'BACKSPACE'的流，执行deleteValue方法和setDomValue</p> <pre><code class="javascript">    this.sb = keydownValue.filter(value => value === 'BACKSPACE')     .subscribe(() => {       this.deleteValue()       this.setDomValue()     })</code></pre> <p>deleteValue,在value和位置都大于零时才执行，如果删除后字符后，新的最后一个字符是冒号，则自动删掉该冒号。</p> <pre><code class="javascript">  deleteValue = () => {     if (this.state.value.length && this.state.pos) {       this.setState({       ...this.state,        value: this.state.value.slice(0, this.state.pos - 1) +        this.state.value.slice(this.state.pos, this.state.value.length)       })       this.setPos(this.state.pos - 1)       if (this.isLastColon()) {         this.deleteValue()       }     }   }</code></pre> <p>接着是订阅了左右方向键移动的流，比较简单，就不详细解释了。</p> <pre><code class="javascript">    this.sc = keydownValue         .filter(value => value === 'ARROWLEFT')         .subscribe(() => this.moveLeft())     this.sd = keydownValue         .filter(value => value === 'ARROWRIGHT')         .subscribe(() => this.moveRight())         moveLeft = () => this.state.pos > 0 &&        this.setState({...this.state, pos: this.state.pos - 1})       moveRight = () => this.state.pos !== this.state.value.length &&        this.setState({...this.state, pos: this.state.pos + 1})</code></pre> <p>最后是让光标跳到pos的处理,setSelectionRange本用于文字的选择，但如果前两个参数为一样的数值，可以达到让光标跳到指定位置的效果。</p> <pre><code class="javascript">    this.se = keydownValue.subscribe(() => this.goPos())     goPos = () => this.t.setSelectionRange(this.state.pos, this.state.pos)</code></pre> <hr/> <span class="directory"></span><h4 id="title-4">170624更新</h4> <p>原本的模式跟react关系较少，因此修改调整了一下，主要的变化是启用了Subject,setStateAsync，在这里先介绍一下。</p> <h5>Rx.Subject</h5> <p>Subject继承于Obserable和Observer,因此同时具有Obserable和Observer两者的方法。通过来自于Observable的multicast方法可以挂载subject，并得到拥有相同执行环境的多路的新的Observable，关于他的订阅实际上是挂载在subject上。最后需要手动connect。 RxJS 核心概念之Subject，30 天精通 RxJS(24): Observable operators - multicast, refCount, publish, share</p> <pre><code class="javascript">var source = Rx.Observable.from([1, 2, 3]); var multicasted = source.multicast(new Rx.Subject())  // 通过`subject.subscribe({...})`订阅Subject的Observer： multicasted.subscribe({   next: (v) => console.log('observerA: ' + v) }); multicasted.subscribe({   next: (v) => console.log('observerB: ' + v) });  // 让Subject从数据源订阅开始生效： multicasted.connect();</code></pre> <p>其实可以用refCount来避免connect,用publish来代替 <code>multicast(new Rx.Subject())</code>,最后用share代替publish 和 refCount，因此代码可以写成</p> <pre><code class="javascript">var multicasted = source.share() </code></pre> <h5>setStateAsync</h5> <p>组件改为受控组件之后，setState中的异步特性展示了出来，setState后的下一步获取setState并不是最新的state，影响了程序的正常使用。<br />例如之前的新增函数的订阅。后面的inserValue和setColon都是需要利用最新的state来进行判断的。</p> <pre><code class="js">    this.sa = keydownValue       .filter(value => value.length === 1 && value.match(/[0-9A-F]/))         .subscribe(value => {           this.setColon('before');           this.insertValue(value);            this.setColon();           this.setDomValue()         })</code></pre> <p>可以在setState的第二个参数中传入回调函数来解决这个问题,于是函数变成了这样，一层又一层的回调，十分不美观</p> <pre><code class="js">this.sa = keydownValue   .filter(value => value.length === 1 && value.match(/[0-9A-F]/))     .subscribe(value => {       this.setColon('before', () => {         this.insertValue(value, () => {           this.setColon()         })       })     })     </code></pre> <p>接着在网上找到了setStateAsync的函数,原理就是将setState转换成promise的形式，接着就能愉快的使用async await的语法来修改state了。React中setState同步更新策略</p> <pre><code class="js">  setStateAsync = state => new Promise(resolve => this.setState(state,resolve))</code></pre> <h5>实际的调整</h5> <p>在componentDidMount中把keydownValue设置为同时具有Observable和Observe的方法的Subject，他一方面可以使用Observer的onNext方法来添加新的数据，另一方面可以继续使用Observable的操作符来对数据进行处理。</p> <pre><code class="js">this.keydownValue = new Rx.Subject() let multicasted = this.keydownValue.map(e => e.key.toUpperCase()).share() this.sa = multicasted   .filter(value => value.length === 1 && value.match(/[0-9A-F]/))     .subscribe(async value => {     await this.setColon('before')     await this.insertValue(value)     await this.setColon()     this.goPos()   }) //下略    </code></pre> <p>组件的render函数修改为</p> <pre><code class="js">  <div className="App">       <input type="text" onKeyDown={this.handleE} value={this.state.value} ref="t"/>   </div></code></pre> <p>handleE函数继续禁止默认事件，调用了新设置的Subject（keydownValue）的onNext方法，可以使得绑定在keydownValue上的订阅获得数据</p> <pre><code class="js">  handleE = e => {e.preventDefault();this.keydownValue.onNext(e)}</code></pre> </div></div> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3981.htm">Hadoop核心架构与安装_在线工具</a></p>
                                                <p>下一个：<a href="/html/category/article-3983.htm">VUE 实现下拉分页加载更多功能</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4058.htm" title="TS语言与JS语言的区别">TS语言与JS语言的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-4038.htm" title="[Go实战]一个简单的主进程不退出(阻塞方法) 测试方案">[Go实战]一个简单的主进程不退出(阻塞方法) 测试方案</a></li>
                        <li class="py-2"><a href="/html/category/article-4149.htm" title="CompletableFuture的使用介绍, CompletableFuture与FutureTask的区别">CompletableFuture的使用介绍, CompletableFuture与FutureTask的区别</a></li>
                        <li class="py-2"><a href="/html/category/article-4053.htm" title="Autograd：Pytorch 中的自动微分机制讲解">Autograd：Pytorch 中的自动微分机制讲解</a></li>
                        <li class="py-2"><a href="/html/category/article-4094.htm" title="var、function、let、const 的区别及变量提升">var、function、let、const 的区别及变量提升</a></li>
                        <li class="py-2"><a href="/html/category/article-5595.htm" title="猫抓后多少天过危险期（猫抓后多久发病）">猫抓后多少天过危险期（猫抓后多久发病）</a></li>
                        <li class="py-2"><a href="/html/category/article-4051.htm" title="vue项目运行后自动运行浏览器（vue2/vue3）">vue项目运行后自动运行浏览器（vue2/vue3）</a></li>
                        <li class="py-2"><a href="/html/category/article-4576.htm" title="下一站是幸福贺繁星元宋分手（下一站幸福大结局）速看，">下一站是幸福贺繁星元宋分手（下一站幸福大结局）速看，</a></li>
                        <li class="py-2"><a href="/html/category/article-4065.htm" title="Zookeeper分布式一致性协议ZAB">Zookeeper分布式一致性协议ZAB</a></li>
                        <li class="py-2"><a href="/html/category/article-4049.htm" title="JAVA初始化自定义类的数组">JAVA初始化自定义类的数组</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3986.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Java基础之浅谈继承、多态 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Java基础之浅谈继承、多态 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h1 id="一继承的理解">一、继承的理解</h1> <ul> <li>继承：简单通俗的来讲，继承就是一个类继承另一个类，通常用extends表示继承。</li> <li>继承的类叫子类，被继承的类叫父类。</li> <li>子类可以使用父类的变量和方法，同时也可以重写父类的方法。</li> <li>在Java中没有多继承这一概念，但是有类似多继承的方法！(通常来讲一个父类可以有多个子类，而一个子类只能有一个父类)</li> </ul> <pre><code>//继承简单表示 public class Son extends Father{ //将特殊的方法放在子类中 } class Father { //我们通常将一般的方法放在父类中，因为父类的方法子类都可以用。 }</code></pre> <h1 id="二superthisinstanceof关键字">二、super、this、instanceof关键字</h1> <h2 id="this">this</h2> <ul> <li>上一篇文章已经说过了方法重写的概念，在这里就不再重复了。</li> <li>this关键字也在上一篇讲过，我们可以在构造器中通过this()来调用本类的不同参数构造器。通常我们都写在第一行！</li> <li>还可以通过<code>this.变量</code>的方式表示使用的是本类的变量</li> </ul> <h2 id="super">super</h2> <ul> <li>super关键字就是在继承中应用的，我们可以通过super()调用父类的不同参数构造器</li> <li>同时还可以通过<code>super.方法</code>，调用父类的方法。</li> <li>同时它也是写在第一行！</li> <li>通常使用super是因为子类继承了父类，这样子类就不必要在写一些成员变量，直接在构造器中通过super()调用父类的构造器，将参数初始化即可。</li> </ul> <pre><code>public class Son extends Father{     Son(String name, int age) {         super(name, age);//如果子类的构造器没有显示的调用父类的构造器，则将默认的调用父类的无参构造。     } } class Father {     String name;     int age;     Father(String name,int age) {         this.name = name;         this.age = age;     } } //若父类中没有无参构造，而子类构造器中又没有调用父类的其它构造器，则Java编译器会报错。</code></pre> <blockquote> <p>对于继承简言之就是：父类有的子类都有，父类没有的子类也可以有</p> </blockquote> <h2 id="instanceof">instanceof</h2> <pre><code>public void instanceOf(Animal T) {         if(T instanceof Dog) { //我们传进来的dog就是此时的T，通过instanceof检测它是否属于Dog或者Animal，可以判断对象的类型。 //此时的语句应该是这样的 Animal T = new Dog(); 而我们应该将T向下转型             t = (Dog) T;             System.out.println("yes");         }     }</code></pre> <pre><code>        Animal dog = new Dog();         Animal cat = new Cat();         cat.instanceOf(dog);//程序将输出"yes"</code></pre> <h1 id="三多态">三、多态</h1> <ul> <li>多态是在继承的基础上实现的。也称之为(向上转型)</li> <li>大家只需要记住对于成员变量：编译看左边，运行也看左边。</li> <li>而对于方法：则是编译看左边，运行看右边。</li> </ul> <pre><code>public class Animal {     public void play() {         System.out.println("玩");     }     public void eat() {         System.out.println("吃");     } }</code></pre> <pre><code>public class Cat extends Animal{     public void eat() {         System.out.println("猫吃饭，亲密度+8");     }     public void play() {         System.out.println("撸猫，体力值-9");     } }</code></pre> <pre><code>public class Test {     public static void main(String[] args) {         Animal cat = new Cat();//此时cat被看成是Animal的对象，但实际上本质是Cat的。 //在编译阶段我们看左边，它是Animal骗过编译器，但真正运行的时候它会看右边。         cat.eat();         cat.play(); //最终输出“猫吃饭，亲密度+8”和“撸猫，体力值-9”。这就是多态的应用 //看右边，就是先去寻找Cat中是否有重写的父类方法，如果有则调用自己的。如果没有则用父类的。 //可以记为：先调子类，再调父类。     } }</code></pre> <p><code>Animal cat = new Cat();这也是向上转型，将Cat类的转成了Animal</code></p> <h2 id="31abstract">3.1abstract</h2> <ul> <li>抽象类：使用abstract关键字</li> <li>抽象类中的方法不需要实现，只需要声明占一个位置就行。我们可以在子类中去具体实现这个方法。</li> <li>这样更有灵活性，就像我们定义了一个抽象方法eat()，而不同的子类可以去实现成不同的方法，猫可以实现吃鱼，狗可以实现吃翔，使程序更加简单化。</li> <li>抽象类无法实例化，也就不能造对象了。</li> </ul> <h2 id="32权限修饰">3.2权限修饰</h2> <ol> <li>再次总结权限修饰范围</li> <li>仅对本类可见————private</li> <li>对外部完全可见————public</li> <li>对本包和所有子类可见————protected</li> <li>对本包可见————缺省，也就使默认的</li> </ol> <h1 id="四objcet">四、Objcet</h1> <ul> <li>Object是所有类的父类</li> <li>既是没有明显写出继承Object，但也默认认为Object是父类</li> </ul> <h2 id="41equals方法">4.1equals方法</h2> <ul> <li>Object类中的equals()方法比较的是内存地址，通常我们都会重写equals()方法，达到值比较的目的。</li> <li>getClass方法将返回一个对象所属的类。我们可以通过它检测两个对象是否属于同一个类。</li> </ul> <blockquote> <p>Java规范要求equals方法具有下面的特性：<br /> 1.自反性：对于任何非空引用x，x.equals(x)应该返回true。<br /> 2.对称性：对于任何引用x和y，当且仅当y.equals(x)返回true时，x.equals(y)返回true。<br /> 3.传递性：对于任何引用x、y和z，如果x.equals(y)返回true，y.equals(z)返回true，则x.equals(z)也应该为true。<br /> 4.一致性：如果x和y引用的对象没有发生变化，反复调用x.equals(y)应该返回同样的结果。<br /> 5.对于任意非空引用x，x.equals(null)应该返回false。</p> </blockquote> <ul> <li>但是对于一个e是Employee对象，m是Manager对象，并且两个对象的值都是相同的。如果调用e.equals(m)则返回true。若反过来调用m.equals(e)则返回false。这就违反了我们的对称性。</li> <li>因为我们用的是instanceof检测的，但是<strong>子类instanceof父类</strong>是无法进行的。所以这也是instanceof的缺点</li> <li>我们可以通过getClass来比较两个对象是否属于同一个类，但是这样也有限制，就是多态的情况下返回false。<br /><strong>如何正确重写equals方法：</strong></li> <li>比较常见的两种重写方法： <ul> <li>用<code>instanceof</code>实现重写<code>equals</code>方法</li> <li>用<code>getClass</code>实现重写<code>equals</code>方法</li> </ul> </li> </ul> <pre><code>class Son extends Father{     public static void main(String[] args) {         Son son = new Son();         Father father = new Father();         Father sss = new Son();         System.out.println(father.equals(son));      } } class Father{     public boolean equals(Object obj) {         if(this == obj) return true;//判断是否同一个对象         //如果两个类不是同一个类 //        if(obj == null || obj.getClass() != this.getClass()) { //            return false; //        }         //传进来的对象不属于这个类或者它的父类，返回false         System.out.println(obj.getClass());         if(obj == null || !(obj instanceof Father)) {//左边是子类或者本类的对象             return false;         }         Father obj1 = (Father) obj;//强转然后判断         return true;     } }</code></pre> <p><strong>-  这里instanceof的缺点就是，父类调用比较子类为true，子类调用比较父类为false，所以我们可以尽量调用父类的equals来避免这个问题。</strong><br /><strong>- 同时也可以使用getClass进行判断，是否为同一个类对象。</strong></p> <h2 id="42hashcode方法">4.2hashCode方法</h2> <ul> <li>String类计算散列码算法：</li> </ul> <details> <summary>点击查看代码</summary> <pre><code>int hash = 0;     for(int i = 0; i &lt; length(); i++) {       hash = 31*hash + charAt(i);   }</code></pre> </details> <p>-  对于字符串的散列码，是看字符串的内容而定的。意味着两个字符串内容相同，则他们的散列码也相同。</p> <h2 id="43tostring方法">4.3toString方法</h2> <ul> <li>其实这个方法非常简单，就是把我们的字段以字符串的形式，好看的输出出来。</li> </ul> <pre><code>@Override     public String toString() {         return getClass().getName()                 +"{"                  + "tili="                  + tili                  + ", qimi="                  + qimi                  + '}';     }</code></pre> <ul> <li>在使用的时候我们可以写成</li> <li><code>System.out.println(x.toString());</code></li> <li><code>System.out.println(x);这样会默认调用toString()方法，可以简略不写</code></li> </ul> <blockquote> <p>但是在有时候我们用toString方法是会出现输出java.io.PrintStream@2f6684和[I@1a46e30的情况</p> </blockquote> <p>1.这是因为Objcet类定义了toString方法，可以打印<strong>对象的类名和散列码</strong>，所以需要我们对toString方法进行重写<br /> 2.数组也继承了Objcet类的toString,如果我们使用时不重写toString，则会出现<code>[I@1a46e30</code>，补救办法就时使用<code>Arrays.toString()</code><br /> 3.若是二维数组，则可以使用<code>Arrays.deepToString()方法</code><br /><strong>4.强烈建议在每一个类中都重写toString方法。</strong></p> <h1 id="五泛型数组列表">五、泛型数组列表</h1> <ul> <li>在做题时，必须确定数组的长度以后才能够使用，这样使我们非常的不方便！</li> <li>所以我们就可以使用一个动态扩容的数组，这样就不必定义它的初始化长度。</li> <li>ArraysList<integer> list = new ArrayList&lt;&gt;(100) 这是初始化100的数组，可动态扩容</integer></li> <li>如果说空间过多浪费了，可以使用trimToSize()方法，将没用过的空间释放掉。</li> <li>具体详细的ArrayList用法，我们在日后的集合学习。</li> </ul> <h2 id="51将字符串转成整型">5.1将字符串转成整型</h2> <p><code>int x = Integer.parseInt(s);</code></p> <h2 id="52将数字转成字符串">5.2将数字转成字符串</h2> <p><code>String s = String.ValueOf(x);</code></p> <h2 id="53可变参数">5.3可变参数</h2> <pre><code>System.out.println(sum(1,2,3,4,5));     public static int sum(int... a) {         int total = 0;         for(int i:a) {             total += i;         }         return total;     }</code></pre> <h1 id="六枚举类">六、枚举类</h1> <ul> <li>枚举用enum表示</li> <li>public enum Size{1,2,3,4,5};一次自增1</li> <li>枚举的构造器总是私有的</li> </ul> <h1 id="七结尾">七、结尾</h1> <ul> <li>对于继承、多态内容就总结这么多，希望大家可以多多练习。如果有不足之处，希望大家多多包涵，多多支持。如果有不懂的地方可以直接私信问我，欢迎来访！</li> <li>我将会继续更新关于Java的学习知识，感兴趣的小伙伴可以关注一下。</li> <li>文章写得比较走心，用了很长时间，绝对不是copy过来的！</li> <li>尊重每一位学习知识的人，同时也尊重每一位分享知识的人。</li> </ul> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3985.htm">Ribbon、Hystrix超时问题</a></p>
                                                <p>下一个：<a href="/html/category/article-3987.htm">js点击下拉列表按钮，显示，点击其他地方（包括下拉按钮）隐藏下拉列表</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7008.htm" title="青岛最好的动物医院在哪里（青岛最好的动物医院在哪里啊）">青岛最好的动物医院在哪里（青岛最好的动物医院在哪里啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-7745.htm" title="合肥宠物领养中心在哪里有 合肥宠物领养中心在哪里有啊">合肥宠物领养中心在哪里有 合肥宠物领养中心在哪里有啊</a></li>
                        <li class="py-2"><a href="/html/category/article-7239.htm" title="动物疫苗的定义和分类（动物疫苗的生产原料有哪些,如何取得）">动物疫苗的定义和分类（动物疫苗的生产原料有哪些,如何取得）</a></li>
                        <li class="py-2"><a href="/html/category/article-7699.htm" title="同安宠物医院（同安宠物医院电话号码）">同安宠物医院（同安宠物医院电话号码）</a></li>
                        <li class="py-2"><a href="/html/category/article-6916.htm" title="制狗粮的机器设备有哪些（机器制作狗粮的配方大全）">制狗粮的机器设备有哪些（机器制作狗粮的配方大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-6641.htm" title="宠物粮食加工厂设备模具会粘吗 宠物粮食加工设备贵吗">宠物粮食加工厂设备模具会粘吗 宠物粮食加工设备贵吗</a></li>
                        <li class="py-2"><a href="/html/category/article-6824.htm" title="全日粮饲料混合搅拌机单轴好还是双轴好（双轴搅拌给料机）">全日粮饲料混合搅拌机单轴好还是双轴好（双轴搅拌给料机）</a></li>
                        <li class="py-2"><a href="/html/category/article-6687.htm" title="日本姓猪的名字大全（速看）日本人姓猪，美丽背后，服部直臣，">日本姓猪的名字大全（速看）日本人姓猪，美丽背后，服部直臣，</a></li>
                        <li class="py-2"><a href="/html/category/article-7698.htm" title="动物疫苗接种时间表格图片大全 动物疫苗接种时间表格图片大全集">动物疫苗接种时间表格图片大全 动物疫苗接种时间表格图片大全集</a></li>
                        <li class="py-2"><a href="/html/category/article-6131.htm" title="动物医院的面积不得小于多少（动物医院布局设计及分析）">动物医院的面积不得小于多少（动物医院布局设计及分析）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
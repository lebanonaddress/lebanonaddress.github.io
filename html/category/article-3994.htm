<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-3994.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>iOS全埋点解决方案-应用退出和启动 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">iOS全埋点解决方案-应用退出和启动 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h3 id="前言">前言</h3> <p>	通过应用程序退出事件，可以分析应用程序的平均使用时长；通过应用程序的启动事件，可以分析日活和新增。我们可以通过全埋点方式 SDK 实现应用程序的退出和启动事件。</p> <h3 id="一全埋点的简介">一、全埋点的简介</h3> <p>	目前、全埋点采集可以采集一下4个事件。</p> <p>1、$AppEnd 事件：应用程序退出事件</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/237fd17efe18013bc691c5452e9a4fc9.jpg" alt="iOS全埋点解决方案-应用退出和启动"></p> <p>2、$AppStart 事件：应用程序启动事件</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f03bf691b71390d9266fef0ed889d5b0.jpg" alt="iOS全埋点解决方案-应用退出和启动"></p> <p>3、$AppViewScreen 事件:  应用程序内界面预览事件，对于 iOS 来说就是切换不同的 UIViewController。</p> <p>4、$AppClick 事件: 控件的点击事件，比如点击 UIButton 、UITableView 等。</p> <p>预置事件：在 SDK 中自动采集的事件称为预置事件。</p> <h3 id="二应用程序退出">二、应用程序退出</h3> <h4 id="21-应用程序状态">2.1 应用程序状态：</h4> <p>	一个标准的 iOS 程序在不同的时期会有不同的运行状态，在 iOS 程序中常见的状态有5中。如图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/caefb059fd6d47858d0935c2b92b143a.jpg" alt="iOS全埋点解决方案-应用退出和启动"></p> <p>1、Not running：非运行状态，指应用程序还没有被启动，或者已经被系统终止。</p> <p>2、Inactive: 前台非活跃状态，指应用程序即将进入前台状态。</p> <p>3、Active: 前台活跃状态，指应用程序正在前台运行，可接受事件并进行处理。</p> <p>4、Background: 进入后台状态，指应用程序进入后台并可执行代码。</p> <p>5、Suspended: 挂起状态，指应用程序进入后台并没有执行代码，系统会自动将应用程序转移到该状态。挂起时，应用程序会保留在内存中，但不执行任何代码，当系统出现内存不足情况时，系统会清除被挂起的应用程序。</p> <p>	在应用程序的状态转换过程中，系统会调用实现 UIApplicationDelegate 协议类的一些方法，并发送相应的本地通知（先调用方法，待回调方法执行后，再发相应的通知），回调方法和本地通知的对应关系如下表</p> <table> <thead> <tr> <th style="text-align: center">回调方法</th> <th style="text-align: center">本地通知</th> </tr> </thead> <tbody> <tr> <td style="text-align: center">- application:didFinishI aunchingWithOptions:</td> <td style="text-align: center">UIApplicationDidFinishLaunchingNotification</td> </tr> <tr> <td style="text-align: center">- applicationDidBecomeActive:</td> <td style="text-align: center">UIApplicationDidBecomeActiveNotification</td> </tr> <tr> <td style="text-align: center">- applicationWillResignActive:</td> <td style="text-align: center">UIApplicationWillResignActiveNotification</td> </tr> <tr> <td style="text-align: center">- applicationDidEnterBack ground:·</td> <td style="text-align: center">UIApplicationDidEnterBackgroundNotification</td> </tr> <tr> <td style="text-align: center">- applicationWillEnterForeground:</td> <td style="text-align: center">UIApplicationWillEnterForegroundNotificatio</td> </tr> <tr> <td style="text-align: center">- applicationWillTerminate:</td> <td style="text-align: center">UIApplicationWillTerminateNotification</td> </tr> </tbody> </table> <h4 id="22-实现步骤">2.2 实现步骤</h4> <p>	通过上面介绍的内容可知，当一个 iOS 应用程序退出时，就意味着该应用程序进入了“后台”，即处于 Background 状态。因此，对于实现 $AppEnd 事件的全埋点，我们只需要注册监听 UIApplicationDidEnterBackgroundNotification 通知，然后在收到通知时触发 $AppEnd 事件，即可达到 $AppEnd 事件全埋点的效果。</p> <p>第一步：注册监听 UIApplicationDidEnterBackgroundNotification 本地通知。</p> <p>在 SensorsAnalyticsSDK.m 文件中实现 - setupListeners 方法，用来监听 UIApplicationDidEnterBackgroundNotification 本地通知，然后再相应的回调方法中触发 $AppEnd 事件。</p> <pre><code>- (void)setupListeners {     NSNotificationCenter *center = [NSNotificationCenter defaultCenter];     // 注册监听 UIApplicationDidEnterBackgroundNotification 本地通知     // 当应用程序进入后台，调用通知方法     [center addObserver:self                selector:@selector(applicationDidEnterBackground:)                    name:UIApplicationDidEnterBackgroundNotification                  object:nil]; }  - (void)applicationDidEnterBackground:(NSNotification *)notification {     NSLog(@"Application did enter background.");          // 触发 AppEnd 事件     [self track:@"$AppEnd" properties:nil]; }</code></pre> <p>第二步：在 SensorsAnalyticsSDK.m 文件中初始化 - init 方法中调用 - setupListeners，并在 - dealloc 方法中移除监听。</p> <pre><code>- (instancetype)init {     self = [super init];     if (self) {         _automaticProperties = [self collectAutomaticProperties];                  // 添加应用程序状态监听         [self setupListeners];     }     return self; }  - (void)dealloc {     [[NSNotificationCenter defaultCenter] removeObserver:self]; }</code></pre> <p>第三步：测试验证</p> <p>我们可以在 Xcode 中打印控制台中查看如下的打印信息。</p> <pre><code>{   "event" : "$AppEnd",   "time" : 1648520301691,   "propeerties" : {     "$model" : "x86_64",     "$manufacturer" : "Apple",     "$lib_version" : "1.0.0",     "$os" : "iOS",     "$app_version" : "1.0",     "$os_version" : "15.2",     "$lib" : "iOS"   } }</code></pre> <h3 id="三应用程序启动">三、应用程序启动</h3> <p>应用程序的启动，一般情况下，大致可以分为两类场景：</p> <p>• 冷启动</p> <p>• 热启动（从后台恢复）</p> <p>	不管是冷启动还是热启动，触发 $AppStart 事件的时机，都可以理解成是当“应用程序开始进入前台并处于活动状态”，也即前文介绍的 Active 状态。因此，为了实现 $AppStart 事件的全埋点，我们可以注册监听 UIApplicationDidBecomeActiveNotification 本地通知，然后在其相应的回调方法里触发 $AppStart 事件。</p> <h4 id="31-实现步骤">3.1 实现步骤</h4> <p>第一步：在 SensorsAnalyticsSDK.m 文件 - setupListeners 方法中，添加 UIApplicationDidBecomeActiveNotification 本地通知，然后再相应的回调方法中触发 $AppStart 事件。</p> <pre><code>- (void)setupListeners {     NSNotificationCenter *center = [NSNotificationCenter defaultCenter];     // 注册监听 UIApplicationDidBecomeActiveNotification 本地通知     // 当应用程序进入前台台，调用通知方法     [center addObserver:self                selector:@selector(applicationDidBecomeActive:)                    name:UIApplicationDidBecomeActiveNotification                  object:nil]; }  - (void)applicationDidBecomeActive:(NSNotification *)notification {     NSLog(@"Application did enter active.");          // 触发 AppEnd 事件     [self track:@"$AppStart" properties:nil]; }</code></pre> <p>第二步: 测试验证</p> <p>	可以在 Xcode 打印控制台中查看下面的打印信息。</p> <pre><code>{   "event" : "$AppStart",   "time" : 1648520708355,   "propeerties" : {     "$model" : "x86_64",     "$manufacturer" : "Apple",     "$lib_version" : "1.0.0",     "$os" : "iOS",     "$app_version" : "1.0",     "$os_version" : "15.2",     "$lib" : "iOS"   } }</code></pre> <h4 id="32-优化">3.2 优化</h4> <p>问题：</p> <p>通过测试可以发现，仍有以下几个特殊场景存在问题：</p> <p>• 下拉通知栏并上滑，会触发 $AppStart 事件</p> <p>• 上滑控制中心并下拉，会触发 $AppStart 事件</p> <p>• 双击 Home 键进入切换应用程序页面，最后又选择当前应用程序，会触发 $AppStart 事件</p> <p>以上几个场景均会触发 $AppStart 事件，明显与实际情况有所不符。</p> <p>那这些现象是什么原因导致的呢？</p> <p>我们继续分析可以发现以下几个现象：</p> <p>• 下拉通知栏时，系统会发送 UIApplicationWillResignActiveNotification 通知；上滑通知栏时，系统会发送 UIApplicationDidBecomeActiveNotification 通知</p> <p>• 上滑控制中心时，系统会发送 UIApplicationWillResignActiveNotification 通知；下拉控制中心时，系统会发送 UIApplicationDidBecomeActiveNotification 通知</p> <p>• 双击 Home 键进入切换应用程序页面时，系统会发送 UIApplicationWillResignActiveNotification 通知，然后选择当前应用程序，系统会再发送 UIApplicationDidBecomeActiveNotification 通知</p> <p>很容易总结出规律：在以上几个场景下，系统均是先发送UIApplicationWillResignActiveNotification 通知，然后再发送 UIApplicationDidBecomeActiveNotification 通知。而我们又是通过注册监听 UIApplicationDidBecomeActiveNotification 通知来实现 $AppStart 事件全埋点，因此均会触发 $AppStart 事件。</p> <p>那如何解决这个问题呢？</p> <p>在解决这个问题之前，我们先看另一个现象：不管是冷启动还是热启动，系统均没有发送 UIApplicationWillResignActiveNotification 通知。</p> <p>因此，只要在收到 UIApplicationDidBecomeActiveNotification 通知时，判断之前是否收到过 UIApplicationWillResignActiveNotification 通知，若没有收到，则触发 $AppStart 事件；若已收到，则不触发 $AppStart 事件。这样即可解决上面的问题。</p> <p>优化方案：</p> <p>第一步：在 SensorsAnalyticsSDK.m 文件中添加 applicationWillResignActive 标记位。</p> <pre><code>/// 标记应用程序是否收到 UIApplicationWillResignActiveNotification 本地通知 @property (nonatomic, assign) BOOL applicationWillResignActive;</code></pre> <p>第二步：在 - setupListeners 方法中新增注册监听 UIApplicationWillResignActiveNotification 的本地通知。</p> <pre><code>- (void)setupListeners {     NSNotificationCenter *center = [NSNotificationCenter defaultCenter];     // 注册监听 UIApplicationDidEnterBackgroundNotification 本地通知     // 当应用程序进入后台，调用通知方法     [center addObserver:self                selector:@selector(applicationDidEnterBackground:)                    name:UIApplicationDidEnterBackgroundNotification                  object:nil];          // 注册监听 UIApplicationDidBecomeActiveNotification 本地通知     // 当应用程序进入前台台，调用通知方法     [center addObserver:self                selector:@selector(applicationDidBecomeActive:)                    name:UIApplicationDidBecomeActiveNotification                  object:nil];          // 注册监听 UIApplicationWillResignActiveNotification 本地通知     // 当应用程序进入前台台，调用通知方法     [center addObserver:self                selector:@selector(applicationWillResignActive:)                    name:UIApplicationWillResignActiveNotification                  object:nil]; }  - (void)applicationWillResignActive:(NSNotification *)notification {          // 设置标记位     self.applicationWillResignActive = YES; }</code></pre> <p>第三步：在UIApplicationDidBecomeActiveNotification 的回调方法中还原 applicationWillResignActive 的标记位</p> <pre><code>- (void)applicationDidBecomeActive:(NSNotification *)notification {     NSLog(@"Application did enter active.");          // 还原标记位     if (self.applicationWillResignActive) {         self.applicationWillResignActive = NO;         return;     }          // 触发 AppStart 事件     [self track:@"$AppStart" properties:nil]; }</code></pre> <p>第四步：在 UIApplicationDidEnterBackgroundNotification 回调方法中还原 applicationWillResignActive 的标记位</p> <pre><code>- (void)applicationDidEnterBackground:(NSNotification *)notification {     NSLog(@"Application did enter background.");          // 还原标记位     self.applicationWillResignActive = NO;          // 触发 AppEnd 事件     [self track:@"$AppEnd" properties:nil]; }</code></pre> <p>第五步：测试验证</p> <pre><code>{   "event" : "$AppStart",   "time" : 1648533646735,   "propeerties" : {     "$model" : "x86_64",     "$manufacturer" : "Apple",     "$lib_version" : "1.0.0",     "$os" : "iOS",     "$app_version" : "1.0",     "$os_version" : "15.2",     "$lib" : "iOS"   } }</code></pre> <h3 id="四应用程序被动启动">四、应用程序被动启动</h3> <p>	被动启动：我们把由 iOS 系统触发的应用程序自动进入后台运行的启动称之为（应用程序的）被动启动，使用 $AppStartPassively 事件来表示。</p> <h4 id="41background-modes">4.1、Background modes</h4> <p>	使用 Xcode 创建新的应用程序，默认情况下后台刷新功能是关闭的，我们可以在 Capabilities 标签中开启 Background Modes，然后就可以勾选所需要的功能了，如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d061a77b0cf77f9e89c5ea01b681b70b.jpg" alt="iOS全埋点解决方案-应用退出和启动"></p> <p>通过上图可知，有如下几种后台运行模式，它们都会触发被动启动（$AppStartPassively 事件）。</p> <p>1、Audio，AirPlay，and Picture in Picture : 音频的播放，录音，AirPlay及画中画的视频播放</p> <p>2、Location updates：此模式下，会由于地理位置变化而触发应用程序启动</p> <p>3、Voice over IP : IP网络电话，通过对语音信号进行编码数字化，然后转换成IP数据包在TCP/IP网络上进行传输，从而达到在网络上进行语音通信的目的</p> <p>4、External Accessory communication：此模式下，一些 MFi 外设通过蓝牙或者 Lightning 接头等方式与 iOS 设备连接，从而可在外设给应用程序发送消息时，触发对应的应用程序启动</p> <p>5、Uses Bluetooth LE accessories：此模式与 External Accessory communication 类似，只是无需限制 MFi 外设，而需要的是 Bluetooth LE 设备</p> <p>6、Acts as a Bluetooth LE accessory：此模式下，iPhone 作为一个蓝牙外设连接，可以触发应用程序启动</p> <p>7、Background fetch：此模式下，iOS 系统会在一定的时间间隔内触发应用程序启动，去获取应用程序数据</p> <p>8、Remote notifications：此模式是支持静默推送，当应用程序收到这种推送后，不会有任何界面提示，但会触发应用程序启动</p> <p>9、Background processing: 后端处理</p> <h4 id="42-实现步骤">4.2 实现步骤</h4> <p>	后台用程序刷新拉起应用程序后，首先会回调 AppDelegate 中的 -application:didFinishLaunchingWithOptions: 方法。因此，我们可以通过注册监听 UIApplicationgDidFinishLaunchingNotification 本地通知来采集被动启动事件信息。</p> <p>第一步：在 - setupListeners 方法中添加 UIApplicationgDidFinishLaunchingNotification 本地通知，在回调方法中上报数据。</p> <pre><code>- (void)setupListeners {     NSNotificationCenter *center = [NSNotificationCenter defaultCenter];     // 注册监听 UIApplicationDidFinishLaunchingNotification 本地通知     // 当应用程序被动，调用通知方法     [center addObserver:self                selector:@selector(applicationDidFinishLaunching:)                    name:UIApplicationDidFinishLaunchingNotification                  object:nil]; } - (void)applicationDidFinishLaunching:(NSNotification *)notification {          // 触发 AppStartPassively 事件     [self track:@"$AppStartPassively" properties:nil]; }</code></pre> <p>第二步：新增一个私有属性 launchedPassively，标记应用程序是否处于被动启动</p> <pre><code>/// 标记应用程序是否是被动启动 @property (nonatomic, assign, getter=isLaunchedPassively) BOOL launchedPassively;</code></pre> <p>第三步：在 - init 初始化方法中，通过 backgroundTimeRemaining 属性是否等于 UIApplicationBackgroundFetchIntervalNever 来设置</p> <pre><code>- (instancetype)init {     self = [super init];     if (self) {         _automaticProperties = [self collectAutomaticProperties];          // 设置是否需是被动启动标记         _launchedPassively = UIApplication.sharedApplication.backgroundTimeRemaining != UIApplicationBackgroundFetchIntervalNever;                  // 添加应用程序状态监听         [self setupListeners];     }     return self; }</code></pre> <p>第四步：在 - applicationDidFinishLaunching 回调方法中，如果 isLaunchedPassively 为 YES，再触发 $AppStartPassively 事件</p> <pre><code>- (void)applicationDidFinishLaunching:(NSNotification *)notification {     NSLog(@"Application did finish launching.");     // 当应用程序后台运行时，触发被动启动事件     if (self.isLaunchedPassively) {         // 触发 AppStartPassively 事件         [self track:@"$AppStartPassively" properties:nil];     } }</code></pre> <p>第五步：测试验证</p> <p>1、开启 Background modes 中的 Background fetch 复选框</p> <p>2、选择 Demo Scheme , 一次单击 Xcode 菜单栏中的 Product -&gt; Scheme -&gt; Edit -&gt; Scheme -&gt; Run -&gt; Options</p> <p>3、勾选 Background Fetch 选项，然后点击 Close 按钮。运行 Demo</p> <pre><code>{   "event" : "$AppStartPassively",   "time" : 1648537321216,   "propeerties" : {     "$model" : "x86_64",     "$manufacturer" : "Apple",     "$lib_version" : "1.0.0",     "$os" : "iOS",     "$app_version" : "1.0",     "$os_version" : "15.2",     "$lib" : "iOS"   }</code></pre> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3993.htm">使用 bitnami/postgresql-repmgr 镜像快速设置 PostgreSQL HA</a></p>
                                                <p>下一个：<a href="/html/category/article-3995.htm">Python 替换.txt文件中的字符</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6916.htm" title="制狗粮的机器设备有哪些（机器制作狗粮的配方大全）">制狗粮的机器设备有哪些（机器制作狗粮的配方大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-6175.htm" title="狗市吉娃娃多少钱（狗市吉娃娃视频）">狗市吉娃娃多少钱（狗市吉娃娃视频）</a></li>
                        <li class="py-2"><a href="/html/category/article-7330.htm" title="昆明宠物门诊报销政策（昆明宠物医院24小时急诊）">昆明宠物门诊报销政策（昆明宠物医院24小时急诊）</a></li>
                        <li class="py-2"><a href="/html/category/article-4576.htm" title="下一站是幸福贺繁星元宋分手（下一站幸福大结局）速看，">下一站是幸福贺繁星元宋分手（下一站幸福大结局）速看，</a></li>
                        <li class="py-2"><a href="/html/category/article-6825.htm" title="水可以自发形成过氧化氢，我们终于明白为什么了：">水可以自发形成过氧化氢，我们终于明白为什么了：</a></li>
                        <li class="py-2"><a href="/html/category/article-7009.htm" title="咸鱼无货源赚钱吗是真的吗（闲鱼无货源赚钱详细教程）">咸鱼无货源赚钱吗是真的吗（闲鱼无货源赚钱详细教程）</a></li>
                        <li class="py-2"><a href="/html/category/article-4575.htm" title="狗粮颗粒机家用小型（制作狗粮配方 颗粒机器）">狗粮颗粒机家用小型（制作狗粮配方 颗粒机器）</a></li>
                        <li class="py-2"><a href="/html/category/article-6686.htm" title="动物疫苗公司全球（动物疫苗公司10强）">动物疫苗公司全球（动物疫苗公司10强）</a></li>
                        <li class="py-2"><a href="/html/category/article-6641.htm" title="宠物粮食加工厂设备模具会粘吗 宠物粮食加工设备贵吗">宠物粮食加工厂设备模具会粘吗 宠物粮食加工设备贵吗</a></li>
                        <li class="py-2"><a href="/html/category/article-5980.htm" title="动物医院设备清单价格（动物医院常见的诊疗设备）">动物医院设备清单价格（动物医院常见的诊疗设备）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
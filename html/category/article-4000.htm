<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-4000.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>【mq】从零开始实现 mq-01-生产者、消费者启动 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">【mq】从零开始实现 mq-01-生产者、消费者启动 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h1 id="mq-是什么">MQ 是什么？</h1> <p>MQ（Message Queue）消息队列，是基础数据结构中“先进先出”的一种数据结构。</p> <p>指把要传输的数据（消息）放在队列中，用队列机制来实现消息传递——生产者产生消息并把消息放入队列，然后由消费者去处理。</p> <p>消费者可以到指定队列拉取消息，或者订阅相应的队列，由MQ服务端给其推送消息。</p> <h2 id="mq-的作用">MQ 的作用？</h2> <p>消息队列中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。</p> <p>解耦：一个业务需要多个模块共同实现，或者一条消息有多个系统需要对应处理，只需要主业务完成以后，发送一条MQ，其余模块消费MQ消息，即可实现业务，降低模块之间的耦合。</p> <p>异步：主业务执行结束后从属业务通过MQ，异步执行，减低业务的响应时间，提高用户体验。</p> <p>削峰：高并发情况下，业务异步处理，提供高峰期业务处理能力，避免系统瘫痪。</p> <p>ps: 以上内容摘选自百科。</p> <h1 id="实现-mq-的准备工作">实现 mq 的准备工作</h1> <h2 id="maven-引入">maven 引入</h2> <pre><code class="language-xml"><dependency>     <groupId>io.netty</groupId>     netty-all</artifactId>     <version>4.1.42.Final</version> </dependency>  <dependency>     <groupId>com.alibaba</groupId>     <artifactId>fastjson</artifactId>     <version>1.2.76</version> </dependency></code></pre> <h2 id="模块划分">模块划分</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/houbb/mq"  target="_blank" rel="nofollow">The message queue in java. 作为 mq 的从零开始的学习项目，目前已开源。</p> <p>项目的模块如下：</p> <table> <thead> <tr> <th style="text-align: left">模块</th> <th style="text-align: left">说明</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">mq-common</td> <td style="text-align: left">公共代码</td> </tr> <tr> <td style="text-align: left">mq-broker</td> <td style="text-align: left">注册中心</td> </tr> <tr> <td style="text-align: left">mq-producer</td> <td style="text-align: left">消息生产者</td> </tr> <tr> <td style="text-align: left">mq-consumer</td> <td style="text-align: left">消息消费者</td> </tr> </tbody> </table> <h1 id="消息消费者">消息消费者</h1> <h2 id="接口定义">接口定义</h2> <pre><code class="language-java">package com.github.houbb.mq.consumer.api;  /**  * @author binbin.hou  * @since 1.0.0  */ public interface IMqConsumer {      /**      * 订阅      * @param topicName topic 名称      * @param tagRegex 标签正则      */     void subscribe(String topicName, String tagRegex);      /**      * 注册监听器      * @param listener 监听器      */     void registerListener(final IMqConsumerListener listener);  }</code></pre> <p><code>IMqConsumerListener</code> 作为消息监听类的接口，定义如下：</p> <pre><code class="language-java">public interface IMqConsumerListener {       /**      * 消费      * @param mqMessage 消息体      * @param context 上下文      * @return 结果      */     ConsumerStatus consumer(final MqMessage mqMessage,                             final IMqConsumerListenerContext context);  }</code></pre> <p>ConsumerStatus 代表消息消费的几种状态。</p> <h2 id="消息体">消息体</h2> <p>启动消息体 MqMessage 定义如下：</p> <pre><code class="language-java">package com.github.houbb.mq.common.dto;  import java.util.Arrays; import java.util.List;  /**  * @author binbin.hou  * @since 1.0.0  */ public class MqMessage {      /**      * 标题名称      */     private String topic;      /**      * 标签      */     private List<String> tags;      /**      * 内容      */     private byte[] payload;      /**      * 业务标识      */     private String bizKey;      /**      * 负载分片标识      */     private String shardingKey;      // getter&setter&toString  }</code></pre> <h2 id="push-消费者策略实现">push 消费者策略实现</h2> <p>消费者启动的实现如下：</p> <pre><code class="language-java">/**  * 推送消费策略  *  * @author binbin.hou  * @since 1.0.0  */ public class MqConsumerPush extends Thread implements IMqConsumer  {      // 省略...      @Override     public void run() {         // 启动服务端         log.info("MQ 消费者开始启动服务端 groupName: {}, port: {}, brokerAddress: {}",                 groupName, port, brokerAddress);          EventLoopGroup bossGroup = new NioEventLoopGroup();         EventLoopGroup workerGroup = new NioEventLoopGroup();          try {             ServerBootstrap serverBootstrap = new ServerBootstrap();             serverBootstrap.group(workerGroup, bossGroup)                     .channel(NioServerSocketChannel.class)                     .childHandler(new ChannelInitializer<Channel>() {                         @Override                         protected void initChannel(Channel ch) throws Exception {                             ch.pipeline().addLast(new MqConsumerHandler());                         }                     })                     // 这个参数影响的是还没有被accept 取出的连接                     .option(ChannelOption.SO_BACKLOG, 128)                     // 这个参数只是过一段时间内客户端没有响应，服务端会发送一个 ack 包，以判断客户端是否还活着。                     .childOption(ChannelOption.SO_KEEPALIVE, true);              // 绑定端口，开始接收进来的链接             ChannelFuture channelFuture = serverBootstrap.bind(port).syncUninterruptibly();             log.info("MQ 消费者启动完成，监听【" + port + "】端口");              channelFuture.channel().closeFuture().syncUninterruptibly();             log.info("MQ 消费者关闭完成");         } catch (Exception e) {             log.error("MQ 消费者启动异常", e);             throw new MqException(ConsumerRespCode.RPC_INIT_FAILED);         } finally {             workerGroup.shutdownGracefully();             bossGroup.shutdownGracefully();         }       }       // 省略...  }</code></pre> <p>ps: 初期我们把 consumer 作为服务端，后续引入 broker 则只有 broker 是服务端。</p> <h2 id="mqconsumerhandler-处理类">MqConsumerHandler 处理类</h2> <p>这个类是一个空的实现。</p> <pre><code class="language-java">public class MqConsumerHandler extends SimpleChannelInboundHandler {      @Override     protected void channelRead0(ChannelHandlerContext channelHandlerContext, Object object) throws Exception {         //nothing     }  }</code></pre> <h2 id="测试代码">测试代码</h2> <pre><code class="language-java">MqConsumerPush mqConsumerPush = new MqConsumerPush(); mqConsumerPush.start();</code></pre> <p>启动日志：</p> <pre><code>[DEBUG] [2022-04-21 19:16:41.343] [main] [c.g.h.l.i.c.LogFactory.setImplementation] - Logging initialized using 'class com.github.houbb.log.integration.adaptors.stdout.StdOutExImpl' adapter. [INFO] [2022-04-21 19:16:41.356] [Thread-0] [c.g.h.m.c.c.MqConsumerPush.run] - MQ 消费者开始启动服务端 groupName: C_DEFAULT_GROUP_NAME, port: 9527, brokerAddress:  [INFO] [2022-04-21 19:16:43.196] [Thread-0] [c.g.h.m.c.c.MqConsumerPush.run] - MQ 消费者启动完成，监听【9527】端口</code></pre> <h1 id="消息生产者">消息生产者</h1> <h2 id="接口定义-1">接口定义</h2> <p>最基本的消息发送接口。</p> <pre><code class="language-java">package com.github.houbb.mq.producer.api;  import com.github.houbb.mq.common.dto.MqMessage; import com.github.houbb.mq.producer.dto.SendResult;  /**  * @author binbin.hou  * @since 1.0.0  */ public interface IMqProducer {      /**      * 同步发送消息      * @param mqMessage 消息类型      * @return 结果      */     SendResult send(final MqMessage mqMessage);      /**      * 单向发送消息      * @param mqMessage 消息类型      * @return 结果      */     SendResult sendOneWay(final MqMessage mqMessage);  }</code></pre> <h2 id="生产者实现">生产者实现</h2> <p>MqProducer 启动的实现如下，基于 netty。</p> <pre><code class="language-java">package com.github.houbb.mq.producer.core;  /**  * 默认 mq 生产者  * @author binbin.hou  * @since 1.0.0  */ public class MqProducer extends Thread implements IMqProducer {      //省略...      @Override     public void run() {         // 启动服务端         log.info("MQ 生产者开始启动客户端 GROUP: {}, PORT: {}, brokerAddress: {}",                 groupName, port, brokerAddress);          EventLoopGroup workerGroup = new NioEventLoopGroup();          try {             Bootstrap bootstrap = new Bootstrap();             ChannelFuture channelFuture = bootstrap.group(workerGroup)                     .channel(NioSocketChannel.class)                     .option(ChannelOption.SO_KEEPALIVE, true)                     .handler(new ChannelInitializer<Channel>(){                         @Override                         protected void initChannel(Channel ch) throws Exception {                             ch.pipeline()                                     .addLast(new LoggingHandler(LogLevel.INFO))                                     .addLast(new MqProducerHandler());                         }                     })                     .connect("localhost", port)                     .syncUninterruptibly();              log.info("MQ 生产者启动客户端完成，监听端口：" + port);             channelFuture.channel().closeFuture().syncUninterruptibly();             log.info("MQ 生产者开始客户端已关闭");         } catch (Exception e) {             log.error("MQ 生产者启动遇到异常", e);             throw new MqException(ProducerRespCode.RPC_INIT_FAILED);         } finally {             workerGroup.shutdownGracefully();         }     }      //省略... }</code></pre> <h2 id="mqproducerhandler-处理类">MqProducerHandler 处理类</h2> <p>默认的空实现，什么都不做。</p> <pre><code class="language-java">package com.github.houbb.mq.producer.handler;  import io.netty.channel.ChannelHandlerContext; import io.netty.channel.SimpleChannelInboundHandler;  /**  * @author binbin.hou  * @since 1.0.0  */ public class MqProducerHandler extends SimpleChannelInboundHandler {      @Override     protected void channelRead0(ChannelHandlerContext channelHandlerContext, Object object) throws Exception {         //do nothing now     }  }</code></pre> <h2 id="启动代码">启动代码</h2> <pre><code class="language-java">MqProducer mqProducer = new MqProducer(); mqProducer.start();</code></pre> <p>启动日志：</p> <pre><code>[DEBUG] [2022-04-21 19:17:11.960] [main] [c.g.h.l.i.c.LogFactory.setImplementation] - Logging initialized using 'class com.github.houbb.log.integration.adaptors.stdout.StdOutExImpl' adapter. [INFO] [2022-04-21 19:17:11.974] [Thread-0] [c.g.h.m.p.c.MqProducer.run] - MQ 生产者开始启动客户端 GROUP: P_DEFAULT_GROUP_NAME, PORT: 9527, brokerAddress:  四月 21, 2022 7:17:13 下午 io.netty.handler.logging.LoggingHandler channelRegistered 信息: [id: 0x5cb48145] REGISTERED 四月 21, 2022 7:17:13 下午 io.netty.handler.logging.LoggingHandler connect 信息: [id: 0x5cb48145] CONNECT: localhost/127.0.0.1:9527 四月 21, 2022 7:17:13 下午 io.netty.handler.logging.LoggingHandler channelActive 信息: [id: 0x5cb48145, L:/127.0.0.1:57740 - R:localhost/127.0.0.1:9527] ACTIVE [INFO] [2022-04-21 19:17:13.833] [Thread-0] [c.g.h.m.p.c.MqProducer.run] - MQ 生产者启动客户端完成，监听端口：9527</code></pre> <h1 id="小结">小结</h1> <p>基于 netty 最基本的服务端启动、客户端启动到这里就结束了。</p> <p>千里之行，始于足下。</p> <p>我们下一节将和大家一起学习，如何实现客户端与服务端之间的交互。</p> <p>希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。</p> <p>我是老马，期待与你的下次重逢。</p> <h1 id="开源地址">开源地址</h1> <blockquote> <p>The message queue in java.(java 简易版本 mq 实现):https://github.com/houbb/mq</p> </blockquote> <h1 id="拓展阅读">拓展阅读</h1> <p>rpc-从零开始实现 rpc:https://github.com/houbb/rpc</p> <p>【mq】从零开始实现 mq-01-生产者、消费者启动</p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3999.htm">java 拦截器响应中取所有参数,SpringBoot拦截器怎么获取http请求参数</a></p>
                                                <p>下一个：<a href="/html/category/article-4001.htm">canvas生成带有二维码的海报</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6174.htm" title="三国杀武将展示替换（三国杀装备替换）">三国杀武将展示替换（三国杀装备替换）</a></li>
                        <li class="py-2"><a href="/html/category/article-5595.htm" title="猫抓后多少天过危险期（猫抓后多久发病）">猫抓后多少天过危险期（猫抓后多久发病）</a></li>
                        <li class="py-2"><a href="/html/category/article-4394.htm" title="宠物医院收费价目表昆明（昆明宠物医院24小时营业）">宠物医院收费价目表昆明（昆明宠物医院24小时营业）</a></li>
                        <li class="py-2"><a href="/html/category/article-4056.htm" title="SpringMVC对Ajax请求的处理">SpringMVC对Ajax请求的处理</a></li>
                        <li class="py-2"><a href="/html/category/article-4047.htm" title="springboot关于mysql数据库date时间的坑">springboot关于mysql数据库date时间的坑</a></li>
                        <li class="py-2"><a href="/html/category/article-4055.htm" title="Token验证JWT方法">Token验证JWT方法</a></li>
                        <li class="py-2"><a href="/html/category/article-4053.htm" title="Autograd：Pytorch 中的自动微分机制讲解">Autograd：Pytorch 中的自动微分机制讲解</a></li>
                        <li class="py-2"><a href="/html/category/article-4540.htm" title="普通人怎么考兽医证难不难呀（怎么考兽医资格证需要什么条件）">普通人怎么考兽医证难不难呀（怎么考兽医资格证需要什么条件）</a></li>
                        <li class="py-2"><a href="/html/category/article-4469.htm" title="兰州最大的宠物市场是哪里（兰州最大宠物市场地址）">兰州最大的宠物市场是哪里（兰州最大宠物市场地址）</a></li>
                        <li class="py-2"><a href="/html/category/article-4318.htm" title="动物打疫苗去哪里预约呢（动物打疫苗去哪里预约呢）">动物打疫苗去哪里预约呢（动物打疫苗去哪里预约呢）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
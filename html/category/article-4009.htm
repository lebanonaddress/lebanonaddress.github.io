<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-4009.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Java 超详细讲解ThreadLocal类的使用_java - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Java 超详细讲解ThreadLocal类的使用_java </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li>Threadlocal有什么用：</li> <li>ThreadLocal使用实例</li> <ul class="second_class_ul"> <li>API介绍</li> <li>ThreadLocal的使用</li> </ul> <li>Threadlocal 的源码分析</li> <ul class="second_class_ul"> <li>原理</li> <li>源码</li> </ul> <li>内部类ThreadLocalMap</li> <ul class="second_class_ul"></ul> <li>ThreadLocalMap存储位置</li> <ul class="second_class_ul"></ul> <li>Key的弱引用问题</li> <ul class="second_class_ul"></ul> <li>java中的四种引用</li> <ul class="second_class_ul"></ul> <li>总结：</li> <ul class="second_class_ul"></ul> </ul> </div> <p class="maodian"></p> <h2>Threadlocal有什么用：</h2> <p>简单的说就是，一个ThreadLocal在一个线程中是共享的，在不同线程之间又是隔离的（每个线程都只能看到自己线程的值）。如下图：</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/96160fccd817dde5f79876d08ea6caec.jpg" alt="Java 超详细讲解ThreadLocal类的使用_java"></p> <p class="maodian"></p> <h2>ThreadLocal使用实例</h2> <p class="maodian"></p> <h3>API介绍</h3> <p>在使用Threadlocal之前我们先看以下它的API：</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/0ada0e9534837d2f02d95fc6bf8cfef4.jpg" alt="Java 超详细讲解ThreadLocal类的使用_java"></p> <p>ThreadLocal类的API非常的简单，在这里比较重要的就是get()、set()、remove(),set用于赋值操作，get用于获取变量的值，remove就是删除当前变量的值.需要注意的是initialValue方法会在第一次调用时被触发，用于初始化当前变量值，默认情况下initialValue返回的是null。</p> <p class="maodian"></p> <h3>ThreadLocal的使用</h3> <p>说完了ThreadLocal类的API了，那我们就来动手实践一下了，来理解前面的那句话：一个ThreadLocal在一个线程中是共享的，在不同线程之间又是隔离的（每个线程都只能看到自己线程的值）</p> <div class="ay1code"> <pre class="brush:java;">  public class ThreadLocalTest {        private static ThreadLocal<Integer> threadLocal = new ThreadLocal<Integer>() {  	// 重写这个方法，可以修改“线程变量”的初始值，默认是null          @Override          protected Integer initialValue() {              return 0;          }      };        public static void main(String[] args) throws InterruptedException {            //一号线程          new Thread(new Runnable() {              @Override              public void run() {                  System.out.println("一号线程set前：" + threadLocal.get());                  threadLocal.set(1);                  System.out.println("一号线程set后：" + threadLocal.get());              }          }).start();            //二号线程          new Thread(new Runnable() {              @Override              public void run() {                  System.out.println("二号线程set前：" + threadLocal.get());                  threadLocal.set(2);                  System.out.println("二号线程set后：" + threadLocal.get());                }          }).start();            //主线程睡1s          Thread.sleep(1000);            //主线程          System.out.println("主线程的threadlocal值：" + threadLocal.get());        }    }    </pre> </div> <p>稍微解释一下上面的代码：</p> <p>每一个ThreadLocal实例就类似于一个变量名，不同的ThreadLocal实例就是不同的变量名，它们内部会存有一个值（暂时这么理解）在后面的描述中所说的“ThreadLocal变量或者是线程变量”代表的就是ThreadLocal类的实例。</p> <p>在类中创建了一个静态的 “ThreadLocal变量”，在主线程中创建两个线程，在这两个线程中分别设置ThreadLocal变量为1和2。然后等待一号和二号线程执行完毕后，在主线程中查看ThreadLocal变量的值。</p> <p>程序结果及分析⌛</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/7976f87e4de037577fd95ec9bca91770.jpg" alt="Java 超详细讲解ThreadLocal类的使用_java"></p> <p>程序结果重点看的是主线程输出的是0，如果是一个普通变量，在一号线程和二号线程中将普通变量设置为1和2，那么在一二号线程执行完毕后在打印这个变量，输出的值肯定是1或者2（到底输出哪一个由操作系统的线程调度逻辑有关）。但使用ThreadLocal变量通过两个线程赋值后，在主线程程中输出的却是初始值0。在这也就是为什么“一个ThreadLocal在一个线程中是共享的，在不同线程之间又是隔离的”，每个线程都只能看到自己线程的值，这也就是 ThreadLocal的核心作用：实现线程范围的局部变量。</p> <p class="maodian"></p> <h2>Threadlocal 的源码分析</h2> <p class="maodian"></p> <h3>原理</h3> <p>每个Thread对象都有一个ThreadLocalMap，当创建一个ThreadLocal的时候，就会将该ThreadLocal对象添加到该Map中，其中键就是ThreadLocal，值可以是任意类型。 这句话刚看可能不是很懂，下面我们一起看完源码就明白了。</p> <p>前面我们的理解是所有的常量值或者是引用类型的引用都是保存在ThreadLocal实例中的，但实际上不是的，这种说法只是让我们更好的理解ThreadLocal变量这个概念。向ThreadLocal存入一个值，实际上是向当前线程对象中的ThreadLocalMap存入值，ThreadLocalMap我们可以简单的理解成一个Map，而向这个Map存值的key就是ThreadLocal实例本身。</p> <p class="maodian"></p> <h3>源码</h3> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/1353a73ea4fd5338baaa932f84b3a30f.jpg" alt="Java 超详细讲解ThreadLocal类的使用_java"></p> <p>????也就是说，想要存入的ThreadLocal中的数据实际上并没有存到ThreadLocal对象中去，而是以这个ThreadLocal实例作为key存到了当前线程中的一个Map中去了，获取ThreadLocal的值时同样也是这个道理。这也就是为什么ThreadLocal可以实现线程之间隔离的原因了。</p> <p class="maodian"></p> <h2>内部类ThreadLocalMap</h2> <p>ThreadLocalMap是ThreadLocal的内部类，实现了一套自己的Map结构✨</p> <p>ThreadLocalMap属性：</p> <div class="ay1code"> <pre class="brush:java;">          static class Entry extends WeakReference<ThreadLocal<?>> {              Object value;              Entry(ThreadLocal<?> k, Object v) {                  super(k);                  value = v;              }          }          //初始容量16          private static final int INITIAL_CAPACITY = 16;          //散列表          private Entry[] table;          //entry 有效数量           private int size = 0;          //负载因子          private int threshold;   </pre> </div> <p>ThreadLocalMap设置ThreadLocal 变量</p> <div class="ay1code"> <pre class="brush:java;">      private void set(ThreadLocal<?> key, Object value) {              Entry[] tab = table;              int len = tab.length;                            //与运算  & (len-1) 这就是为什么 要求数组len 要求2的n次幂               //因为len减一后最后一个bit是1 与运算计算出来的数值下标 能保证全覆盖               //否者数组有效位会减半               //如果是hashmap 计算完下标后 会增加链表 或红黑树的查找计算量               int i = key.threadLocalHashCode & (len-1);                            // 从下标位置开始向后循环搜索  不会死循环  有扩容因子 必定有空余槽点              for (Entry e = tab[i];   e != null;  e = tab[i = nextIndex(i, len)]) {                  ThreadLocal<?> k = e.get();                  //一种情况 是当前引用 返回值                  if (k == key) {                      e.value = value;                      return;                  }                  //槽点被GC掉 重设状态                   if (k == null) {                      replaceStaleEntry(key, value, i);                      return;                  }              }  			//槽点为空 设置value              tab[i] = new Entry(key, value);              //设置ThreadLocal数量              int sz = ++size;  			  			//没有可清理的槽点 并且数量大于负载因子 rehash              if (!cleanSomeSlots(i, sz) && sz >= threshold)                  rehash();          }  </pre> </div> <p>ThreadLocalMap属性介绍????：</p> <ul> <li>和普通Hashmap类似存储在一个数组内，但与hashmap使用的拉链法解决散列冲突不同的是 ThreadLocalMap使用开放地址法</li> <li>数组 初始容量16，负载因子2/3</li> <li>node节点 的key封装了WeakReference 用于回收</li> </ul> <p class="maodian"></p> <h2>ThreadLocalMap存储位置</h2> <p>储存在Thread中，有两个ThreadLocalMap变量</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/493da22b44e7b8b43b0dc25fd71e9dff.jpg" alt="Java 超详细讲解ThreadLocal类的使用_java"></p> <p>threadLocals 在ThreadLocal对象方法set中去创建 也由ThreadLocal来维护</p> <div class="ay1code"> <pre class="brush:java;">      public void set(T value) {          Thread t = Thread.currentThread();          ThreadLocalMap map = getMap(t);          if (map != null)              map.set(this, value);          else              createMap(t, value);      }        void createMap(Thread t, T firstValue) {          t.threadLocals = new ThreadLocalMap(this, firstValue);      }  </pre> </div> <p>inheritableThreadLocals 和ThreadLocal类似 InheritableThreadLocal重写了createMap方法</p> <div class="ay1code"> <pre class="brush:java;">  void createMap(Thread t, T firstValue) {          t.inheritableThreadLocals = new ThreadLocalMap(this, firstValue);      }  </pre> </div> <p>inheritableThreadLocals 作用是将ThreadLocalMap传递给子线程</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/6a8bc7246f93f9e8e75691adca23dc18.jpg" alt="Java 超详细讲解ThreadLocal类的使用_java"></p> <p>init方法中 条件满足后直接为子线程创建ThreadLocalMap</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/25493e860f2e673bf444bce2cab6b84b.jpg" alt="Java 超详细讲解ThreadLocal类的使用_java"></p> <p>注意：</p> <ul> <li>仅在初始化子线程的时候会传递 中途改变副线程的inheritableThreadLocals 变量 不会将影响结果传递到子线程 。</li> <li>使用线程池要注意 线程不回收 尽量避免使用父线程的inheritableThreadLocals 导致错误</li> </ul> <p class="maodian"></p> <h2>Key的弱引用问题</h2> <p>为什么要用弱引用,官方是这样回答的</p> <p>To help deal with very large and long-lived usages, the hash table entries use WeakReferences for keys.</p> <p>为了处理非常大和生命周期非常长的线程，哈希表使用弱引用作为 key。</p> <p>生命周期长的线程可以理解为：线程池的核心线程</p> <p>ThreadLocal在没有外部对象强引用时如Thread，发生GC时弱引用Key会被回收，而Value是强引用不会回收，如果创建ThreadLocal的线程一直持续运行如线程池中的线程，那么这个Entry对象中的value就有可能一直得不到回收，发生内存泄露。</p> <ul> <li>key 使用强引用????： 引用的ThreadLocal的对象被回收了，但是ThreadLocalMap还持有ThreadLocal的强引用，如果没有手动删除，ThreadLocal不会被回收，导致Entry内存泄漏。</li> <li>key 使用弱引用????： 引用的ThreadLocal的对象被回收了，由于ThreadLocalMap持有ThreadLocal的弱引用，即使没有手动删除，ThreadLocal也会被回收。value在下一次ThreadLocalMap调用set,get，remove的时候会被清除。</li> </ul> <p>Java8中已经做了一些优化如，在ThreadLocal的get()、set()、remove()方法调用的时候会清除掉线程ThreadLocalMap中所有Entry中Key为null的Value，并将整个Entry设置为null，利于下次内存回收。</p> <p class="maodian"></p> <h2>java中的四种引用</h2> <ul> <li>强引用????： 如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象</li> <li>软引用????： 在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。（软引用可用来实现内存敏感的高速缓存,比如网页缓存、图片缓存等。使用软引用能防止内存泄露，增强程序的健壮性）</li> <li>弱引用????： 具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象</li> <li>虚引用????： 虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。（注意哦，其它引用是被JVM回收后才被传入ReferenceQueue中的。由于这个机制，所以虚引用大多被用于引用销毁前的处理工作。可以使用在对象销毁前的一些操作，比如说资源释放等。）</li> </ul> <p>通常ThreadLocalMap的生命周期跟Thread（注意线程池中的Thread）一样长，如果没有手动删除对应key（线程使用结束归还给线程池了，其中的KV不再被使用但又不会GC回收，可认为是内存泄漏），一定会导致内存泄漏，但是使用弱引用可以多一层保障：弱引用ThreadLocal会被GC回收，不会内存泄漏，对应的value在下一次ThreadLocalMap调用set,get,remove的时候会被清除，Java8已经做了上面的代码优化。</p> <p class="maodian"></p> <h2>总结：</h2> <p>ThreadLocal的作用： 实现线程范围内的局部变量，即ThreadLocal在一个线程中是共享的，在不同线程之间是隔离的。</p> <p>ThreadLocal的原理： ThreadLocal存入值时使用当前ThreadLocal实例作为key（并不是以当前线程对象作为key），存入当前线程对象中的Map中去。最开始在看源码之前，我以为是以当前线程对象作为key将对象存入到ThreadLocal中的Map中去…</p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4008.htm">我们如何使用来自任何表达式，函数等的MySQL自我计算输出在一行中插入值？</a></p>
                                                <p>下一个：<a href="/html/category/article-4010.htm">关于java抽象方法和抽象类的一些理解</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6917.htm" title="上海宠物美容学校培训价格表（上海宠物美容师培训班多少钱,需要学多久）">上海宠物美容学校培训价格表（上海宠物美容师培训班多少钱,需要学多久）</a></li>
                        <li class="py-2"><a href="/html/category/article-4319.htm" title="猫咪打的三针疫苗多少钱啊图片（猫咪打的三针疫苗多少钱啊图片大全）">猫咪打的三针疫苗多少钱啊图片（猫咪打的三针疫苗多少钱啊图片大全）</a></li>
                        <li class="py-2"><a href="/html/category/article-6130.htm" title="附近动物诊所在哪里（附近动物店）">附近动物诊所在哪里（附近动物店）</a></li>
                        <li class="py-2"><a href="/html/category/article-6778.htm" title="河南兽药厂家排名（河南兽药厂家排名前50强企业）">河南兽药厂家排名（河南兽药厂家排名前50强企业）</a></li>
                        <li class="py-2"><a href="/html/category/article-5980.htm" title="动物医院设备清单价格（动物医院常见的诊疗设备）">动物医院设备清单价格（动物医院常见的诊疗设备）</a></li>
                        <li class="py-2"><a href="/html/category/article-6595.htm" title="兽药生产厂家排名（兽药生产企业排名）">兽药生产厂家排名（兽药生产企业排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-7147.htm" title="play是什么牌子的衣服贵吗(play是什么牌子的衣服价格)">play是什么牌子的衣服贵吗(play是什么牌子的衣服价格)</a></li>
                        <li class="py-2"><a href="/html/category/article-6219.htm" title="动物疫苗预防控制中心（动物疫病预防中心）">动物疫苗预防控制中心（动物疫病预防中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-6962.htm" title="宠物医院好评200字通用评论怎么写（宠物医院好评的段子）">宠物医院好评200字通用评论怎么写（宠物医院好评的段子）</a></li>
                        <li class="py-2"><a href="/html/category/article-6779.htm" title="胶原蛋白肽粉哪个品牌好一点(胶原蛋白肽粉哪个品牌好一点儿)">胶原蛋白肽粉哪个品牌好一点(胶原蛋白肽粉哪个品牌好一点儿)</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-4039.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>CoreWCF 1.0 正式发布，支持 .NET Core 和 .NET 5+ 的 WCF &#8211; 冠军 _在线工具 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">CoreWCF 1.0 正式发布，支持 .NET Core 和 .NET 5+ 的 WCF &#8211; 冠军 _在线工具 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h1 id="corewcf-10-正式发布支持-net-core-和-net-5-的-wcf">CoreWCF 1.0 正式发布，支持 .NET Core 和 .NET 5+ 的 WCF</h1> <p>https://devblogs.microsoft.com/dotnet/corewcf-v1-released/</p> <p>CoreWCF 项目组正式发布 1.0 版本的 CoreWCF, 这是面向 .NET Core 平台的 WCF 移植版本。它支持 SOAP、NetTCP 和 WSDL 的相同实现。在代码中的使用方式于 WCF 相同，但是升级到使用 ASP.NET Core 作为服务宿主，并工作在 .NET Core 平台上。这是该项目的第一个主要发布，为 .NET Core、.NET Framework 和 .NET 5+ 提供 WCF 的特性。</p> <p>CoreWCF 1.0 版本兼容于 .NET standard 2.0，所以它可以工作在：</p> <ul> <li>.NET Framework 4.6.2 (及以上)</li> <li>.NET Core 3.1</li> <li>.NET 5 & 6</li> </ul> <p>对于 .NET Framework 的支持简化了了迁移到 .NET Core 代价。依赖 WCF 的应用程序可以在 .NET Framewordk 平台就地升级到使用 CoreWCF。对于随后升级到使用 .NET Core 或者 .NET 5+ 也一样。</p> <p>程序集可以通过 Nuget.org 得到，参见发布说明中的描述。</p> <h2 id="社区项目">社区项目</h2> <p>CoreWCF 于 2019年6 月作为社区项目 发布，在随后的 3 年中有众多的贡献者。作为社区项目，CoreWCF 有大量的来自微软员工之外的贡献者，以及常规的来自 AWS 和其它组织的贡献者。</p> <p>特别感想 所有 贡献代码的开发者、问题以及建议者。该项目能够发展到今天，社区的支持至关重要，我们希望今后继续得到大家的支持。如果我不特别提到@ mconnew，那将是我的失职，他一直是项目的骨干，并贡献了大部分代码。</p> <p>作为社区项目，来自社区的声音引导着项目的方向。例如，Feature Roadmap Vote issue 是计划下一步工作的高度流畅的渠道。如果你是 WCF 用户，请提供你对今后版本的期待。</p> <h2 id="特性">特性</h2> <p>CoreWF 是来自 WCF 功能子集，但是包含了我们相信是其中最为重要的部分功能，包括</p> <ul> <li>Http & NetTCP transports</li> <li>Bindings: <ul> <li>BasicHttpBinding</li> <li>NetHttpBinding</li> <li>NetTcpBinding – some WS-* features not supported</li> <li>WebHttpBinding</li> <li>WSHttpBinding – some WS-* features not supported</li> </ul> </li> <li>Security: <ul> <li>Transport</li> <li>NetTcpBinding supports Certificate and Windows authentication</li> <li>Http bindings require authentication to be configured in ASP.NET Core</li> <li>Transport With Message Credentials</li> <li>Username, Certificate and Windows Authentication are supported</li> <li>WS Federation</li> </ul> </li> <li>WSDL generation</li> <li>Partial configuration support including services & endpoints</li> <li>Extensibility (IServiceBehavior and IEndpointBehavior) – most extensibility is available</li> </ul> <p>没有实现的 WCF 主要功能有：</p> <ul> <li>Transports other than Http and NetTCP.</li> <li>Message security beyond Transport & Transport with Message Credentials</li> <li>Distributed transactions</li> <li>Message Queueing</li> </ul> <h2 id="谁应该使用-corewcf">谁应该使用 CoreWCF？</h2> <p>CoreWCF 面向的对象是曾经在 .NET Framework 下使用 WCF 的开发者，以及需要在 .NET Core 下需要使用 WCF 来现代化应用的开发者。尽管并没有什么可以阻止你对新项目适配 CoreWCF，我们还是建议你考虑更为现代的 SOAP 的替代品，例如 gRPC。CoreWCF 的关键点是对强依赖于 WCF 和 SOAP 的服务器和客户端应用更为简单的进行现代化。</p> <h2 id="来自微软的支持">来自微软的支持</h2> <p>我们认可对于企业客户的支持是如何重要，所以我们很高兴地宣布微软的产品支持将提供给 CoreWCF 客户。</p> <p>对于 CoreWCF 1.x 的支持将基于底层运行的 .NET 平台状态。</p> <table> <thead> <tr> <th>运行时版本</th> <th>Support dependency duration</th> </tr> </thead> <tbody> <tr> <td>.NET Framework 4.x</td> <td>The specific version of .NET Framework, and ASP.NET Core 2.1.</td> </tr> <tr> <td>.NET Core 3.1</td> <td>.NET 3.1 LTS – December 3, 2022</td> </tr> <tr> <td>.NET 5</td> <td>.NET 5 – May 8, 2022</td> </tr> <tr> <td>.NET 6</td> <td>.NET 6 LTS – November 8, 2024</td> </tr> </tbody> </table> <p>CoreWCF 将使用 Major.Minor 版本策略:</p> <ul> <li>1.0 将是 CoreWCF 的第一个主要版本</li> <li>Minor 发布将标记为 1.x，对基础平台的要求与 1.0 相同</li> <li>Minor 发布版本 (1.x) 将 API 兼容于 1.0 版本</li> <li>对于主要版本的支持将会持续到最后的 major.minor 发布 <ul> <li>当新的 major 或者 minor 发布的时候，上一版本将从新版本发布之日起，继续支持 6 个月，前提是正在使用的基础运行时依赖项仍在支持范围内。</li> </ul> </li> <li>后继的主要版本，例如 2.0，可能缩减支持的运行时。对于当前的 1.x 版本，会对于 2.x 版本不再支持的版本继续支持 6 个月，并且支持的时间仅限于底层的平台。 <ul> <li>最可能涉及到 .NET Framework，并且意味着只要支持 ASP.NET Core 2.1 和 .NET Framework 4.x，就可以支持 1.x。</li> </ul> </li> </ul> <h3 id="更多支持">更多支持</h3> <p>其它的组织或者公司可能选择支持使用了 CoreWCF 的产品或者服务。</p> <h2 id="使用入门">使用入门</h2> <p>对于数据和服务的定义与实现于 WCF 相同。主要的区别在于现在的宿主变成了 ASP.NET Core，以及服务暴露出来的方式。以下示例基于 .NET 6，但是同样的步骤也适用于其它平台。</p> <h3 id="1-定义服务">1. 定义服务</h3> <h4 id="11-创建空白的-aspnet-core-应用程序它提供服务的寄宿支持">1.1 创建空白的 ASP.NET Core 应用程序，它提供服务的寄宿支持</h4> <p>Visual Studio</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/649cb3fec1937c4f8dc858a6a129a623.jpg" alt="CoreWCF 1.0 正式发布，支持 .NET Core 和 .NET 5+ 的 WCF - 冠军 _在线工具"></p> <p>命令行：</p> <pre><code class="language-bash">mkdir CoreWCFDemoServer dotnet new web -n CoreWCFDemoServer -o CoreWCFDemoServer </code></pre> <h4 id="12-添加-corewcf-nuget-包">1.2 添加 CoreWCF Nuget 包</h4> <p>Visual Studio</p> <p>使用包管理器控制台，添加：</p> <ul> <li>CoreWCF.Primitives</li> <li>CoreWCF.Http</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/a1a54dfdcf0e287b54d86e5e84ce4002.jpg" alt="CoreWCF 1.0 正式发布，支持 .NET Core 和 .NET 5+ 的 WCF - 冠军 _在线工具"></p> <p>编辑项目文件，并添加：</p> <pre><code class="language-xml"><ItemGroup>   <PackageReference Include="CoreWCF.Http" Version="1.0.0" />   <PackageReference Include="CoreWCF.Primitives" Version="1.0.0" /> </ItemGroup> </code></pre> <h4 id="13-创建服务约定和数据约定定义">1.3 创建服务约定和数据约定定义</h4> <p>这些定义与 WCF 中相同。当改进项目的时候，这些代码很大部分不需要修改。</p> <p>文件：IEchoService.cs</p> <pre><code class="language-csharp">using System.Diagnostics.CodeAnalysis; using System.Runtime.Serialization; using CoreWCF;  namespace CoreWCfDemoServer {     [DataContract]     public class EchoFault     {         [AllowNull]         private string _text;          [DataMember]         [AllowNull]         public string Text         {             get { return _text; }             set { _text = value; }         }     }      [ServiceContract]     public interface IEchoService     {         [OperationContract]         string Echo(string text);          [OperationContract]         string ComplexEcho(EchoMessage text);          [OperationContract]         [FaultContract(typeof(EchoFault))]         string FailEcho(string text);      }      [DataContract]     public class EchoMessage     {         [AllowNull]         [DataMember]         public string Text { get; set; }     } } </code></pre> <p>文件 EchoService.cs</p> <pre><code class="language-csharp">using CoreWCF;  namespace CoreWCfDemoServer {     public class EchoService : IEchoService     {         public string Echo(string text)         {             System.Console.WriteLine($"Received {text} from client!");             return text;         }          public string ComplexEcho(EchoMessage text)         {             System.Console.WriteLine($"Received {text.Text} from client!");             return text.Text;         }          public string FailEcho(string text)             => throw new FaultException<EchoFault>(new EchoFault() { Text = "WCF Fault OK" }, new FaultReason("FailReason"));      } } </code></pre> <h4 id="14-需要告诉服务宿主哪些服务需要通过绑定暴露出来">1.4 需要告诉服务宿主哪些服务需要通过绑定暴露出来</h4> <p>更新 Program.cs 来暴露绑定。</p> <pre><code class="language-csharp">using CoreWCF; using CoreWCF.Configuration; using CoreWCF.Description; using CoreWCfDemoServer;  var builder = WebApplication.CreateBuilder(args); builder.WebHost.ConfigureKestrel((context, options) => {     options.AllowSynchronousIO = true; });  // Add WSDL support builder.Services.AddServiceModelServices().AddServiceModelMetadata(); builder.Services.AddSingleton<IServiceBehavior, UseRequestHeadersForMetadataAddressBehavior>();  var app = builder.Build(); app.UseServiceModel(builder => {     builder.AddService((serviceOptions) => { })         // Add a BasicHttpBinding at a specific endpoint         .AddServiceEndpoint<EchoService, IEchoService>(new BasicHttpBinding(), "/EchoService/basichttp")         // Add a WSHttpBinding with Transport Security for TLS         .AddServiceEndpoint<EchoService, IEchoService>(new WSHttpBinding(SecurityMode.Transport), "/EchoService/WSHttps"); }); var serviceMetadataBehavior = app.Services.GetRequiredService(); serviceMetadataBehavior.HttpGetEnabled = true;  app.Run(); </code></pre> <h4 id="15-更新-appsettingsjson-来指定固定的服务监听端口">1.5 更新 appsettings.json 来指定固定的服务监听端口</h4> <p>在 appsettings.json 文件中的 <code>Logging</code> 之前，增加如下行。</p> <pre><code class="language-json">"Urls": "http://localhost:5000;https://localhost:5001", </code></pre> <h4 id="16-运行项目以便服务可以被访问">1.6 运行项目以便服务可以被访问</h4> <h3 id="2-消费服务">2. 消费服务</h3> <h4 id="21-创建控制台应用">2.1 创建控制台应用</h4> <h4 id="22-添加服务引用">2.2 添加服务引用</h4> <p>Visual Studio</p> <p>使用 <code>添加服务引用</code> 命令，选择 <code>WCF Web Service</code> 作为服务类型</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/77942991e4476714236d2aa788a00820.jpg" alt="CoreWCF 1.0 正式发布，支持 .NET Core 和 .NET 5+ 的 WCF - 冠军 _在线工具"></p> <p>使用 <code> http://localhost:5000/EchoService/basichttp</code> 作为 WSDL 服务发现的 URL 地址。</p> <p>命令行方式：</p> <pre><code class="language-bash">dotnet tool install --global dotnet-svcutil dotnet-svcutil --roll-forward LatestMajor http://localhost:5000/EchoService/basichttp?wsdl </code></pre> <h4 id="23-将控制台应用代码替换为如下代码">2.3 将控制台应用代码替换为如下代码</h4> <pre><code class="language-csharp">using ServiceReference1; // Instantiate the Service wrapper specifying the binding and optionally the Endpoint URL. The BasicHttpBinding could be used instead. var client = new EchoServiceClient(EchoServiceClient.EndpointConfiguration.WSHttpBinding_IEchoService, "https://localhost:5001/EchoService/WSHttps");  var simpleResult = await client.EchoAsync("Hello"); Console.WriteLine(simpleResult);  var msg = new EchoMessage() { Text = "Hello2" }; var msgResult = await client.ComplexEchoAsync(msg); Console.WriteLine(msgResult); </code></pre> <h2 id="其它示例">其它示例</h2> <p>其它示例，包括桌面应用示例，请参阅：CoreWCF/src/Samples</p> <h2 id="总结">总结</h2> <p>我们很高兴看到社区在 CoreWCF 上的投入，并祝贺此发布。</p> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4038.htm">[Go实战]一个简单的主进程不退出(阻塞方法) 测试方案</a></p>
                                                <p>下一个：<a href="/html/category/article-4040.htm">@order注解 解答</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7514.htm" title="郑州宠物用品批发进货渠道在哪里（郑州宠物用品批发进货渠道在哪里啊）">郑州宠物用品批发进货渠道在哪里（郑州宠物用品批发进货渠道在哪里啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-7054.htm" title="动物医院科室分类（动物医院科室分类标准）">动物医院科室分类（动物医院科室分类标准）</a></li>
                        <li class="py-2"><a href="/html/category/article-7238.htm" title="宠物免费领养网站大全（免费领养宠物包邮）">宠物免费领养网站大全（免费领养宠物包邮）</a></li>
                        <li class="py-2"><a href="/html/category/article-7745.htm" title="合肥宠物领养中心在哪里有 合肥宠物领养中心在哪里有啊">合肥宠物领养中心在哪里有 合肥宠物领养中心在哪里有啊</a></li>
                        <li class="py-2"><a href="/html/category/article-7193.htm" title="58同城茶杯犬狗领养（58同城宠物狗狗出售茶杯犬）">58同城茶杯犬狗领养（58同城宠物狗狗出售茶杯犬）</a></li>
                        <li class="py-2"><a href="/html/category/article-7147.htm" title="play是什么牌子的衣服贵吗(play是什么牌子的衣服价格)">play是什么牌子的衣服贵吗(play是什么牌子的衣服价格)</a></li>
                        <li class="py-2"><a href="/html/category/article-7607.htm" title="宠物粮食哪里批发最便宜的呢（宠物粮食哪里批发最便宜的呢图片）">宠物粮食哪里批发最便宜的呢（宠物粮食哪里批发最便宜的呢图片）</a></li>
                        <li class="py-2"><a href="/html/category/article-7560.htm" title="被猫抓了一下出了点血多久***（被猫抓伤出血多久要***）">被猫抓了一下出了点血多久***（被猫抓伤出血多久要***）</a></li>
                        <li class="py-2"><a href="/html/category/article-6962.htm" title="宠物医院好评200字通用评论怎么写（宠物医院好评的段子）">宠物医院好评200字通用评论怎么写（宠物医院好评的段子）</a></li>
                        <li class="py-2"><a href="/html/category/article-7744.htm" title="动物防疫方针 动物防疫方针是什么?">动物防疫方针 动物防疫方针是什么?</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>
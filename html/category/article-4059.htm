<!DOCTYPE html>
<html lang="zh-CN">

<head>
       <link rel="canonical" href="https://lebanonaddress.github.io/html/category/article-4059.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/addons/xcblog/img/lebanonaddress/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Android 12图像显示系统简述Allocator/Mapper HAL服务的获取过程 - Lebanon Address</title>
        <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/lebanonaddress/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/addons/xcblog/css/lebanonaddress/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f480db041fa3a9ffc78a7d6776ae8726";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">Lebanon Address</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/html/category/">文章分类</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Android 12图像显示系统简述Allocator/Mapper HAL服务的获取过程 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/html/category/">文章分类</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<hr/> <h4 class="postTitle" style="text-align: left"><strong><span style="color: rgba(224, 62, 45, 1); font-size: 16px">必读：</span></strong></h4> <h4 class="postTitle" style="text-align: left; padding-left: 40px"><strong><span style="font-size: 15px">Android 12(S) 图像显示系统 - 开篇</span></strong></h4> <hr/> <h2>一、基本概念</h2> <p>在上一篇文章中，我们有简单介绍过 Gralloc Allocator/Mapper HAL的内容。Gralloc HAL 分为了两部分：一个是 allocator ，一个是 mapper。Android系统定义了标准的 Gralloc HAL interface，具体实现有OEM/芯片厂商完成。</p> <h3>1.1 allocator HAL interface 的定义</h3> <p><span style="background-color: rgba(255, 255, 255, 1); color: rgba(186, 55, 42, 1)"><strong>Allocator 实现为一个 Binderized HAL Service（绑定式HAL）,运行在独立的进程中，使用者通过 HwBinder 与之建立连接，类似与AIDL获取服务的方式。</strong></span></p> <pre class="language-cpp"><code>/hardware/interfaces/graphics/allocator/4.0/IAllocator.hal</code></pre> <h3>1.2 mapper HAL interface 的定义</h3> <p><span style="background-color: rgba(255, 255, 255, 1); color: rgba(186, 55, 42, 1)"><strong>Mapper 实现为一个<span class="devsite-heading" role="heading" aria-level="2">Passthrough</span> HAL Service（<span class="devsite-heading" role="heading" aria-level="2">直通式</span>HAL）, 运行在调用它的进程中。本质上 Mode of HIDL in which the server is a shared library, dlopened by the client. In passthrough mode, client and server are the same process but separate codebases.</strong></span></p> <pre class="language-cpp"><code>/hardware/interfaces/graphics/mapper/4.0/IMapper.hal</code></pre> <h3 id="binderized" role="presentation" data-text="Binderized HALs"><span class="devsite-heading" role="heading" aria-level="2"></span></h3> <h3 role="presentation" data-text="Binderized HALs"><strong><span class="devsite-heading" role="heading" aria-level="2">1.3 Binderized HALs</span>（绑定式HAL）</strong></h3> <p role="presentation" data-text="Binderized HALs"><strong>Indicates HIDL is being used for remote procedure calls between processes, implemented over a Binder-like mechanism. See also passthrough.</strong></p> <p><code dir="ltr" translate="no">android.hardware.graphics.allocator@x.0 ==> Required to be binderized in Android 8.0 so file descriptors don't have to be shared between trusted and untrusted processes.</code></p> <p>Android 8.0之后的版本要求，allocator实现为 Binderized HAL，用于分配图形缓存，即为GraphicBuffer分配实际内存。</p> <h3 id="passthrough" role="presentation" data-text="Passthrough HALs"><strong><span class="devsite-heading" role="heading" aria-level="2">1.4 Passthrough HALs（直通式HAL）</span></strong></h3> <p role="presentation" data-text="Passthrough HALs"><strong><span class="devsite-heading" role="heading" aria-level="2">Mode of HIDL in which the server is a shared library, dlopened by the client. In passthrough mode, client and server are the same process but separate codebases. Used only to bring legacy codebases into the HIDL model. See also Binderized.</span></strong></p> <p><code dir="ltr" translate="no">android.hardware.graphics.mapper@x.0 ==> Maps memory into the process it lives in.</code></p> <h2>二、GraphicBufferMapper的创建流程</h2> <p>创建GraphicBufferMapper对象时，其构造函数中会去创建GrallocMapper对象，系统中会有不同版本的 grolloc-mapper，优先使用高版本，所以创建 Gralloc4Mapper 对象</p> <pre class="language-cpp"><code>[/frameworks/native/libs/ui/GraphicBufferMapper.cpp]  GraphicBufferMapper::GraphicBufferMapper() {     // 优先选择高版本的 gralloc-mapper     mMapper = std::make_unique<const Gralloc4Mapper>();     if (mMapper->isLoaded()) {         mMapperVersion = Version::GRALLOC_4;         return;     }     ... }</code></pre> <p>Gralloc4Mapper的构造函数中去获取 gralloc-mapper hal service，这是一个 passthrough hal service</p> <pre class="language-cpp"><code>Gralloc4Mapper::Gralloc4Mapper() {     mMapper = IMapper::getService(); // 去获取服务，     ... }</code></pre> <p><code>IMaper::getService()</code> 是编译系统根据 IMapper HIDL interface 自动生成的。</p> <p>IMapper HIDL interface 的定义位于：</p> <p><code>/hardware/interfaces/graphics/mapper/4.0/IMapper.hal</code></p> <p>编译完源码后，out目录下会生成根据 IMapperHDIL interface 生成的头文件和源码文件</p> <p><code>android/out/soong/.intermediates/hardware/interfaces/graphics/mapper/4.0</code></p> <p><code>IMaper::getService()</code>可以在 android.hardware.graphics.mapper@4.0_genc++ 目录下的 MapperAll.cpp 中看到其定义，如下：</p> <pre class="language-cpp"><code>::android::sp<IMapper> IMapper::getService(const std::string &serviceName, const bool getStub) {     return ::android::hardware::details::getServiceInternal<BpHwMapper>(serviceName, true, getStub); }</code></pre> <p>其中还有一个标识字符串：</p> <pre class="language-cpp"><code>const char* IMapper::descriptor("android.hardware.graphics.mapper@4.0::IMapper");</code></pre> <p>流程开始进入到Android系统原生的获取服务的流程<code>::android::hardware::details::getServiceInternal</code> 这个函数定义在：</p> <p><code>/system/libhidl/transport/include/hidl/HidlTransportSupport.h</code></p> <pre class="language-cpp"><code>template <typename BpType, typename IType = typename BpType::Pure,           typename = std::enable_if_t<std::is_same<i_tag, typename IType::_hidl_tag>::value>,           typename = std::enable_if_t<std::is_same<bphw_tag, typename BpType::_hidl_tag>::value>> sp<IType> getServiceInternal(const std::string& instance, bool retry, bool getStub) {     using ::android::hidl::base::V1_0::IBase;     // getRawServiceInternal 去获取服务     sp<IBase> base = getRawServiceInternal(IType::descriptor, instance, retry, getStub);     ...// 省略一些检查过程     return IType::castFrom(base); }</code></pre> <p>紧接着往下走，就进入到<code>getRawServiceInternal</code>方法中</p> <pre class="language-cpp"><code>[/system/libhidl/transport/ServiceManagement.cpp]  sp<::android::hidl::base::V1_0::IBase> getRawServiceInternal(const std::string& descriptor,                                                              const std::string& instance,                                                              bool retry, bool getStub) {     using Transport = IServiceManager1_0::Transport;     sp<Waiter> waiter;      sp<IServiceManager1_1> sm;     Transport transport = Transport::EMPTY;     // 判断要获取这个service是那种模式：passthroght mode（直通式HAL） or binderized mode（绑定式HAL）     if (kIsRecovery) {         transport = Transport::PASSTHROUGH;     } else {         sm = defaultServiceManager1_1();         Return<Transport> transportRet = sm->getTransport(descriptor, instance);         transport = transportRet;     }     ...     for (int tries = 0; !getStub && (vintfHwbinder || vintfLegacy); tries++) {         //  binderized mode（绑定式HAL）,使用 defaultServiceManager 去检索、获取服务         Return<sp<IBase>> ret = sm->get(descriptor, instance);         sp<IBase> base = ret;         if (base != nullptr) {             Return<bool> canCastRet =                 details::canCastInterface(base.get(), descriptor.c_str(), true /* emitError */);                 ...             if (canCastRet.isOk() && canCastRet) {                 ...                 return base; // still needs to be wrapped by Bp class.             }         }     }     ...     if (getStub || vintfPassthru || vintfLegacy) {         //  passthroght mode（直通式HAL）,使用 defaultServiceManager 去检索、获取服务         const sp<IServiceManager1_0> pm = getPassthroughServiceManager();         if (pm != nullptr) {             sp<IBase> base = pm->get(descriptor, instance).withDefault(nullptr);             if (!getStub || trebleTestingOverride) {                 // 封装                 base = wrapPassthrough(base);             }             return base;         }     }      return nullptr; }</code></pre> <p>大概讲一下它的做的事情：</p> <p style="padding-left: 40px">1. 判断要获取的HAL服务的类型，是直通式HAL--<code>Transport::PASSTHROUGH</code>，还是绑定式HAL --<code>Transport::HWBINDER</code></p> <p style="padding-left: 40px">2. 如果是binderized mode绑定式HAL --<code>Transport::HWBINDER</code>，则会通过<code>defaultServiceManager</code> 去获取这个服务的代理，这个过程类似与框架层的binder service，比如 gralloc-allocator hal</p> <p style="padding-left: 40px">3. 如果是passthrough mode直通式HAL--<code>Transport::PASSTHROUGH</code>，则会通过 PassthroughServiceManager 去获取这个服务，这个过程本质上是在当前进程中使用<code>dlopen/dlsym</code>加载HAL动态库并获取函数<code>HIDL_FETCH_interfaceName</code>&nbsp; 的地址，HAL library中会去实现这个FETCH方法，比如 &nbsp;gralloc-mapper hal ，下面 arm gralloc 的实现，可以自行去官网下载源码：<strong>Open Source Mali GPUs Android Gralloc Module</strong></p> <pre class="language-cpp"><code>extern "C" IMapper *HIDL_FETCH_IMapper(const char * /* name */) { 	MALI_GRALLOC_LOGV("Arm Module IMapper %d.%d , pid = %d ppid = %d ", GRALLOC_VERSION_MAJOR, 	                  (HIDL_MAPPER_VERSION_SCALED - (GRALLOC_VERSION_MAJOR * 100)) / 10, getpid(), getppid());  	return new arm::mapper::GrallocMapper(); }</code></pre> <p style="padding-left: 40px">4. 不管是binderized还是passthrough ，最后得到都是一个进程了<code>::android::hidl::base::V1_0::IBase</code>的HIDL Interface对象，经过适当处理，就可以返回给使用者了</p> <p style="padding-left: 40px"> <p>对于 gralloc-mapper hal 因为采用的是passthrough mode，我们继续看看<code>PassthroughServiceManager</code> 去获取服务是大概是做了什么事情。</p> <p>主要是去看<code>PassthroughServiceManager::get()</code> 方法</p> <pre class="language-cpp"><code>[/system/libhidl/transport/ServiceManagement.cpp]  Return<sp<IBase>> get(const hidl_string& fqName,                       const hidl_string& name) override {     sp<IBase> ret = nullptr;     // 加载动态库，主要openLibs第二个参数是函数指针     openLibs(fqName, [&](void* handle, const std::string &lib, const std::string &sym) {         IBase* (*generator)(const char* name);         // 去已加载的动态库中检索指定函数的地址，sym是HIDL_FETCH_xxx，比如HIDL_FETCH_IMapper         *(void **)(&generator) = dlsym(handle, sym.c_str());         ...         // 调用找到的函数，比如 HIDL_FETCH_IMapper         ret = (*generator)(name.c_str());         ...         return false;     });      return ret; }</code></pre> <p><code></code></p> <p><code>PassthroughServiceManager::get()</code> 方法中首先就是去调用<code>openLibs</code>去寻找和加载动态库，<code>openLibs</code>定义如下：</p> <pre class="language-cpp"><code>[/system/libhidl/transport/ServiceManagement.cpp]  static void openLibs(     const std::string& fqName,     const std::function<bool /* continue */ (void* /* handle */, const std::string& /* lib */,                                              const std::string& /* sym */)>& eachLib) {     //fqName looks like android.hardware.foo@1.0::IFoo     // fqName 就是要找的服务的标识符，android.hardware.graphics.mapper@4.0::IMapper     size_t idx = fqName.find("::");     // 分离出包名和版本 == android.hardware.graphics.mapper@4.0     std::string packageAndVersion = fqName.substr(0, idx);     // 分离出接口名字 == IMapper     std::string ifaceName = fqName.substr(idx + strlen("::"));     // 要找的动态库名字的前缀 == android.hardware.graphics.mapper@4.0-impl     const std::string prefix = packageAndVersion + "-impl";     // 要找的动态库中的函数名字 == HIDL_FETCH_IMapper     const std::string sym = "HIDL_FETCH_" + ifaceName;     // dlopen 选项     constexpr int dlMode = RTLD_LAZY;     void* handle = nullptr;      dlerror(); // clear      static std::string halLibPathVndkSp = details::getVndkSpHwPath();     // 查找路径 "/odm/lib/hw/", "/vendor/lib/hw/", "/system/lib/hw/"     std::vector<std::string> paths = {         HAL_LIBRARY_PATH_ODM, HAL_LIBRARY_PATH_VENDOR, halLibPathVndkSp, #ifndef __ANDROID_VNDK__         HAL_LIBRARY_PATH_SYSTEM, #endif     };     ...     // 开始查找     for (const std::string& path : paths) {         // findFiles就是在path目录下，查找名字的前缀是prefix，后缀是.so的库         std::vector<std::string> libs = findFiles(path, prefix, ".so");          for (const std::string &lib : libs) {             const std::string fullPath = path + lib;              if (kIsRecovery || path == HAL_LIBRARY_PATH_SYSTEM) {                 handle = dlopen(fullPath.c_str(), dlMode);             } else { #if !defined(__ANDROID_RECOVERY__) && defined(__ANDROID__)                 // 加载动态库, 比如 /vendor/lib/hw/android.hardware.graphics.mapper@4.0-impl-arm.so                 handle = android_load_sphal_library(fullPath.c_str(), dlMode); #endif             }             // 加载失败，继续加载找到的满足条件的其它库             if (handle == nullptr) {                 const char* error = dlerror();                 LOG(ERROR) << "Failed to dlopen " << lib << ": "                            << (error == nullptr ? "unknown error" : error);                 continue;             }             // 加载成功，函数eachLib中去找sym这个函数的地址，并执行             if (!eachLib(handle, lib, sym)) {                 return;             }         }     } }</code></pre> <p><code>openLibs</code>函数的处理逻辑也很清晰，主要工作就是：</p> <p style="padding-left: 40px">1. 根据要检索的服务的 descriptor ，去指定的目录下（/odem/lib/hw or /vendor/lib/hw or /system/lib/hw）寻找对应的动态库；</p> <p style="padding-left: 40px">2. 找到动态库后，加载 android_load_sphal_library / dlopen ;</p> <p style="padding-left: 40px">3. 调用eachLib这个函数，去动态库中找到 HIDL_FETCH_xxx 这个函数的地址；</p> <p style="padding-left: 40px">4. eachLib就是在<code>PassthroughServiceManager::get()</code> 方法中调用<code>openLibs</code>时设置的，其中就会调用 HIDL_FETCH_xxx 这个函数去创建服务对象。</p> <p>经过上面的流程，加载了动态库，找到了HIDL_FETCH_xxx 这个函数，并且调用它创建了一个服务对象，然后再经过必要处理<code>wrapPassthrough(base)</code>就把这个服务的代理返回给了使用者。</p> <h2>三、GraphicBufferAllocator的创建流程</h2> <p>GraphicBufferAllocator 构造函数中会去创建一个Gralloc4Allocator对象，并且传递一个Gralloc4Mapper参数</p> <pre class="language-cpp"><code>[/frameworks/native/libs/ui/GraphicBufferAllocator.cpp]  GraphicBufferAllocator::GraphicBufferAllocator() : mMapper(GraphicBufferMapper::getInstance()) {     mAllocator = std::make_unique<const Gralloc4Allocator>(             reinterpret_cast<const Gralloc4Mapper&>(mMapper.getGrallocMapper()));     ... }</code></pre> <p>Gralloc4Allocator的构造函数如下：<code></code></p> <pre class="language-cpp"><code>[/frameworks/native/libs/ui/Gralloc4.cpp]  Gralloc4Allocator::Gralloc4Allocator(const Gralloc4Mapper& mapper) : mMapper(mapper) {     mAllocator = IAllocator::getService();     if (mAllocator == nullptr) {         ALOGW("allocator 3.x is not supported");         return;     } }</code></pre> <p>上述代码的是不是和Gralloc4Mapper很相似，区别在于 gralloc-allocator 是 Binderied HAL，在获取服务时有所区别，前面的分析中也有提到，在这里就不继续深入讲解了。Binderied HAL 实现部分会作为一个service独立运行在一个进程中，非常类似 Binder IPC的机制，可以仅作高度概括的理解即可。</p> <h2>五、小结</h2> <p>本文只是一点关于 Gralloc Allocator/Mapper HAL的补充知识，简单分析获取 HAL service的一些流程。到这关于GraphicBuffer及Gralloc的大概的知识点就讲完了，后续学习中会再根据自己遇到的实际问题及思考，陆续补充心得及细节。</p> <p><strong>补充：</strong></p> <h4 class="postTitle"><span role="heading" aria-level="2">Android Graphic IMpper Interface 解读</span></h4> 			
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-4058.htm">TS语言与JS语言的区别</a></p>
                                                <p>下一个：<a href="/html/category/article-4060.htm">MySQL数据库生成某一年的日历存储过程_在线工具</a></p>
                                            </div>

                                    </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4057.htm" title="vue打包后整合到springboot项目、并打包成jar上传到Linux服务器运行【前后端分离开发、整体部署到Linux服务器】">vue打包后整合到springboot项目、并打包成jar上传到Linux服务器运行【前后端分离开发、整体部署到Linux服务器】</a></li>
                        <li class="py-2"><a href="/html/category/article-5981.htm" title="兰州狗粮批发市场地址电话（兰州卖狗粮的地方）">兰州狗粮批发市场地址电话（兰州卖狗粮的地方）</a></li>
                        <li class="py-2"><a href="/html/category/article-4539.htm" title="牛杂怎么去腥味?">牛杂怎么去腥味?</a></li>
                        <li class="py-2"><a href="/html/category/article-4052.htm" title="Windows如何查看WiFi密码">Windows如何查看WiFi密码</a></li>
                        <li class="py-2"><a href="/html/category/article-4048.htm" title="【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）">【Android笔记】BaseAdapter适配器的介绍、使用及优化（详细）</a></li>
                        <li class="py-2"><a href="/html/category/article-6219.htm" title="动物疫苗预防控制中心（动物疫病预防中心）">动物疫苗预防控制中心（动物疫病预防中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-6175.htm" title="狗市吉娃娃多少钱（狗市吉娃娃视频）">狗市吉娃娃多少钱（狗市吉娃娃视频）</a></li>
                        <li class="py-2"><a href="/html/category/article-4053.htm" title="Autograd：Pytorch 中的自动微分机制讲解">Autograd：Pytorch 中的自动微分机制讲解</a></li>
                        <li class="py-2"><a href="/html/category/article-4051.htm" title="vue项目运行后自动运行浏览器（vue2/vue3）">vue项目运行后自动运行浏览器（vue2/vue3）</a></li>
                        <li class="py-2"><a href="/html/category/article-5955.htm" title="猫三联疫苗间隔多久打一次（猫三联疫苗间隔多少天）">猫三联疫苗间隔多久打一次（猫三联疫苗间隔多少天）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <p class="copyright_text">
                        Lebanon Address 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/bootstrap.bundle.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/jquery-3.0.0.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/lebanonaddress/plugin.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>